'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.install = undefined;

var installDependencies = function () {
  var _ref = _asyncToGenerator(function* (packageName) {
    (0, _assert2.default)(packageName, '[Package-Deps] Failed to determine package name');

    var dependencies = Helpers.getDependencies(packageName);
    if (!dependencies.length) {
      return;
    }
    yield Helpers.enablePackage('notifications');
    var view = new _view2.default(packageName, dependencies);
    var errors = yield Helpers.apmInstall(dependencies, function () {
      view.advance();
    });
    var promises = [];
    view.complete(errors);
    var _arr = dependencies;
    for (var _i = 0; _i < _arr.length; _i++) {
      var dependency = _arr[_i];
      if (errors.has(dependency.name)) {
        continue;
      }
      promises.push(atom.packages.activatePackage(dependency.name));
    }
    yield Promise.all(promises);
  });

  return function installDependencies(_x) {
    return _ref.apply(this, arguments);
  };
}();

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _atomPackagePath = require('atom-package-path');

var AtomPackagePath = _interopRequireWildcard(_atomPackagePath);

var _helpers = require('./helpers');

var Helpers = _interopRequireWildcard(_helpers);

var _view = require('./view');

var _view2 = _interopRequireDefault(_view);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step("next", value); }, function (err) { return step("throw", err); }); } } return step("next"); }); }; }

if (typeof window.__steelbrain_package_deps === 'undefined') {
  window.__steelbrain_package_deps = new Set();
}

function install(givenPackageName) {
  // NOTE: We are wrapping the async function in a sync function to avoid extra
  // stack values before we extract names
  return installDependencies(givenPackageName || AtomPackagePath.guessFromCallIndex(2));
}

exports.default = install;
exports.install = install;