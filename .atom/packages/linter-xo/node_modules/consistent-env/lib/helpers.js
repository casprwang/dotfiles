'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assign = exports.CACHE_KEY = exports.KNOWN_SHELLS = undefined;
exports.identifyEnvironment = identifyEnvironment;
exports.identifyEnvironmentAsync = identifyEnvironmentAsync;
exports.parse = parse;
exports.applySugar = applySugar;
exports.getCommand = getCommand;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lodash = require('lodash.uniq');

var _lodash2 = _interopRequireDefault(_lodash);

var _child_process = require('child_process');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SPAWN_TIMEOUT = 4000;

var DEFAULT_PATHS = ['/bin', '/sbin', '/usr/bin', '/usr/sbin', '/usr/local/bin', '/usr/local/sbin'];
var KNOWN_SHELLS = exports.KNOWN_SHELLS = ['zsh', 'bash', 'fish'];
var CACHE_KEY = exports.CACHE_KEY = '__STEELBRAIN_CONSISTENT_ENV_V1';
var assign = exports.assign = Object.assign || function (target, source) {
  for (var key in source) {
    if ({}.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
  return target;
};

function identifyEnvironment() {
  var _getCommand = getCommand();

  var command = _getCommand.command;
  var parameters = _getCommand.parameters;
  var options = _getCommand.options;

  options.timeout = SPAWN_TIMEOUT;
  return (0, _child_process.spawnSync)(command, parameters, options).stdout.toString().trim().split('\n');
}

function identifyEnvironmentAsync() {
  return new Promise(function (resolve, reject) {
    var _getCommand2 = getCommand();

    var command = _getCommand2.command;
    var parameters = _getCommand2.parameters;
    var options = _getCommand2.options;

    var childProcess = (0, _child_process.spawn)(command, parameters, options);
    var stdout = [];
    var timer = setTimeout(function () {
      childProcess.kill();
      reject(new Error('Process execution timed out'));
    }, SPAWN_TIMEOUT);
    childProcess.stdout.on('data', function (chunk) {
      stdout.push(chunk);
    });
    childProcess.on('close', function () {
      clearTimeout(timer);
      resolve(stdout.join('').trim().split('\n'));
    });
    childProcess.on('error', function (error) {
      reject(error);
    });
  });
}

function parse(rawEnvironment) {
  var environment = {};
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = rawEnvironment[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var chunk = _step.value;

      var index = chunk.indexOf('=');
      if (index !== -1) {
        var key = chunk.slice(0, index).trim();
        var value = chunk.slice(index + 1).trim();
        environment[key] = value;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return environment;
}

function applySugar(environment) {
  var path = process.env.PATH ? process.env.PATH.split(':') : [];
  if (environment.PATH) {
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = environment.PATH.split(':')[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var chunk = _step2.value;

        if (chunk && path.indexOf(chunk) === -1) {
          path.push(chunk);
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  }
  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = DEFAULT_PATHS[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      var entry = _step3.value;

      if (path.indexOf(entry) === -1) {
        path = [entry].concat(path);
      }
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3.return) {
        _iterator3.return();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }

  if (!environment.USER) {
    if (process.env.USER) {
      environment.USER = process.env.USER;
    } else if (environment.HOME) {
      environment.USER = _path2.default.basename(environment.HOME);
    }
  }

  environment.PATH = (0, _lodash2.default)(path).join(':');
  environment.PWD = environment.OLDPWD = process.cwd();
  return environment;
}

function getCommand() {
  var command = process.env.SHELL || 'sh';
  var options = { encoding: 'utf8' };
  var parameters = ['-c', 'env;exit'];

  var shell = _path2.default.basename(command);
  if (shell === 'bash') {
    parameters = ['-c', 'source ~/.bashrc;source ~/.bash_profile;env;exit'];
  } else if (shell === 'zsh') {
    parameters = ['-c', 'source ~/.zshrc;env;exit'];
  } else if (shell === 'fish') {
    parameters = ['-c', 'source ~/.config/fish/config.fish;env;exit'];
  }

  return { command: command, parameters: parameters, options: options };
}