'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findAsync = exports.find = undefined;

var findItemAsync = function () {
  var _ref = _asyncToGenerator(function* (directory, name) {
    var names = [].concat(name);
    var chunks = directory.split(_path2.default.sep);

    while (chunks.length) {
      var currentDir = chunks.join(_path2.default.sep);
      if (currentDir === '') {
        currentDir = _path2.default.resolve(directory, '/');
      }
      for (var i = 0, length = names.length; i < length; ++i) {
        var fileName = names[i];
        var filePath = _path2.default.join(currentDir, fileName);
        try {
          yield access(filePath, _fs2.default.R_OK);
          return filePath;
        } catch (_) {
          // Do nothing
        }
      }
      chunks.pop();
    }

    return null;
  });

  return function findItemAsync(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _sbMemoize = require('sb-memoize');

var _sbMemoize2 = _interopRequireDefault(_sbMemoize);

var _sbPromisify = require('sb-promisify');

var _sbPromisify2 = _interopRequireDefault(_sbPromisify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step("next", value); }, function (err) { return step("throw", err); }); } } return step("next"); }); }; }

var access = (0, _sbPromisify2.default)(_fs2.default.access);

function findItem(directory, name) {
  var names = [].concat(name);
  var chunks = directory.split(_path2.default.sep);

  while (chunks.length) {
    var currentDir = chunks.join(_path2.default.sep);
    if (currentDir === '') {
      currentDir = _path2.default.resolve(directory, '/');
    }
    for (var i = 0, length = names.length; i < length; ++i) {
      var fileName = names[i];
      var filePath = _path2.default.join(currentDir, fileName);

      try {
        _fs2.default.accessSync(filePath, _fs2.default.R_OK);
        return filePath;
      } catch (_) {
        // Do nothing
      }
    }
    chunks.pop();
  }

  return null;
}

var find = exports.find = (0, _sbMemoize2.default)(findItem);
var findAsync = exports.findAsync = (0, _sbMemoize2.default)(findItemAsync, { async: true });