{
  "_args": [
    [
      {
        "raw": "/private/var/folders/86/4m73wmd91gn4xdp7wy3rbjvh0000gn/T/d-116917-89407-1ljm82s/package.tgz",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "/private/var/folders/86/4m73wmd91gn4xdp7wy3rbjvh0000gn/T/d-116917-89407-1ljm82s/package.tgz",
        "spec": "/private/var/folders/86/4m73wmd91gn4xdp7wy3rbjvh0000gn/T/d-116917-89407-1ljm82s/package.tgz",
        "type": "local"
      },
      "/private/var/folders/86/4m73wmd91gn4xdp7wy3rbjvh0000gn/T/apm-install-dir-116917-89407-1q31t5u"
    ]
  ],
  "_from": "../d-116917-89407-1ljm82s/package.tgz",
  "_id": "script@3.10.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/script",
  "_phantomChildren": {},
  "_requested": {
    "raw": "/private/var/folders/86/4m73wmd91gn4xdp7wy3rbjvh0000gn/T/d-116917-89407-1ljm82s/package.tgz",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "/private/var/folders/86/4m73wmd91gn4xdp7wy3rbjvh0000gn/T/d-116917-89407-1ljm82s/package.tgz",
    "spec": "/private/var/folders/86/4m73wmd91gn4xdp7wy3rbjvh0000gn/T/d-116917-89407-1ljm82s/package.tgz",
    "type": "local"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "file:../d-116917-89407-1ljm82s/package.tgz",
  "_shasum": "6aabab675e3e7d0e0e74b4a768748ef385e113e6",
  "_shrinkwrap": null,
  "_spec": "/private/var/folders/86/4m73wmd91gn4xdp7wy3rbjvh0000gn/T/d-116917-89407-1ljm82s/package.tgz",
  "_where": "/private/var/folders/86/4m73wmd91gn4xdp7wy3rbjvh0000gn/T/apm-install-dir-116917-89407-1q31t5u",
  "activationCommands": {
    "atom-text-editor": [
      "script:run",
      "script:run-by-line-number",
      "script:run-options",
      "script:run-with-profile"
    ]
  },
  "author": {
    "name": "Kyle Kelley",
    "email": "rgbkrk@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/rgbkrk/atom-script/issues"
  },
  "contributors": [
    {
      "name": "Kyle Kelley",
      "email": "rgbkrk@gmail.com"
    },
    {
      "name": "GeneLocklin",
      "email": "gene.locklin@gmail.com"
    },
    {
      "name": "Robin Bolton",
      "email": "robin@robinbolton.com"
    },
    {
      "name": "rpavlick",
      "email": "ryan.pavlick@gmail.com"
    },
    {
      "name": "Idean Labib",
      "email": "idean1.labib@gmail.com"
    },
    {
      "name": "Christopher Armstrong",
      "email": "radix@twistedmatrix.com"
    },
    {
      "name": "Victor",
      "email": "foo-bar-baz-qux@users.noreply.github.com"
    },
    {
      "name": "Calyhre",
      "email": "calyhre@gmail.com"
    },
    {
      "name": "Kevin Busby",
      "email": "kevinb@earthrid.com"
    },
    {
      "name": "Ahmad M. Zawawi",
      "email": "ahmad.zawawi@gmail.com"
    },
    {
      "name": "Maxime Loliée",
      "email": "maxime@siliadev.com"
    },
    {
      "name": "Jonathan Channon",
      "email": "jonathan.channon@gmail.com"
    },
    {
      "name": "kami",
      "email": "kami30k@gmail.com"
    },
    {
      "name": "Erran Carey",
      "email": "me@errancarey.com"
    },
    {
      "name": "Florian Lefèvre",
      "email": "zedentox@gmail.com"
    },
    {
      "name": "Dustin Blackman",
      "email": "dustinblackman@users.noreply.github.com"
    },
    {
      "name": "elclanrs",
      "email": "cedric.ruiz@spacirdesigns.com"
    },
    {
      "name": "cdingpeng",
      "email": "cdingpeng@glitchsoft.com"
    },
    {
      "name": "gerane",
      "email": "gerane@gmail.com"
    },
    {
      "name": "Jake Sankey",
      "email": "jakesankey@icloud.com"
    },
    {
      "name": "Daniel Bayley",
      "email": "daniel.bayley@me.com"
    },
    {
      "name": "Dan",
      "email": "daniel.bayley@me.com"
    },
    {
      "name": "rgbkrk",
      "email": "rgbkrk@gmail.com"
    },
    {
      "name": "Otto Robba",
      "email": "OttoRobba@users.noreply.github.com"
    },
    {
      "name": "Hikaru Ojima",
      "email": "hikaru.ojima@mixi.co.jp"
    },
    {
      "name": "Rafael Belvederese",
      "email": "rafael@blvz.im"
    },
    {
      "name": "Will Sahatdjian",
      "email": "ws@kindwave.com"
    },
    {
      "name": "Lance Batson",
      "email": "lbatson@my.apsu.edu"
    },
    {
      "name": "Ash Wilson",
      "email": "smashwilson@gmail.com"
    },
    {
      "name": "Pedro Rodriguez",
      "email": "ski.rodriguez@gmail.com"
    },
    {
      "name": "Hans Rødtang",
      "email": "hansrodtang@gmail.com"
    },
    {
      "name": "Yeonghoon Park",
      "email": "sola92@gmail.com"
    },
    {
      "name": "Johan Bruning",
      "email": "johan@taquito.nl"
    },
    {
      "name": "Andy Hayden",
      "email": "andyhayden1@gmail.com"
    },
    {
      "name": "Alexey Slaykovsky",
      "email": "alexey@macbook.dlink"
    },
    {
      "name": "Christian Kjaer Laustsen",
      "email": "christianlaustsen@gmail.com"
    },
    {
      "name": "cormullion",
      "email": "cormullion@mac.com"
    },
    {
      "name": "jbtule",
      "email": "jay+code@tuley.name"
    },
    {
      "name": "Ivan Storck",
      "email": "ivanoats@gmail.com"
    },
    {
      "name": "Ciaran Downey",
      "email": "me@ciarand.me"
    },
    {
      "name": "bryanweatherly",
      "email": "bryanweatherly@gmail.com"
    },
    {
      "name": "Rnhmjoj",
      "email": "micheleguerinirocco@me.com"
    },
    {
      "name": "Calvin Bottoms",
      "email": "calvin.bottoms@gmail.com"
    },
    {
      "name": "Marek Piechut",
      "email": "marek.piechut@gmail.com"
    },
    {
      "name": "Rodolfo Carvalho",
      "email": "rhcarvalho@gmail.com"
    },
    {
      "name": "Sergey Koshelev",
      "email": "xih@yandex.ru"
    },
    {
      "name": "Tomasz Grodzki",
      "email": "dev@plain.pl"
    },
    {
      "name": "fazo96",
      "email": "fazius2009@gmail.com"
    },
    {
      "name": "morinmorin",
      "email": "mimomorin@gmail.com"
    },
    {
      "name": "Mirek Rusin",
      "email": "mirek@me.com"
    },
    {
      "name": "ThiconZ",
      "email": "ThiconZ@users.noreply.github.com"
    },
    {
      "name": "Daniel Chatfield",
      "email": "chatfielddaniel@gmail.com"
    },
    {
      "name": "Lucas Magno",
      "email": "lmagno94@gmail.com"
    },
    {
      "name": "benjamin",
      "email": "benjamin.nave@gmail.com"
    },
    {
      "name": "liamdawson",
      "email": "dawmail333@gmail.com"
    },
    {
      "name": "Liam Dawson",
      "email": "liam@liamdawson.me"
    },
    {
      "name": "Ilya Palkin",
      "email": "ilya1984@ukr.net"
    },
    {
      "name": "Sagi",
      "email": "saginedunkanal@users.noreply.github.com"
    },
    {
      "name": "Michael Pardo",
      "email": "kensuke155@gmail.com"
    },
    {
      "name": "Samuel Marks",
      "email": "samuelmarks@gmail.com"
    },
    {
      "name": "aki",
      "email": "lala.akira@gmail.com"
    },
    {
      "name": "Marc Harter",
      "email": "wavded@gmail.com"
    },
    {
      "name": "wflaschka",
      "email": "wflaschka@gmail.com"
    },
    {
      "name": "Jarmo Kivekas",
      "email": "jarmo.kivekas@nixu.com"
    },
    {
      "name": "Jan T. Sott",
      "email": "git@idleberg.com"
    },
    {
      "name": "Vladimir Shvets",
      "email": "stormherz@gmail.com"
    },
    {
      "name": "Nikita Gryzlov",
      "email": "nixel2007@gmail.com"
    },
    {
      "name": "A Manning",
      "email": "449a6a9b@opayq.com"
    }
  ],
  "dependencies": {
    "ansi-to-html": ">0.1.0",
    "atom-message-panel": "1.2.4",
    "atom-space-pen-views": "^2.0.3",
    "node-uuid": "~1.4.0",
    "strip-ansi": "^3.0.0",
    "underscore": "~1.5.2"
  },
  "description": "Run code in Atom!",
  "devDependencies": {
    "coffee-script": "^1.10.0",
    "coffeelint": "^1.14.2",
    "grunt": "~0.4.5"
  },
  "engines": {
    "atom": ">=0.174.0"
  },
  "homepage": "https://github.com/rgbkrk/atom-script#readme",
  "keywords": [
    "script",
    "runner",
    "Bash",
    "Behat Feature",
    "Clojure",
    "Coffeescript",
    "CoffeeScript (Literate)",
    "Cucumber (Gherkin)",
    "Elixir",
    "Erlang",
    "F#",
    "FSharp",
    "F*",
    "FStar",
    "Go",
    "Groovy",
    "Haskell",
    "Javascript",
    "Julia",
    "LaTeX",
    "Lua",
    "mongoDB",
    "newLISP",
    "Perl",
    "PHP",
    "PowerShell",
    "Python",
    "RSpec",
    "Ruby",
    "Ruby on Rails",
    "Scala",
    "Swift",
    "run",
    "Applescript",
    "code"
  ],
  "license": "Apache-2.0",
  "main": "./lib/script",
  "name": "script",
  "optionalDependencies": {},
  "private": false,
  "providedServices": {
    "default-script-runtime": {
      "description": "Provides default runtime that's configurable through Atom editor",
      "versions": {
        "0.1.0": "provideDefaultRuntime"
      }
    },
    "provide-blank-runtime": {
      "description": "Provides a Runtime instance that's intended to be more programatically configurable",
      "versions": {
        "0.1.0": "provideBlankRuntime"
      }
    }
  },
  "readme": "# Script\n\n[![Build Status](http://img.shields.io/travis/rgbkrk/atom-script.svg?style=flat)](https://travis-ci.org/rgbkrk/atom-script)\n\n**Run code in Atom!**\n\nRun scripts based on file name, a selection of code, or by line number.\n\n![](https://cloud.githubusercontent.com/assets/1694055/3226201/c458acbc-f067-11e3-84a0-da27fe334f5e.gif)\n\nCurrently supported grammars are:\n\n| Grammar                              | File Based | Selection Based | Notes |\n| :----------------------------------- | :--------- | :-------------- | :---- |\n| 1C (BSL)                             | Yes        |                 | Runs through [OneScript](http://oscript.io/) interpreter in console mode |\n| Ansible                              | Yes        |                 | |\n| AutoHotKey                           | Yes        | Yes             | Requires the path of 'AutoHotKey.exe' in your system environment variables.\n| AppleScript                          | Yes        | Yes             | |\n| Babel ES6 JS                         | Yes        | Yes             | |\n| Bash                                 | Yes        | Yes             | The shell used is based on your default `$SHELL` environment variable |\n| Batch                                | Yes        |                 | |\n| Behat Feature                        | Yes        |                 | |\n| BuckleScript                         | Yes        | Yes             | |\n| C                                    | Yes        | Yes             | Only available on OSX (`xcrun clang`) and Linux (`cc`) |\n| C#                                   | Yes        | Yes             | Requires the path of 'csc.exe' in your system environment variables |\n| C# Script                            | Yes        | Yes             | |\n| C++                                  | Yes        | Yes             | Only available on OSX (`xcurn clang++`) and Linux (`g++`) |\n| Clojure                              | Yes        | Yes             | Clojure scripts are executed via [Leiningen](http://leiningen.org/)'s [exec](https://github.com/kumarshantanu/lein-exec) plugin. Both `Leiningen` and `exec` must be installed |\n| CoffeeScript                         | Yes        | Yes             | |\n| CoffeeScript (Literate)              | Yes        | Yes             | Running selections of code for CoffeeScript (Literate) only works when selecting just the code blocks |\n| Crystal                              | Yes        | Yes             | |\n| Cucumber (Gherkin)                   | Yes        |                 | |\n| D                                    | Yes        | Yes             | |\n| Dart                                 | Yes        | Yes             | |\n| DOT (Graphviz)                       | Yes        | Yes             | |\n| Elixir                               | Yes        | Yes             | |\n| Erlang                               |            | Yes             | Uses `erl` for limited selection based runs (see [#70](https://github.com/rgbkrk/atom-script/pull/70)) |\n| F#                                   | Yes        |                 | |\n| F*                                   | Yes        |                 | |\n| Fish                                 | Yes        | Yes             | Finally, a way to run code within Atom for the 90s |\n| Forth (via GForth)                   | Yes        |                 | |\n| Fortran (via gfortran)               | Yes        |                 |\n| Gnuplot                              | Yes        |                 | |\n| Go                                   | Yes        |                 | |\n| Groovy                               | Yes        | Yes             | |\n| Haskell                              | Yes        | Yes             | |\n| Hy                                   | Yes        | Yes             | Requires the path of 'hy.exe' in your system environment variables. This is probably already fulfilled if you used `pip install hy` to get Hy. A Hy grammar, such as [this one](https://atom.io/packages/language-hy) is also a good idea. |\n| IcedCoffeeScript                     | Yes        | Yes             | |\n| Inno Setup                           | Yes        |                 | Requires the path of `ISCC.exe` in your system environment variables |\n| [ioLanguage](http://iolanguage.org/) | Yes        | Yes             | |\n| Java                                 | Yes        |                 | Windows users should manually add jdk path (...\\jdk1.x.x_xx\\bin) to their system environment variables |\n| Javascript                           | Yes        | Yes             | |\n| [JavaScript for Automation](https://developer.apple.com/library/mac/releasenotes/InterapplicationCommunication/RN-JavaScriptForAutomation/Articles/Introduction.html) (JXA)            | Yes        | Yes             | |\n| Jolie                                | Yes        |                 | |\n| Julia                                | Yes        | Yes             | |\n| Kotlin                               | Yes        | Yes             | |\n| LaTeX (via latexmk)                  | Yes        |                 | |\n| LilyPond                             | Yes        |                 | |\n| Lisp (via SBCL)                      | Yes        | Yes             | Selection based runs are limited to single line |\n| Literate Haskell                     | Yes        |                 | |\n| LiveScript                           | Yes        | Yes             | |\n| Lua                                  | Yes        | Yes             | |\n| Lua (WoW)                            | Yes        | Yes             | |\n| Makefile                             | Yes        | Yes             | |\n| [MATLAB](http://mathworks.com/products/matlab) | Yes        | Yes   | |\n| MIPS                                 | Yes        |                 | Requires the path of `spim` in your system environment variables |\n| MongoDB                              | Yes        | Yes             | |\n| MoonScript                           | Yes        | Yes             | |\n| [NCL](http://ncl.ucar.edu)           | Yes        | Yes             | Scripts must end with `exit` command for file based runs |\n| newLISP                              | Yes        | Yes             | |\n| Nim (and NimScript)                  | Yes        |                 | |\n| NSIS                                 | Yes        | Yes             | |\n| Objective-C                          | Yes        |                 | Only available on OSX (`xcrun clang`) |\n| Objective-C                          | Yes        |                 | Only available on OSX (`xcrun clang++`) |\n| OCaml                                | Yes        |                 | |\n| Octave                               | Yes        | Yes             | |\n| [Oz](https://mozart.github.io/)      | Yes        | Yes             | |\n| Pandoc Markdown                      | Yes        |                 | Requires the panzer pandoc wrapper https://github.com/msprev/panzer and the pandoc-flavored-markdown language package in Atom https://atom.io/packages/language-pfm |\n| Perl                                 | Yes        | Yes             | |\n| Perl 6                               | Yes        | Yes             | |\n| PHP                                  | Yes        | Yes             | |\n| PostgreSQL                           | Yes        | Yes             | Requires the atom-language-pgsql package in Atom https://atom.io/packages/language-pgsql. Connects as user `$PGUSER` to database `$PGDATABASE`. Both default to the operating system's user name and both can be set in the process environment or in Atom's `init.coffee` script: `process.env.PGUSER = ⟨username⟩` and `process.env.PGDATABASE = ⟨database name⟩` |\n| PowerShell                           | Yes        | Yes             | |\n| Processing                           | Yes        |                 | Runs through processing-java. |\n| Prolog                               | Yes        |                 | Scripts must contain a rule with the head `main` (e.g.`main:- parent(X,lucas),writeln(X).`). The script is executed with the goal `main` and is halted after the first result is found. The output is produced by the `writeln/1` predicates. It requires swipl |\n| Python                               | Yes        | Yes             | |\n| R                                    | Yes        | Yes             | |\n| Racket                               | Yes        | Yes             | |\n| [RANT](https://github.com/TheBerkin/Rant) | Yes        | Yes             | |\n| Reason                               | Yes        | Yes             | |\n| RSpec                                | Yes        | Yes             | |\n| Ruby                                 | Yes        | Yes             | |\n| Ruby on Rails                        | Yes        | Yes             | |\n| Rust                                 | Yes        |                 | |\n| Sage                                 | Yes        | Yes             | |\n| Sass/SCSS                            | Yes        |                 | |\n| Scala                                | Yes        | Yes             | |\n| Scheme                               | Yes        | Yes             | |\n| Shell Script                         | Yes        | Yes             | The shell used is based on your default `$SHELL` environment variable |\n| Standard ML                          | Yes        |                 | |\n| Stata                                | Yes        | Yes             | Runs through Stata. Note stata needs to be added to your system PATH for this to work. `Mac directions <http://www.stata.com/support/faqs/mac/advanced-topics/>`_ . |\n| Swift                                | Yes        |                 | |\n| Tcl                                  | Yes        | Yes             | |\n| TypeScript                           | Yes        | Yes             | |\n| Zsh                                  | Yes        | Yes             | The shell used is based on your default `$SHELL` environment variable |\n\n**NOTE**: Some grammars may require you to install [a custom language package](https://atom.io/search?utf8=✓&q=language).\n\nYou only have to add a few lines in a PR to support another.\n\n## Installation\n\n`apm install script`\n\nor\n\nSearch for `script` within package search in the Settings View.\n\n## Atom can't find node | ruby | python | my socks\n\nMake sure to launch Atom from the console/terminal. This gives atom all your useful environment variables. Additionally, make sure to run it with the project path you need. For example, use\n\n```\natom .\n```\n\nto get it to run with the *current* directory as the default place to run scripts from.\n\nIf you *really* wish to open atom from a launcher/icon, see [this issue for a variety of workarounds that have been suggested](https://github.com/rgbkrk/atom-script/issues/61#issuecomment-37337827).\n\n## Usage\n\nMake sure to run `atom` from the command line to get full access to your environment variables. Running Atom from the icon will launch using launchctl's environment.\n\n**Script: Run** will perform a \"File Based\" run when no text is selected (default).\n\n**Script: Run** while text is selected will perform a \"Selection Based\" run executing just the highlighted code.\n\n**Script: Run by Line Number** to run using the specified line number. **Note** that if you select an entire line this number could be off by one due to the way Atom detects numbers while text is selected.\n\n**Script: Configure Script** should be used to configure command options, program arguments, and environment variables overrides. Environment variables may be input into the options view in the form `VARIABLE_NAME_ONE=value;VARIABLE_NAME_TWO=\"other value\";VARIABLE_NAME_3='test'`.\n\nAlso, in this dialog you can save options as a profile for future use. For example, you can add two profiles, one for `python2.7` and another for `python3` and run scripts with a specified profile, which will be more convinient than entering options every time you want to switch python versions.\n\n**Script: Run with profile** allows you to run scripts with saved profiles. Profiles can be added in **Script: Run Options** dialog.\n\n**Script: Kill Process** will kill the process but leaves the pane open.\n\n**Script: Close View** closes the pane and kills the process.\n\nTo kill everything, click the close icon in the upper right and just go back to\ncoding.\n\n**Script: Copy Run Results** copies everything written to the output pane to the\nclipboard, allowing you to paste it into the editor.\n\n### Command and shortcut reference\n\n| Command                    | Mac OS X                            | Linux/Windows               | Notes                                                                         |\n|:---------------------------|:------------------------------------|:----------------------------|:------------------------------------------------------------------------------|\n| Script: Run                | <kbd>cmd-i</kbd>                    | <kbd>shift-ctrl-b</kbd>     | If text is selected a \"Selection Based\" is used instead of a \"File Based\" run |\n| Script: Run by Line Number | <kbd>shift-cmd-j</kbd>              | <kbd>shift-ctrl-j</kbd>     | If text is selected the line number will be the last                          |\n| Script: Run Options        | <kbd>shift-cmd-i</kbd>              | <kbd>shift-ctrl-alt-o</kbd> | Runs the selection or whole file with the given options                       |\n| Script: Run with profile   | <kbd>shift-cmd-k</kbd>              | <kbd>shift-ctrl-alt-b</kbd> | Runs the selection or whole file with the specified profile                   |\n| Script: Close View         | <kbd>esc</kbd> or <kbd>ctrl-w</kbd> | <kbd>esc</kbd>              | Closes the script view window                                                 |\n| Script: Kill Process       | <kbd>ctrl-c</kbd>                   | <kbd>ctrl-q</kbd>           | Kills the current script process                                              |\n\n### Replacements\n\nThe following parameters will be replaced in any entry in `args` (command and program arguments). They should all be enclosed in curly brackets `{}`\n\n  * `{FILE_ACTIVE}` - Full path to the currently active file in Atom. E.g. `/home/rgbkrk/atom-script/lib/script.coffee`\n  * `{FILE_ACTIVE_PATH}` - Full path to the folder where the currently active file is. E.g. `/home/rgbkrk/atom-script/lib`\n  * `{FILE_ACTIVE_NAME}` - Full name and extension of active file. E.g., `script.coffee`\n  * `{FILE_ACTIVE_NAME_BASE}` - Name of active file WITHOUT extension. E.g., `script`\n  * `{PROJECT_PATH}` - Full path to the root of the project. This is normally the path Atom has as root. E.g `/home/rgbkrk/atom-script`\n\nParameters are compatible with `atom-build` package.\n\n## Development\n\nThis is an [Open Open Source Project](http://openopensource.org/), which means:\n\n> Individuals making significant and valuable contributions are given commit-access to the project to contribute as they see fit.\n\nAs for coding and contributing, rely on the atom [contributing guidelines](https://atom.io/docs/latest/contributing).\nThey're pretty sane.\n\n#### Quick and dirty setup\n\n`apm develop script`\n\nThis will clone the `script` repository to `~/github` unless you set the\n`ATOM_REPOS_HOME` environment variable.\n\n#### I already cloned it!\n\nIf you cloned it somewhere else, you'll want to use `apm link --dev` within the\npackage directory, followed by `apm install` to get dependencies.\n\n### Workflow\n\nAfter pulling upstream changes, make sure to run `apm update`.\n\nTo start hacking, make sure to run `atom --dev` from the package directory.\nCut a branch while you're working then either submit a Pull Request when done\nor when you want some feedback!\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/rgbkrk/atom-script.git"
  },
  "scripts": {},
  "version": "3.10.1"
}
