(function() {
  var PathSeparator, filter, legacy_scorer, matcher, prepQueryCache, scorer;

  scorer = require('./scorer');

  legacy_scorer = require('./legacy');

  filter = require('./filter');

  matcher = require('./matcher');

  PathSeparator = require('path').sep;

  prepQueryCache = null;

  module.exports = {
    filter: function(candidates, query, options) {
      if (!((query != null ? query.length : void 0) && (candidates != null ? candidates.length : void 0))) {
        return [];
      }
      return filter(candidates, query, options);
    },
    prepQuery: function(query) {
      return scorer.prepQuery(query);
    },
    score: function(string, query, prepQuery, _arg) {
      var allowErrors, coreQuery, legacy, queryHasSlashes, score, _ref;
      _ref = _arg != null ? _arg : {}, allowErrors = _ref.allowErrors, legacy = _ref.legacy;
      if (!((string != null ? string.length : void 0) && (query != null ? query.length : void 0))) {
        return 0;
      }
      if (prepQuery == null) {
        prepQuery = prepQueryCache && prepQueryCache.query === query ? prepQueryCache : (prepQueryCache = scorer.prepQuery(query));
      }
      if (!legacy) {
        score = scorer.score(string, query, prepQuery, !!allowErrors);
      } else {
        queryHasSlashes = prepQuery.depth > 0;
        coreQuery = prepQuery.core;
        score = legacy_scorer.score(string, coreQuery, queryHasSlashes);
        if (!queryHasSlashes) {
          score = legacy_scorer.basenameScore(string, coreQuery, score);
        }
      }
      return score;
    },
    match: function(string, query, prepQuery, _arg) {
      var allowErrors, baseMatches, matches, query_lw, string_lw, _i, _ref, _results;
      allowErrors = (_arg != null ? _arg : {}).allowErrors;
      if (!string) {
        return [];
      }
      if (!query) {
        return [];
      }
      if (string === query) {
        return (function() {
          _results = [];
          for (var _i = 0, _ref = string.length; 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
          return _results;
        }).apply(this);
      }
      if (prepQuery == null) {
        prepQuery = prepQueryCache && prepQueryCache.query === query ? prepQueryCache : (prepQueryCache = scorer.prepQuery(query));
      }
      if (!(allowErrors || scorer.isMatch(string, prepQuery.core_lw, prepQuery.core_up))) {
        return [];
      }
      string_lw = string.toLowerCase();
      query_lw = prepQuery.query_lw;
      matches = matcher.match(string, string_lw, prepQuery);
      if (matches.length === 0) {
        return matches;
      }
      if (string.indexOf(PathSeparator) > -1) {
        baseMatches = matcher.basenameMatch(string, string_lw, prepQuery);
        matches = matcher.mergeMatches(matches, baseMatches);
      }
      return matches;
    }
  };

}).call(this);
