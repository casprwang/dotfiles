'use strict';
'use babel';

/* @flow */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Emitter = undefined;

var _disposable = require('./disposable');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

class Emitter {

  constructor() {
    this.disposed = false;
    this.handlers = {};
  }
  on(eventName, handler) {
    var _this = this;

    if (this.disposed) {
      throw new Error('Emitter has been disposed');
    }
    if (typeof handler !== 'function') {
      throw new Error('Event handler must be a function');
    }
    if (typeof this.handlers[eventName] === 'undefined') {
      this.handlers[eventName] = new Set([handler]);
    } else {
      this.handlers[eventName].add(handler);
    }
    return new _disposable.Disposable(function () {
      _this.off(eventName, handler);
    });
  }
  off(eventName, handler) {
    if (!this.disposed && this.handlers[eventName]) {
      this.handlers[eventName].delete(handler);
    }
  }
  clear() {
    this.handlers = {};
  }
  emit(eventName) {
    if (this.disposed || typeof this.handlers[eventName] === 'undefined') {
      return;
    }

    for (var _len = arguments.length, params = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      params[_key - 1] = arguments[_key];
    }

    const paramsLength = params.length;
    const promises = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = this.handlers[eventName][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        const callback = _step.value;

        let value;
        if (paramsLength === 1) {
          value = callback(params[0]);
        } else if (paramsLength === 2) {
          value = callback(params[0], params[1]);
        } else if (paramsLength === 3) {
          value = callback(params[0], params[1], params[2]);
        } else if (paramsLength === 4) {
          value = callback(params[0], params[1], params[2], params[3]);
        } else if (paramsLength === 5) {
          value = callback(params[0], params[1], params[2], params[3], params[4]);
        } else {
          value = callback.apply(undefined, _toConsumableArray(params));
        }
        promises.push(value);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return Promise.all(promises);
  }
  isDisposed() {
    return this.disposed;
  }
  dispose() {
    this.disposed = true;
    this.handlers = {};
  }
}
exports.Emitter = Emitter;