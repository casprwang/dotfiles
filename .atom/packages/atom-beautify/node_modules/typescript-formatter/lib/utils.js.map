{"version":3,"file":"utils.js","sourceRoot":"","sources":["utils.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAEb,IAAY,EAAE,WAAM,YAAY,CAAC,CAAA;AAEjC,IAAY,EAAE,WAAM,IAAI,CAAC,CAAA;AACzB,IAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAE7B;IACI,YAAY,CAAC;IAEb,MAAM,CAAC;QACH,UAAU,EAAE,CAAC;QACb,OAAO,EAAE,CAAC;QACV,WAAW,EAAE,EAAE,CAAC,WAAW,CAAC,KAAK;QACjC,gBAAgB,EAAE,MAAM;QACxB,mBAAmB,EAAE,IAAI;QACzB,8BAA8B,EAAE,IAAI;QACpC,wCAAwC,EAAE,IAAI;QAC9C,wCAAwC,EAAE,IAAI;QAC9C,+CAA+C,EAAE,IAAI;QACrD,oDAAoD,EAAE,KAAK;QAC3D,0DAA0D,EAAE,KAAK;QACjE,uDAAuD,EAAE,KAAK;QAC9D,2DAA2D,EAAE,KAAK;QAClE,mCAAmC,EAAE,KAAK;QAC1C,uCAAuC,EAAE,KAAK;KACjD,CAAC;AACN,CAAC;AApBe,sCAA8B,iCAoB7C,CAAA;AAED,2BAAkC,OAAe,EAAE,cAAsB;IACrE,YAAY,CAAC;IAEb,IAAI,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;IAC3D,EAAE,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;QAChC,MAAM,CAAC,cAAc,CAAC;IAC1B,CAAC;IAED,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,KAAK,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QAClD,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE,cAAc,CAAC,CAAC;AAC3E,CAAC;AAbe,yBAAiB,oBAahC,CAAA","sourcesContent":["\"use strict\";\n\nimport * as ts from \"typescript\";\n\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\nexport function createDefaultFormatCodeOptions(): ts.FormatCodeOptions {\n    \"use strict\";\n\n    return {\n        IndentSize: 4,\n        TabSize: 4,\n        IndentStyle: ts.IndentStyle.Smart,\n        NewLineCharacter: '\\r\\n',\n        ConvertTabsToSpaces: true,\n        InsertSpaceAfterCommaDelimiter: true,\n        InsertSpaceAfterSemicolonInForStatements: true,\n        InsertSpaceBeforeAndAfterBinaryOperators: true,\n        InsertSpaceAfterKeywordsInControlFlowStatements: true,\n        InsertSpaceAfterFunctionKeywordForAnonymousFunctions: false,\n        InsertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis: false,\n        InsertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets: false,\n        InsertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces: false,\n        PlaceOpenBraceOnNewLineForFunctions: false,\n        PlaceOpenBraceOnNewLineForControlBlocks: false,\n    };\n}\n\nexport function getConfigFileName(baseDir: string, configFileName: string): string {\n    \"use strict\";\n\n    let configFilePath = path.resolve(baseDir, configFileName);\n    if (fs.existsSync(configFilePath)) {\n        return configFilePath;\n    }\n\n    if (baseDir.length === path.dirname(baseDir).length) {\n        return null;\n    }\n\n    return getConfigFileName(path.resolve(baseDir, \"../\"), configFileName);\n}\n"]}