{"version":3,"file":"cli.js","sourceRoot":"","sources":["cli.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:no-empty */\ntry {\n    // cackward compatibility for node v0.12\n    require(\"es6-promise\").polyfill();\n} catch (e) {\n}\n/* tslint:enable:no-empty */\ntry {\n    require(\"typescript\");\n} catch (e) {\n    console.error(\"typescript is required. please try 'npm install -g typescript'\\n\");\n}\n\nimport * as fs from \"fs\";\nimport * as commandpost from \"commandpost\";\nimport * as path from \"path\";\n\nimport * as expand from \"glob-expand\";\n\nimport * as lib from \"./\";\nimport {getConfigFileName} from \"./utils\";\n\nlet packageJson = JSON.parse(fs.readFileSync(__dirname + \"/../package.json\").toString());\n\ninterface RootOptions {\n    replace: boolean;\n    verify: boolean;\n    baseDir: string[];\n    stdin: boolean;\n    tsconfig: boolean;\n    tslint: boolean;\n    editorconfig: boolean;\n    tsfmt: boolean;\n    verbose: boolean;\n}\n\ninterface RootArguments {\n    files: string[];\n}\n\nlet root = commandpost\n    .create<RootOptions, RootArguments>(\"tsfmt [files...]\")\n    .version(packageJson.version, \"-v, --version\")\n    .option(\"-r, --replace\", \"replace .ts file\")\n    .option(\"--verify\", \"checking file format\")\n    .option(\"--baseDir <path>\", \"config file lookup from <path>\")\n    .option(\"--stdin\", \"get formatting content from stdin\")\n    .option(\"--no-tsconfig\", \"don't read a tsconfig.json\")\n    .option(\"--no-tslint\", \"don't read a tslint.json\")\n    .option(\"--no-editorconfig\", \"don't read a .editorconfig\")\n    .option(\"--no-tsfmt\", \"don't read a tsfmt.json\")\n    .option(\"--verbose\", \"makes output more verbose\")\n    .action((opts, args) => {\n        let replace = !!opts.replace;\n        let verify = !!opts.verify;\n        let baseDir = opts.baseDir ? opts.baseDir[0] : null;\n        let stdin = !!opts.stdin;\n        let tsconfig = !!opts.tsconfig;\n        let tslint = !!opts.tslint;\n        let editorconfig = !!opts.editorconfig;\n        let tsfmt = !!opts.tsfmt;\n        let verbose = !!opts.verbose;\n\n        let files = args.files;\n        let useTsconfig = false;\n        if (files.length === 0) {\n            let configFileName = getConfigFileName(baseDir || process.cwd(), \"tsconfig.json\");\n            if (configFileName) {\n                files = readFilesFromTsconfig(configFileName);\n                if (verbose) {\n                    console.log(`read: ${configFileName}`);\n                }\n                useTsconfig = true;\n            }\n        }\n\n        if (files.length === 0 && !opts.stdin) {\n            process.stdout.write(root.helpText() + '\\n');\n            return;\n        }\n\n        if (verbose) {\n            console.log(\"replace:\t  \" + (replace ? \"ON\" : \"OFF\"));\n            console.log(\"verify:\t   \" + (verify ? \"ON\" : \"OFF\"));\n            console.log(\"baseDir:\t   \" + (baseDir ? baseDir : process.cwd()));\n            console.log(\"stdin:\t\t\" + (stdin ? \"ON\" : \"OFF\"));\n            console.log(\"files from tsconfig:\t \" + (useTsconfig ? \"ON\" : \"OFF\"));\n            console.log(\"tsconfig:\t \" + (tsconfig ? \"ON\" : \"OFF\"));\n            console.log(\"tslint:\t   \" + (tslint ? \"ON\" : \"OFF\"));\n            console.log(\"editorconfig: \" + (editorconfig ? \"ON\" : \"OFF\"));\n            console.log(\"tsfmt:\t\t\" + (tsfmt ? \"ON\" : \"OFF\"));\n        }\n\n        if (stdin) {\n            if (replace) {\n                errorHandler(\"--stdin option can not use with --replace option\");\n                return;\n            }\n            lib\n                .processStream(files[0] || \"temp.ts\", process.stdin, {\n                    replace: replace,\n                    verify: verify,\n                    baseDir: baseDir,\n                    tsconfig: tsconfig,\n                    tslint: tslint,\n                    editorconfig: editorconfig,\n                    tsfmt: tsfmt,\n                    verbose: verbose,\n                })\n                .then(result => {\n                    let resultMap: lib.ResultMap = {};\n                    resultMap[result.fileName] = result;\n                    return resultMap;\n                })\n                .then(showResultHandler)\n                .catch(errorHandler);\n        } else {\n            lib\n                .processFiles(files, {\n                    replace: replace,\n                    verify: verify,\n                    baseDir: baseDir,\n                    tsconfig: tsconfig,\n                    tslint: tslint,\n                    editorconfig: editorconfig,\n                    tsfmt: tsfmt,\n                    verbose: verbose,\n                })\n                .then(showResultHandler)\n                .catch(errorHandler);\n        }\n    });\n\ncommandpost\n    .exec(root, process.argv)\n    .catch(errorHandler);\n\nfunction showResultHandler(resultMap: lib.ResultMap): Promise<any> {\n    \"use strict\";\n\n    let hasError = Object.keys(resultMap).filter(fileName => resultMap[fileName].error).length !== 0;\n    if (hasError) {\n        Object.keys(resultMap)\n            .map(fileName => resultMap[fileName])\n            .filter(result => result.error)\n            .forEach(result => process.stderr.write(result.message));\n        process.exit(1);\n    } else {\n        Object.keys(resultMap)\n            .map(fileName => resultMap[fileName])\n            .forEach(result => {\n                if (result.message) {\n                    process.stdout.write(result.message);\n                }\n            });\n    }\n    return null;\n}\n\nfunction errorHandler(err: any): Promise<any> {\n    \"use strict\";\n\n    if (err instanceof Error) {\n        console.error(err.stack);\n    } else {\n        console.error(err);\n    }\n    return Promise.resolve(null).then(() => {\n        process.exit(1);\n        return null;\n    });\n}\n\nfunction readFilesFromTsconfig(configPath: string) {\n    \"use strict\";\n\n    let tsconfigDir = path.dirname(configPath);\n    let tsconfig = JSON.parse(fs.readFileSync(configPath, \"utf-8\"));\n    if (tsconfig.files) {\n        let files: string[] = tsconfig.files;\n        return files.map(filePath => path.resolve(tsconfigDir, filePath));\n    } else if (tsconfig.filesGlob) {\n        return expand({ filter: \"isFile\", cwd: tsconfigDir }, tsconfig.filesGlob);\n    } else {\n        throw new Error(`No \"files\" or \"filesGlob\" section present in tsconfig.json`);\n    }\n}\n"]}