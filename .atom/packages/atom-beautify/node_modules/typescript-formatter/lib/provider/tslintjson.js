"use strict";
var path = require("path");
var fs = require("fs");
var utils_1 = require("../utils");
function makeFormatCodeOptions(fileName, opts, formatOptions) {
    "use strict";
    var baseDir = opts.baseDir ? path.resolve(opts.baseDir) : path.dirname(path.resolve(fileName));
    var configFileName = utils_1.getConfigFileName(baseDir, "tslint.json");
    if (!configFileName) {
        return formatOptions;
    }
    if (opts.verbose) {
        console.log("read " + configFileName + " for " + fileName);
    }
    var config = JSON.parse(fs.readFileSync(configFileName, "utf-8"));
    if (!config.rules) {
        return formatOptions;
    }
    if (config.rules.indent && config.rules.indent[0]) {
        if (config.rules.indent[1] === "spaces") {
            formatOptions.ConvertTabsToSpaces = true;
        }
        else if (config.rules.indent[1] === "tabs") {
            formatOptions.ConvertTabsToSpaces = false;
        }
    }
    if (config.rules.whitespace && config.rules.whitespace[0]) {
        for (var p in config.rules.whitespace) {
            var value = config.rules.whitespace[p];
            if (value === "check-branch") {
                formatOptions.InsertSpaceAfterKeywordsInControlFlowStatements = true;
            }
            else if (value === "check-decl") {
            }
            else if (value === "check-operator") {
                formatOptions.InsertSpaceBeforeAndAfterBinaryOperators = true;
            }
            else if (value === "check-separator") {
                formatOptions.InsertSpaceAfterCommaDelimiter = true;
                formatOptions.InsertSpaceAfterSemicolonInForStatements = true;
            }
            else if (value === "check-type") {
            }
        }
    }
    return formatOptions;
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = makeFormatCodeOptions;
function postProcess(fileName, formattedCode, opts, formatOptions) {
    "use strict";
    var baseDir = opts.baseDir ? path.resolve(opts.baseDir) : path.dirname(path.resolve(fileName));
    var configFileName = utils_1.getConfigFileName(baseDir, "tslint.json");
    if (!configFileName) {
        return formattedCode;
    }
    var config = JSON.parse(fs.readFileSync(configFileName, "utf-8"));
    if (!config.rules) {
        return formattedCode;
    }
    var additionalOptions = createDefaultAdditionalFormatCodeOptions();
    if (config.rules["no-consecutive-blank-lines"] === true) {
        additionalOptions.noConsecutiveBlankLines = true;
    }
    if (additionalOptions.noConsecutiveBlankLines) {
        formattedCode = formattedCode.replace(/\n+^$/mg, "\n");
    }
    return formattedCode;
}
exports.postProcess = postProcess;
function createDefaultAdditionalFormatCodeOptions() {
    "use strict";
    return {
        noConsecutiveBlankLines: false,
    };
}
//# sourceMappingURL=tslintjson.js.map