{"version":3,"file":"tsconfigjson.js","sourceRoot":"","sources":["tsconfigjson.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAIb,IAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAC7B,IAAY,EAAE,WAAM,IAAI,CAAC,CAAA;AAGzB,sBAAgC,UAAU,CAAC,CAAA;AAQ3C,+BAA8C,QAAgB,EAAE,IAAa,EAAE,aAAmC;IAC9G,YAAY,CAAC;IAEb,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC/F,IAAI,cAAc,GAAG,yBAAiB,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;IACjE,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;QAClB,MAAM,CAAC,aAAa,CAAC;IACzB,CAAC;IACD,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;QACf,OAAO,CAAC,GAAG,CAAC,UAAQ,cAAc,aAAQ,QAAU,CAAC,CAAC;IAC1D,CAAC;IAED,IAAI,MAAM,GAAqB,IAAI,CAAC,KAAK,CAAM,EAAE,CAAC,YAAY,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC,CAAC;IACzF,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,eAAe,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC;QAC7D,MAAM,CAAC,aAAa,CAAC;IACzB,CAAC;IAED,EAAE,CAAC,CAAC,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,WAAW,EAAE,KAAK,MAAM,CAAC,CAAC,CAAC;QAC1D,aAAa,CAAC,gBAAgB,GAAG,MAAM,CAAC;IAC5C,CAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,WAAW,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC;QAC/D,aAAa,CAAC,gBAAgB,GAAG,IAAI,CAAC;IAC1C,CAAC;IAED,MAAM,CAAC,aAAa,CAAC;AACzB,CAAC;AAxBD;uCAwBC,CAAA","sourcesContent":["\"use strict\";\n\nimport * as ts from \"typescript\";\n\nimport * as path from \"path\";\nimport * as fs from \"fs\";\n\nimport {Options} from \"../\";\nimport {getConfigFileName} from \"../utils\";\n\ninterface TsconfigSettings {\n    compilerOptions: {\n        newLine: string;\n    };\n}\n\nexport default function makeFormatCodeOptions(fileName: string, opts: Options, formatOptions: ts.FormatCodeOptions): ts.FormatCodeOptions {\n    \"use strict\";\n\n    let baseDir = opts.baseDir ? path.resolve(opts.baseDir) : path.dirname(path.resolve(fileName));\n    let configFileName = getConfigFileName(baseDir, \"tsconfig.json\");\n    if (!configFileName) {\n        return formatOptions;\n    }\n    if (opts.verbose) {\n        console.log(`read ${configFileName} for ${fileName}`);\n    }\n\n    let config: TsconfigSettings = JSON.parse(<any>fs.readFileSync(configFileName, \"utf-8\"));\n    if (!config.compilerOptions || !config.compilerOptions.newLine) {\n        return formatOptions;\n    }\n\n    if (config.compilerOptions.newLine.toLowerCase() === \"crlf\") {\n        formatOptions.NewLineCharacter = \"\\r\\n\";\n    } else if (config.compilerOptions.newLine.toLowerCase() === \"lf\") {\n        formatOptions.NewLineCharacter = \"\\n\";\n    }\n\n    return formatOptions;\n}\n"]}