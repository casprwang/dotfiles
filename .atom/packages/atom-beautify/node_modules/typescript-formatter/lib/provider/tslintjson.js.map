{"version":3,"file":"tslintjson.js","sourceRoot":"","sources":["tslintjson.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\n\nimport * as ts from \"typescript\";\n\nimport * as path from \"path\";\nimport * as fs from \"fs\";\n\nimport {Options} from \"../\";\nimport {getConfigFileName} from \"../utils\";\n\ninterface TslintSettings {\n    rules: {\n        indent: {\n            0: boolean;\n            1: string;\n        };\n        \"no-consecutive-blank-lines\": boolean,\n        whitespace: {\n            0: boolean;\n            1: string;\n            2: string;\n            3: string;\n            4: string;\n            5: string;\n            [key: string]: any;\n        };\n    };\n}\n\nexport interface AdditionalFormatOptions {\n    noConsecutiveBlankLines: boolean;\n}\n\nexport default function makeFormatCodeOptions(fileName: string, opts: Options, formatOptions: ts.FormatCodeOptions): ts.FormatCodeOptions {\n    \"use strict\";\n\n    let baseDir = opts.baseDir ? path.resolve(opts.baseDir) : path.dirname(path.resolve(fileName));\n    let configFileName = getConfigFileName(baseDir, \"tslint.json\");\n    if (!configFileName) {\n        return formatOptions;\n    }\n    if (opts.verbose) {\n        console.log(`read ${configFileName} for ${fileName}`);\n    }\n\n    let config: TslintSettings = JSON.parse(<any>fs.readFileSync(configFileName, \"utf-8\"));\n    if (!config.rules) {\n        return formatOptions;\n    }\n    if (config.rules.indent && config.rules.indent[0]) {\n        if (config.rules.indent[1] === \"spaces\") {\n            formatOptions.ConvertTabsToSpaces = true;\n        } else if (config.rules.indent[1] === \"tabs\") {\n            formatOptions.ConvertTabsToSpaces = false;\n        }\n    }\n    if (config.rules.whitespace && config.rules.whitespace[0]) {\n        for (let p in config.rules.whitespace) {\n            let value = config.rules.whitespace[p];\n            if (value === \"check-branch\") {\n                formatOptions.InsertSpaceAfterKeywordsInControlFlowStatements = true;\n            } else if (value === \"check-decl\") {\n                // none?\n            } else if (value === \"check-operator\") {\n                formatOptions.InsertSpaceBeforeAndAfterBinaryOperators = true;\n            } else if (value === \"check-separator\") {\n                formatOptions.InsertSpaceAfterCommaDelimiter = true;\n                formatOptions.InsertSpaceAfterSemicolonInForStatements = true;\n            } else if (value === \"check-type\") {\n                // none?\n            }\n        }\n    }\n\n    return formatOptions;\n}\n\nexport function postProcess(fileName: string, formattedCode: string, opts: Options, formatOptions: ts.FormatCodeOptions): string {\n    \"use strict\";\n\n    let baseDir = opts.baseDir ? path.resolve(opts.baseDir) : path.dirname(path.resolve(fileName));\n    let configFileName = getConfigFileName(baseDir, \"tslint.json\");\n    if (!configFileName) {\n        return formattedCode;\n    }\n\n    let config: TslintSettings = JSON.parse(<any>fs.readFileSync(configFileName, \"utf-8\"));\n    if (!config.rules) {\n        return formattedCode;\n    }\n\n    let additionalOptions = createDefaultAdditionalFormatCodeOptions();\n    if (config.rules[\"no-consecutive-blank-lines\"] === true) {\n        additionalOptions.noConsecutiveBlankLines = true;\n    }\n\n    if (additionalOptions.noConsecutiveBlankLines) {\n        formattedCode = formattedCode.replace(/\\n+^$/mg, \"\\n\");\n    }\n\n    return formattedCode;\n}\n\nfunction createDefaultAdditionalFormatCodeOptions(): AdditionalFormatOptions {\n    \"use strict\";\n\n    return {\n        noConsecutiveBlankLines: false,\n    };\n}\n"]}