{"version":3,"file":"utils.js","sourceRoot":"","sources":["utils.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAEb;;;;;GAKG;AACH,mBAA0B,IAAc;IACpC,YAAY,CAAC;IAEb,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,MAAM,EAAV,CAAU,CAAC,CAAC,MAAM,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAd,CAAc,EAAE,CAAC,CAAC,CAAC;AAC3E,CAAC;AAJe,iBAAS,YAIxB,CAAA;AAED;;;;;;;GAOG;AACH,aAAoB,GAAW,EAAE,MAAc,EAAE,GAAS;IACtD,YAAY,CAAC;IADgC,mBAAS,GAAT,SAAS;IAGtD,EAAE,CAAC,CAAC,MAAM,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;QACvB,MAAM,CAAC,GAAG,CAAC;IACf,CAAC;IACD,EAAE,CAAC,CAAC,GAAG,KAAK,EAAE,CAAC,CAAC,CAAC;QACb,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;IACpD,CAAC;IACD,OAAO,GAAG,CAAC,MAAM,GAAG,MAAM,EAAE,CAAC;QACzB,GAAG,IAAI,GAAG,CAAC;IACf,CAAC;IACD,MAAM,CAAC,GAAG,CAAC;AACf,CAAC;AAbe,WAAG,MAalB,CAAA;AAED;;;;;GAKG;AACH,+BAAsC,GAAW;IAC7C,YAAY,CAAC;IAEb,IAAI,SAAS,GAAG,KAAK,CAAC;IACtB,MAAM,CAAC,GAAG;SACL,KAAK,CAAC,EAAE,CAAC;SACT,GAAG,CAAC,UAAA,IAAI;QACL,EAAE,CAAC,CAAC,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC;YACf,SAAS,GAAG,IAAI,CAAC;YACjB,MAAM,CAAC,EAAE,CAAC;QACd,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACnB,SAAS,GAAG,KAAK,CAAC;YAClB,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;QAC9B,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;IACL,CAAC,CAAC;SACD,IAAI,CAAC,EAAE,CAAC,CAAC;AAClB,CAAC;AAlBe,6BAAqB,wBAkBpC,CAAA","sourcesContent":["\"use strict\";\n\n/**\n * calc max length of strs.\n * @param strs\n * @returns {number}\n * @private\n */\nexport function maxLength(strs: string[]): number {\n    \"use strict\";\n\n    return strs.map(str => str.length).reduce((p, c) => Math.max(p, c), 0);\n}\n\n/**\n * padding string with pad.\n * @param str\n * @param length\n * @param pad\n * @returns {string}\n * @private\n */\nexport function pad(str: string, length: number, pad = \" \"): string {\n    \"use strict\";\n\n    if (length <= str.length) {\n        return str;\n    }\n    if (pad === \"\") {\n        throw new Error(\"pad can't to be empty string\");\n    }\n    while (str.length < length) {\n        str += pad;\n    }\n    return str;\n}\n\n/**\n * convert foo-bar to fooBar.\n * @param str\n * @returns {string}\n * @private\n */\nexport function chainToLowerCamelCase(str: string): string {\n    \"use strict\";\n\n    let nextCamel = false;\n    return str\n        .split(\"\")\n        .map(char => {\n            if (char === \"-\") {\n                nextCamel = true;\n                return \"\";\n            } else if (nextCamel) {\n                nextCamel = false;\n                return char.toUpperCase();\n            } else {\n                return char;\n            }\n        })\n        .join(\"\");\n}\n"]}