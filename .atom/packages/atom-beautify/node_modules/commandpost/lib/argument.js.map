{"version":3,"file":"argument.js","sourceRoot":"","sources":["argument.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAEb,0BAA0B;AAC1B;IAQI;;;;;;;;OAQG;IACH,kBAAY,GAAW;QACnB,MAAM,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACpB,KAAK,GAAG;gBACJ,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;gBACrB,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC7B,KAAK,CAAC;YACV,KAAK,GAAG;gBACJ,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;gBACtB,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC7B,KAAK,CAAC;YACV;gBACI,MAAM,IAAI,KAAK,CAAC,sBAAsB,GAAG,GAAG,CAAC,CAAC;QACtD,CAAC;QACD,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACnC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACzB,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QAC1B,CAAC;IACL,CAAC;IAED;;;;;;;;;;;;;;;;;OAiBG;IACH,wBAAK,GAAL,UAAM,IAAS,EAAE,IAAc;QAC3B,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YACtD,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,mCAAmC,CAAC,CAAC;QACrE,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAChB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;YACvB,IAAI,GAAG,EAAE,CAAC;YACV,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QACD,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;QACvB,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YACxB,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,cAAc,CAAC,CAAC;QAChD,CAAC;QACD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC;QACtB,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IACL,eAAC;AAAD,CAAC,AAxED,IAwEC;AAxED;0BAwEC,CAAA","sourcesContent":["\"use strict\";\n\n// jsdoc, see constructor.\nexport default class Argument {\n    /** argument name */\n    name: string;\n    /** this argument is required */\n    required: boolean;\n    /** this argument is variadic */\n    variadic: boolean;\n\n    /**\n     * class of argument.\n     * ```\n     * cmd --path foo/bar buzz.txt\n     *                     â†‘ this one!\n     * ```\n     * @param arg pass '<foo>'(required) or '[foo]'(optional) or '<foo...>'(required & variadic) or '[foo...]'(optional & variadic)\n     * @class\n     */\n    constructor(arg: string) {\n        switch (arg.charAt(0)) {\n            case \"<\":\n                this.required = true;\n                this.name = arg.slice(1, -1);\n                break;\n            case \"[\":\n                this.required = false;\n                this.name = arg.slice(1, -1);\n                break;\n            default:\n                throw new Error(\"unsupported format: \" + arg);\n        }\n        if (/\\.\\.\\.$/.test(this.name)) {\n            this.name = this.name.slice(0, -3);\n            this.variadic = true;\n        } else {\n            this.variadic = false;\n        }\n    }\n\n    /**\n     * parse args.\n     * build to opts.\n     *\n     * e.g. #1\n     *   instance member:  name=foo, required=true, variadic=false\n     *   method arguments: opts={}, args=[\"foo!\", \"bar!\"].\n     *   opts are modified to { foo: \"foo!\" } and return [\"bar!\"].\n     *\n     * e.g. #2\n     *   instance member:  name=foo, required=false, variadic=true\n     *   method arguments: opts={}, args=[\"foo!\", \"bar!\"].\n     *   opts are modified to { foo: [\"foo!\", \"bar!\"] } and return [].\n     *\n     * @param opts build target object\n     * @param args\n     * @returns {string[]} rest args\n     */\n    parse(opts: any, args: string[]): string[] {\n        if (this.required && this.variadic && args.length === 0) {\n            throw new Error(this.name + \" is required more than 1 argument\");\n        }\n        if (this.variadic) {\n            opts[this.name] = args;\n            args = [];\n            return args;\n        }\n        let arg = args.shift();\n        if (this.required && !arg) {\n            throw new Error(this.name + \" is required\");\n        }\n        opts[this.name] = arg;\n        return args;\n    }\n}\n"]}