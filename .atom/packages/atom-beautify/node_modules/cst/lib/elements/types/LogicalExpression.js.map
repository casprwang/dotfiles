{"version":3,"sources":["../../../src/elements/types/LogicalExpression.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAEA,IAAM,mBAAmB;AACrB,UAAM,IADe;AAErB,UAAM;AAFe,CAAzB;;IAKqB,iB;;;;;;AAIjB,+BAAY,UAAZ,EAAwB;AAAA;AAAA,0HACd,mBADc,EACO,UADP;AAEvB;;;;wCAEe,Q,EAAU;AACtB,gBAAI,OAAO,SAAS,cAAT,EAAX;AACA,qBAAS,WAAT;;AAEA,gBAAI,WAAW,SAAS,SAAT,CAAmB,YAAnB,EAAiC,gBAAjC,EAAmD,KAAlE;AACA,qBAAS,WAAT;;AAEA,gBAAI,QAAQ,SAAS,cAAT,EAAZ;AACA,qBAAS,SAAT;;AAEA,iBAAK,IAAL,GAAY,IAAZ;AACA,iBAAK,QAAL,GAAgB,QAAhB;AACA,iBAAK,KAAL,GAAa,KAAb;AACH;;;;;kBArBgB,iB","file":"LogicalExpression.js","sourcesContent":["import Expression from '../Expression';\n\nconst logicalOperators = {\n    '||': true,\n    '&&': true\n};\n\nexport default class LogicalExpression extends Expression {\n\n    // TODO: Should respect operator precedence: putting \"a + b\" before \" * b\" without parens should raise an error.\n\n    constructor(childNodes) {\n        super('LogicalExpression', childNodes);\n    }\n\n    _acceptChildren(children) {\n        let left = children.passExpression();\n        children.skipNonCode();\n\n        let operator = children.passToken('Punctuator', logicalOperators).value;\n        children.skipNonCode();\n\n        let right = children.passExpression();\n        children.assertEnd();\n\n        this.left = left;\n        this.operator = operator;\n        this.right = right;\n    }\n}\n"]}