'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _Expression2 = require('../Expression');

var _Expression3 = _interopRequireDefault(_Expression2);

var _JSXEmptyExpression = require('./JSXEmptyExpression');

var _JSXEmptyExpression2 = _interopRequireDefault(_JSXEmptyExpression);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var JSXExpressionContainer = function (_Expression) {
    (0, _inherits3.default)(JSXExpressionContainer, _Expression);

    function JSXExpressionContainer(childNodes) {
        (0, _classCallCheck3.default)(this, JSXExpressionContainer);
        return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(JSXExpressionContainer).call(this, 'JSXExpressionContainer', childNodes));
    }

    (0, _createClass3.default)(JSXExpressionContainer, [{
        key: '_acceptChildren',
        value: function _acceptChildren(children) {
            children.passToken('Punctuator', '{');
            children.skipNonCode();

            var expression = void 0;

            // JSXEmptyExpression
            if (children.isToken('Punctuator', '}')) {
                expression = new _JSXEmptyExpression2.default();
            } else {
                // Expression
                expression = children.passExpression();
                children.skipNonCode();
            }

            children.passToken('Punctuator', '}');
            children.assertEnd();

            this.expression = expression;
        }
    }]);
    return JSXExpressionContainer;
}(_Expression3.default);

exports.default = JSXExpressionContainer;
//# sourceMappingURL=JSXExpressionContainer.js.map