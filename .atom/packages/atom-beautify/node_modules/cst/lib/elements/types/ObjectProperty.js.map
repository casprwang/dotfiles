{"version":3,"sources":["../../../src/elements/types/ObjectProperty.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;IAEqB,c;;;AACjB,4BAAY,UAAZ,EAAwB;AAAA;AAAA,uHACd,gBADc,EACI,UADJ;AAEvB;;;;wCAEe,Q,EAAU;AACtB,gBAAI,YAAJ;AACA,gBAAI,cAAJ;AACA,gBAAI,YAAY,KAAhB;AACA,gBAAI,WAAW,KAAf;;AAEA,uBAAW,SAAS,OAAT,CAAiB,YAAjB,EAA+B,GAA/B,CAAX;;AAEA,gBAAI,SAAS,MAAT,CAAgB,mBAAhB,CAAJ,EAA0C;AACtC,wBAAQ,SAAS,QAAT,EAAR;AACA,sBAAM,MAAM,IAAZ;AACH,aAHD,MAGO;AACH,sBAAM,QAAQ,QAAR,CAAN;AACA,oBAAI,SAAS,KAAT,IAAkB,IAAI,IAAJ,KAAa,YAAnC,EAAiD;AAC7C,gCAAY,IAAZ;AACA,4BAAQ,GAAR;AACH,iBAHD,MAGO;AACH,6BAAS,WAAT;AACA,wBAAI,SAAS,MAAT,CAAgB,oBAAhB,CAAJ,EAA2C;AACvC,gCAAQ,SAAS,QAAT,CAAkB,oBAAlB,CAAR;AACH,qBAFD,MAEO;AACH,iCAAS,SAAT,CAAmB,YAAnB,EAAiC,GAAjC;AACA,iCAAS,WAAT;AACA,4BAAI,SAAS,cAAT,CAAwB,SAA5B,EAAuC;AACnC,oCAAQ,SAAS,WAAT,EAAR;AACH,yBAFD,MAEO;AACH,oCAAQ,SAAS,cAAT,EAAR;AACH;AACJ;AACJ;AACJ;;AAED,qBAAS,SAAT;;AAEA,iBAAK,GAAL,GAAW,GAAX;AACA,iBAAK,KAAL,GAAa,KAAb;AACA,iBAAK,SAAL,GAAiB,SAAjB;AACA,iBAAK,QAAL,GAAgB,QAAhB;AACH;;;;;kBA3CgB,c;;;AA8CrB,SAAS,OAAT,CAAiB,QAAjB,EAA2B;AACvB,QACI,SAAS,MAAT,CAAgB,eAAhB,KACA,SAAS,MAAT,CAAgB,gBAAhB,CADA,IAEA,SAAS,MAAT,CAAgB,YAAhB,CAHJ,EAIE;AACE,eAAO,SAAS,QAAT,EAAP;AACH,KAND,MAMO;AACH,iBAAS,SAAT,CAAmB,YAAnB,EAAiC,GAAjC;AACA,iBAAS,WAAT;AACA,YAAI,SAAS,SAAS,cAAT,EAAb;AACA,iBAAS,WAAT;AACA,iBAAS,SAAT,CAAmB,YAAnB,EAAiC,GAAjC;AACA,eAAO,MAAP;AACH;AACJ","file":"ObjectProperty.js","sourcesContent":["import Node from '../Node';\n\nexport default class ObjectProperty extends Node {\n    constructor(childNodes) {\n        super('ObjectProperty', childNodes);\n    }\n\n    _acceptChildren(children) {\n        let key;\n        let value;\n        let shorthand = false;\n        let computed = false;\n\n        computed = children.isToken('Punctuator', '[');\n\n        if (children.isNode('AssignmentPattern')) {\n            value = children.passNode();\n            key = value.left;\n        } else {\n            key = readKey(children);\n            if (children.isEnd && key.type === 'Identifier') {\n                shorthand = true;\n                value = key;\n            } else {\n                children.skipNonCode();\n                if (children.isNode('FunctionExpression')) {\n                    value = children.passNode('FunctionExpression');\n                } else {\n                    children.passToken('Punctuator', ':');\n                    children.skipNonCode();\n                    if (children.currentElement.isPattern) {\n                        value = children.passPattern();\n                    } else {\n                        value = children.passExpression();\n                    }\n                }\n            }\n        }\n\n        children.assertEnd();\n\n        this.key = key;\n        this.value = value;\n        this.shorthand = shorthand;\n        this.computed = computed;\n    }\n}\n\nfunction readKey(children) {\n    if (\n        children.isNode('StringLiteral') ||\n        children.isNode('NumericLiteral') ||\n        children.isNode('Identifier')\n    ) {\n        return children.passNode();\n    } else {\n        children.passToken('Punctuator', '[');\n        children.skipNonCode();\n        let result = children.passExpression();\n        children.skipNonCode();\n        children.passToken('Punctuator', ']');\n        return result;\n    }\n}\n"]}