'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _Statement2 = require('../Statement');

var _Statement3 = _interopRequireDefault(_Statement2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TryStatement = function (_Statement) {
    (0, _inherits3.default)(TryStatement, _Statement);

    function TryStatement(childNodes) {
        (0, _classCallCheck3.default)(this, TryStatement);
        return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(TryStatement).call(this, 'TryStatement', childNodes));
    }

    (0, _createClass3.default)(TryStatement, [{
        key: '_acceptChildren',
        value: function _acceptChildren(children) {
            children.passToken('Keyword', 'try');
            children.skipNonCode();

            var block = children.passStatement('BlockStatement');
            children.skipNonCode();

            var handler = null;
            if (children.isNode('CatchClause')) {
                handler = children.passNode();
            }

            var finalizer = null;
            if (!children.isEnd) {
                children.skipNonCode();
                children.passToken('Keyword', 'finally');
                children.skipNonCode();
                finalizer = children.passStatement('BlockStatement');
            }

            children.assertEnd();

            this.block = block;
            this.finalizer = finalizer;
            this.handler = handler;
        }
    }]);
    return TryStatement;
}(_Statement3.default);

exports.default = TryStatement;
//# sourceMappingURL=TryStatement.js.map