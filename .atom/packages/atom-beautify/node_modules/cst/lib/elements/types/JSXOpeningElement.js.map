{"version":3,"sources":["../../../src/elements/types/JSXOpeningElement.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;IAGqB,iB;;;AACjB,+BAAY,UAAZ,EAAwB;AAAA;AAAA,0HACd,mBADc,EACO,UADP;AAEvB;;;;wCAEe,Q,EAAU;AACtB,gBAAI,aAAa,EAAjB;AACA,gBAAI,cAAc,KAAlB;;AAEA,qBAAS,SAAT,CAAmB,YAAnB,EAAiC,GAAjC;AACA,qBAAS,WAAT;AACA,gBAAI,OAAO,SAAS,aAAT,CAAuB,CAAC,eAAD,EAAkB,qBAAlB,EAAyC,mBAAzC,CAAvB,CAAX;AACA,qBAAS,WAAT;;AAEA,mBAAO,IAAP,EAAa;AACT,oBAAI,SAAS,MAAT,CAAgB,cAAhB,CAAJ,EAAqC;AACjC,6BAAS,WAAT;AACA,+BAAW,IAAX,CAAgB,SAAS,QAAT,CAAkB,cAAlB,CAAhB;AACA,6BAAS,WAAT;AACH,iBAJD,MAIO,IAAI,SAAS,MAAT,CAAgB,oBAAhB,CAAJ,EAA2C;AAC9C,6BAAS,WAAT;AACA,+BAAW,IAAX,CAAgB,SAAS,QAAT,CAAkB,oBAAlB,CAAhB;AACA,6BAAS,WAAT;AACH,iBAJM,MAIA;AACH;AACH;AACJ;;AAED,gBAAI,SAAS,OAAT,CAAiB,YAAjB,EAA+B,GAA/B,CAAJ,EAAyC;AACrC,yBAAS,WAAT;AACA,yBAAS,SAAT,CAAmB,YAAnB,EAAiC,GAAjC;AACA,8BAAc,IAAd;AACA,yBAAS,WAAT;AACH;;AAED,qBAAS,SAAT,CAAmB,YAAnB,EAAiC,GAAjC;AACA,qBAAS,SAAT;;AAEA,iBAAK,IAAL,GAAY,IAAZ;AACA,iBAAK,UAAL,GAAkB,UAAlB;AACA,iBAAK,WAAL,GAAmB,WAAnB;AACH;;;;;kBAzCgB,iB","file":"JSXOpeningElement.js","sourcesContent":["import Node from '../Node';\n\n// TODO: create JSXBoundaryElement?\nexport default class JSXOpeningElement extends Node {\n    constructor(childNodes) {\n        super('JSXOpeningElement', childNodes);\n    }\n\n    _acceptChildren(children) {\n        let attributes = [];\n        let selfClosing = false;\n\n        children.passToken('Punctuator', '<');\n        children.skipNonCode();\n        let name = children.passOneOfNode(['JSXIdentifier', 'JSXMemberExpression', 'JSXNamespacedName']);\n        children.skipNonCode();\n\n        while (true) {\n            if (children.isNode('JSXAttribute')) {\n                children.skipNonCode();\n                attributes.push(children.passNode('JSXAttribute'));\n                children.skipNonCode();\n            } else if (children.isNode('JSXSpreadAttribute')) {\n                children.skipNonCode();\n                attributes.push(children.passNode('JSXSpreadAttribute'));\n                children.skipNonCode();\n            } else {\n                break;\n            }\n        }\n\n        if (children.isToken('Punctuator', '/')) {\n            children.skipNonCode();\n            children.passToken('Punctuator', '/');\n            selfClosing = true;\n            children.skipNonCode();\n        }\n\n        children.passToken('Punctuator', '>');\n        children.assertEnd();\n\n        this.name = name;\n        this.attributes = attributes;\n        this.selfClosing = selfClosing;\n    }\n}\n"]}