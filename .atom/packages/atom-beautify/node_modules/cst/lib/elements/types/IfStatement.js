'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _Statement2 = require('../Statement');

var _Statement3 = _interopRequireDefault(_Statement2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var IfStatement = function (_Statement) {
    (0, _inherits3.default)(IfStatement, _Statement);

    function IfStatement(childNodes) {
        (0, _classCallCheck3.default)(this, IfStatement);
        return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(IfStatement).call(this, 'IfStatement', childNodes));
    }

    (0, _createClass3.default)(IfStatement, [{
        key: '_acceptChildren',
        value: function _acceptChildren(children) {
            children.passToken('Keyword', 'if');
            children.skipNonCode();

            children.passToken('Punctuator', '(');
            children.skipNonCode();

            var test = children.passExpression();
            children.skipNonCode();

            children.passToken('Punctuator', ')');
            children.skipNonCode();

            var consequent = children.passStatement();

            children.skipNonCode();

            var alternate = null;
            if (children.isToken('Keyword', 'else')) {
                children.moveNext();
                children.skipNonCode();
                alternate = children.passStatement();
            }

            children.assertEnd();

            this.test = test;
            this.consequent = consequent;
            this.alternate = alternate;
        }
    }]);
    return IfStatement;
}(_Statement3.default);

exports.default = IfStatement;
//# sourceMappingURL=IfStatement.js.map