{"version":3,"sources":["../../../src/elements/types/ClassMethod.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAM,kBAAkB;AACpB,SAAK,IADe;AAEpB,SAAK;AAFe,CAAxB;;IAKqB,W;;;AACjB,yBAAY,UAAZ,EAAwB;AAAA;;AAAA,yHACd,aADc,EACC,UADD;;AAEpB,cAAK,UAAL,GAAkB,IAAlB;AAFoB;AAGvB;;;;wCAEe,Q,EAAU;AACtB,gBAAI,YAAJ;AACA,gBAAI,iBAAJ;AACA,gBAAI,aAAJ;AACA,gBAAI,eAAe,KAAnB;AACA,gBAAI,YAAY,KAAhB;AACA,gBAAI,QAAQ,KAAZ;AACA,gBAAI,eAAJ;;AAEA,gBAAI,SAAS,OAAT,CAAiB,YAAjB,EAA+B,QAA/B,CAAJ,EAA8C;AAC1C,+BAAe,IAAf;AACA,yBAAS,SAAT;AACA,yBAAS,WAAT;AACH;;AAED,gBAAI,SAAS,OAAT,CAAiB,YAAjB,EAA+B,OAA/B,CAAJ,EAA6C;AACzC,wBAAQ,IAAR;AACA,yBAAS,SAAT;AACA,yBAAS,WAAT;AACH;;AAED,gBAAI,SAAS,OAAT,CAAiB,YAAjB,EAA+B,eAA/B,CAAJ,EAAqD;AACjD,uBAAO,SAAS,cAAT,CAAwB,KAA/B;AACA,yBAAS,SAAT;AACA,yBAAS,WAAT;AACH,aAJD,MAIO;AACH,uBAAO,QAAP;AACA,oBAAI,SAAS,OAAT,CAAiB,YAAjB,EAA+B,GAA/B,CAAJ,EAAyC;AACrC,gCAAY,IAAZ;AACA,6BAAS,SAAT;AACA,6BAAS,WAAT;AACH;AACJ;;AAED,gBAAI,SAAS,MAAT,CAAgB,YAAhB,CAAJ,EAAmC;AAC/B,2BAAW,KAAX;AACA,sBAAM,SAAS,QAAT,EAAN;AACA,oBAAI,SAAS,QAAT,IAAqB,IAAI,IAAJ,KAAa,YAAlC,IAAkD,IAAI,IAAJ,KAAa,aAAnE,EAAkF;AAC9E,2BAAO,aAAP;AACH;AACD,yBAAS,WAAT;AACH,aAPD,MAOO;AACH,2BAAW,IAAX;AACA,yBAAS,SAAT,CAAmB,YAAnB,EAAiC,GAAjC;AACA,yBAAS,WAAT;AACA,sBAAM,SAAS,cAAT,EAAN;AACA,yBAAS,WAAT;AACA,yBAAS,SAAT,CAAmB,YAAnB,EAAiC,GAAjC;AACA,yBAAS,WAAT;AACH;;AAED,gBAAI,SAAS,OAAT,CAAiB,YAAjB,EAA+B,GAA/B,CAAJ,EAAyC;AACrC,4BAAY,IAAZ;AACA,yBAAS,QAAT;AACA,yBAAS,WAAT;AACH;;AAED,gBAAI,SAAS,MAAT,CAAgB,YAAhB,CAAJ,EAAmC;AAC/B,qBAAK,SAAS,QAAT,EAAL;AACA,yBAAS,WAAT;AACH;;AAED,qBAAS,iCAAkB,QAAlB,CAAT;AACA,qBAAS,WAAT;;AAEA,gBAAI,OAAO,SAAS,aAAT,EAAX;;AAEA,qBAAS,SAAT;;AAEA,iBAAK,MAAL,GAAc,MAAd;AACA,iBAAK,KAAL,GAAa,KAAb;AACA,iBAAK,IAAL,GAAY,IAAZ;AACA,iBAAK,SAAL,GAAiB,SAAjB;AACA,iBAAK,IAAL,GAAY,IAAZ;AACA,iBAAK,GAAL,GAAW,GAAX;AACA,iBAAK,QAAL,GAAgB,QAAhB;AACA,iBAAK,MAAL,GAAc,YAAd;AACH;;;;;kBAnFgB,W","file":"ClassMethod.js","sourcesContent":["import Node from '../Node';\nimport getFunctionParams from './utils/getFunctionParams';\n\nconst getterAndSetter = {\n    get: true,\n    set: true\n};\n\nexport default class ClassMethod extends Node {\n    constructor(childNodes) {\n        super('ClassMethod', childNodes);\n        this.isFunction = true;\n    }\n\n    _acceptChildren(children) {\n        let key;\n        let computed;\n        let kind;\n        let staticMember = false;\n        let generator = false;\n        let async = false;\n        let params;\n\n        if (children.isToken('Identifier', 'static')) {\n            staticMember = true;\n            children.passToken();\n            children.skipNonCode();\n        }\n\n        if (children.isToken('Identifier', 'async')) {\n            async = true;\n            children.passToken();\n            children.skipNonCode();\n        }\n\n        if (children.isToken('Identifier', getterAndSetter)) {\n            kind = children.currentElement.value;\n            children.passToken();\n            children.skipNonCode();\n        } else {\n            kind = 'method';\n            if (children.isToken('Punctuator', '*')) {\n                generator = true;\n                children.passToken();\n                children.skipNonCode();\n            }\n        }\n\n        if (children.isNode('Identifier')) {\n            computed = false;\n            key = children.passNode();\n            if (kind === 'method' && key.type === 'Identifier' && key.name === 'constructor') {\n                kind = 'constructor';\n            }\n            children.skipNonCode();\n        } else {\n            computed = true;\n            children.passToken('Punctuator', '[');\n            children.skipNonCode();\n            key = children.passExpression();\n            children.skipNonCode();\n            children.passToken('Punctuator', ']');\n            children.skipNonCode();\n        }\n\n        if (children.isToken('Punctuator', '*')) {\n            generator = true;\n            children.moveNext();\n            children.skipNonCode();\n        }\n\n        if (children.isNode('Identifier')) {\n            id = children.passNode();\n            children.skipNonCode();\n        }\n\n        params = getFunctionParams(children);\n        children.skipNonCode();\n\n        let body = children.passStatement();\n\n        children.assertEnd();\n\n        this.params = params;\n        this.async = async;\n        this.body = body;\n        this.generator = generator;\n        this.kind = kind;\n        this.key = key;\n        this.computed = computed;\n        this.static = staticMember;\n    }\n}\n"]}