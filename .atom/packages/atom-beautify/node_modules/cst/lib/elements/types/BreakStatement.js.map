{"version":3,"sources":["../../../src/elements/types/BreakStatement.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;IAEqB,c;;;;;;;AAKjB,4BAAY,UAAZ,EAAwB;AAAA;AAAA,uHACd,gBADc,EACI,UADJ;AAEvB;;;;wCAEe,Q,EAAU;AACtB,qBAAS,SAAT,CAAmB,SAAnB,EAA8B,OAA9B;;AAEA,gBAAI,QAAQ,IAAZ;AACA,gBAAI,CAAC,SAAS,KAAd,EAAqB;AACjB,yBAAS,mBAAT;;AAEA,oBAAI,SAAS,MAAT,CAAgB,YAAhB,CAAJ,EAAmC;AAC/B,4BAAQ,SAAS,QAAT,CAAkB,YAAlB,CAAR;AACA,6BAAS,WAAT;AACA,6BAAS,aAAT;AAEH,iBALD,MAKO,IAAI,SAAS,OAAT,CAAiB,YAAjB,EAA+B,GAA/B,CAAJ,EAAyC;AAC5C,6BAAS,SAAT;AAEH,iBAHM,MAGA;AACH,6BAAS,SAAT;AACA,6BAAS,aAAT;AACH;AACJ;;AAED,qBAAS,SAAT;;AAEA,iBAAK,KAAL,GAAa,KAAb;AACH;;;;;kBAjCgB,c","file":"BreakStatement.js","sourcesContent":["import Statement from '../Statement';\n\nexport default class BreakStatement extends Statement {\n\n    // TODO: Requires a loop.\n    // TODO: In case of a label, requires label.\n\n    constructor(childNodes) {\n        super('BreakStatement', childNodes);\n    }\n\n    _acceptChildren(children) {\n        children.passToken('Keyword', 'break');\n\n        let label = null;\n        if (!children.isEnd) {\n            children.skipSameLineNonCode();\n\n            if (children.isNode('Identifier')) {\n                label = children.passNode('Identifier');\n                children.skipNonCode();\n                children.skipSemicolon();\n\n            } else if (children.isToken('Punctuator', ';')) {\n                children.passToken();\n\n            } else {\n                children.passToken();\n                children.skipSemicolon();\n            }\n        }\n\n        children.assertEnd();\n\n        this.label = label;\n    }\n}\n"]}