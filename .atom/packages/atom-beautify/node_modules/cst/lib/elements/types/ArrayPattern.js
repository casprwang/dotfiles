'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _Node2 = require('../Node');

var _Node3 = _interopRequireDefault(_Node2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ArrayPattern = function (_Node) {
    (0, _inherits3.default)(ArrayPattern, _Node);

    function ArrayPattern(childNodes) {
        (0, _classCallCheck3.default)(this, ArrayPattern);

        var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(ArrayPattern).call(this, 'ArrayPattern', childNodes));

        _this.isPattern = true;
        _this.isAssignable = true;
        return _this;
    }

    (0, _createClass3.default)(ArrayPattern, [{
        key: '_acceptChildren',
        value: function _acceptChildren(children) {
            var elements = [];
            children.passToken('Punctuator', '[');
            children.skipNonCode();
            while (!children.isToken('Punctuator', ']')) {
                if (children.isToken('Punctuator', ',')) {
                    elements.push(null);
                    children.moveNext();
                    children.skipNonCode();
                } else {
                    if (!children.isNode('MemberExpression')) {
                        children.assertPattern();
                    }
                    elements.push(children.currentElement);
                    children.moveNext();
                    children.skipNonCode();
                    if (children.isToken('Punctuator', ',')) {
                        children.moveNext();
                        children.skipNonCode();
                    }
                }
            }
            children.passToken('Punctuator', ']');
            children.assertEnd();
            this.elements = elements;
        }
    }]);
    return ArrayPattern;
}(_Node3.default);

exports.default = ArrayPattern;
//# sourceMappingURL=ArrayPattern.js.map