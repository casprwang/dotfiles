'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _Expression2 = require('../Expression');

var _Expression3 = _interopRequireDefault(_Expression2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var updateOperators = {
    '++': true,
    '--': true
};

var UpdateExpression = function (_Expression) {
    (0, _inherits3.default)(UpdateExpression, _Expression);


    // TODO: Should respect operator precedence: putting "++a" after "b" without parens should raise an error.

    function UpdateExpression(childNodes) {
        (0, _classCallCheck3.default)(this, UpdateExpression);
        return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(UpdateExpression).call(this, 'UpdateExpression', childNodes));
    }

    (0, _createClass3.default)(UpdateExpression, [{
        key: '_acceptChildren',
        value: function _acceptChildren(children) {
            var operator = void 0;
            var argument = void 0;
            var prefix = void 0;

            if (children.isToken('Punctuator', updateOperators)) {
                operator = children.passToken().value;
                children.skipNonCode();
                argument = children.passAssignable();
                prefix = true;
            } else {
                argument = children.passAssignable();
                children.skipNonCode();
                operator = children.passToken().value;
                prefix = false;
            }

            children.assertEnd();

            this.argument = argument;
            this.operator = operator;
            this.prefix = prefix;
        }
    }]);
    return UpdateExpression;
}(_Expression3.default);

exports.default = UpdateExpression;
//# sourceMappingURL=UpdateExpression.js.map