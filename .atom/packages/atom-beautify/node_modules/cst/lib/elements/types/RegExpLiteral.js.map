{"version":3,"sources":["../../../src/elements/types/RegExpLiteral.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;IAEqB,a;;;AACjB,2BAAY,UAAZ,EAAwB;AAAA;AAAA,sHACd,eADc,EACG,UADH;AAEvB;;;;wCAEe,Q,EAAU;AACtB,qBAAS,WAAT,CAAqB,mBAArB;AACA,gBAAI,UAAU,SAAS,cAAT,CAAwB,KAAxB,CAA8B,OAA5C;AACA,gBAAI,QAAQ,SAAS,cAAT,CAAwB,KAAxB,CAA8B,KAA1C;AACA,gBAAI,QAAQ;AACR,0BAAU,SADF;AAER,qBAAK,SAAS,cAAT,CAAwB,aAAxB;AAFG,aAAZ;;AAKA,qBAAS,QAAT;AACA,qBAAS,SAAT;;AAEA,iBAAK,KAAL,GAAa,KAAb;AACA,iBAAK,OAAL,GAAe,OAAf;AACA,iBAAK,KAAL,GAAa,KAAb;AACH;;;;;kBApBgB,a","file":"RegExpLiteral.js","sourcesContent":["import Expression from '../Expression';\n\nexport default class RegExpLiteral extends Expression {\n    constructor(childNodes) {\n        super('RegExpLiteral', childNodes);\n    }\n\n    _acceptChildren(children) {\n        children.assertToken('RegularExpression');\n        let pattern = children.currentElement.value.pattern;\n        let flags = children.currentElement.value.flags;\n        let extra = {\n            rawValue: undefined,\n            raw: children.currentElement.getSourceCode()\n        };\n\n        children.moveNext();\n        children.assertEnd();\n\n        this.extra = extra;\n        this.pattern = pattern;\n        this.flags = flags;\n    }\n}\n"]}