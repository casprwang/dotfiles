'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _Expression2 = require('../Expression');

var _Expression3 = _interopRequireDefault(_Expression2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var logicalOperators = {
    '||': true,
    '&&': true
};

var LogicalExpression = function (_Expression) {
    (0, _inherits3.default)(LogicalExpression, _Expression);


    // TODO: Should respect operator precedence: putting "a + b" before " * b" without parens should raise an error.

    function LogicalExpression(childNodes) {
        (0, _classCallCheck3.default)(this, LogicalExpression);
        return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(LogicalExpression).call(this, 'LogicalExpression', childNodes));
    }

    (0, _createClass3.default)(LogicalExpression, [{
        key: '_acceptChildren',
        value: function _acceptChildren(children) {
            var left = children.passExpression();
            children.skipNonCode();

            var operator = children.passToken('Punctuator', logicalOperators).value;
            children.skipNonCode();

            var right = children.passExpression();
            children.assertEnd();

            this.left = left;
            this.operator = operator;
            this.right = right;
        }
    }]);
    return LogicalExpression;
}(_Expression3.default);

exports.default = LogicalExpression;
//# sourceMappingURL=LogicalExpression.js.map