'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _Expression2 = require('../Expression');

var _Expression3 = _interopRequireDefault(_Expression2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @name types.ArrayExpression
 */

var ArrayExpression = function (_Expression) {
    (0, _inherits3.default)(ArrayExpression, _Expression);

    function ArrayExpression(childNodes) {
        (0, _classCallCheck3.default)(this, ArrayExpression);
        return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(ArrayExpression).call(this, 'ArrayExpression', childNodes));
    }

    (0, _createClass3.default)(ArrayExpression, [{
        key: '_acceptChildren',
        value: function _acceptChildren(children) {
            var elements = [];
            children.passToken('Punctuator', '[');
            children.skipNonCode();
            while (!children.isToken('Punctuator', ']')) {
                if (children.isToken('Punctuator', ',')) {
                    elements.push(null);
                    children.moveNext();
                    children.skipNonCode();
                } else {
                    elements.push(children.passExpressionOrSpreadElement());
                    children.skipNonCode();
                    if (children.isToken('Punctuator', ',')) {
                        children.moveNext();
                        children.skipNonCode();
                    }
                }
            }
            children.passToken('Punctuator', ']');
            children.assertEnd();
            this.elements = elements;
        }
    }]);
    return ArrayExpression;
}(_Expression3.default);

exports.default = ArrayExpression;
//# sourceMappingURL=ArrayExpression.js.map