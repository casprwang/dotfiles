{"version":3,"sources":["../../../src/elements/types/ForStatement.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;IAEqB,Y;;;AACjB,0BAAY,UAAZ,EAAwB;AAAA;AAAA,qHACd,cADc,EACE,UADF;AAEvB;;;;wCAEe,Q,EAAU;AACtB,qBAAS,SAAT,CAAmB,SAAnB,EAA8B,KAA9B;AACA,qBAAS,WAAT;;AAEA,qBAAS,SAAT,CAAmB,YAAnB,EAAiC,GAAjC;AACA,qBAAS,WAAT;;AAEA,gBAAI,OAAO,IAAX;;AAEA,gBAAI,CAAC,SAAS,OAAT,CAAiB,YAAjB,EAA+B,GAA/B,CAAL,EAA0C;AACtC,oBAAI,SAAS,MAAT,CAAgB,qBAAhB,CAAJ,EAA4C;AACxC,2BAAO,SAAS,cAAhB;AACA,6BAAS,QAAT;AACH,iBAHD,MAGO;AACH,2BAAO,SAAS,cAAT,EAAP;AACH;AACD,yBAAS,WAAT;AACH;;AAED,qBAAS,SAAT,CAAmB,YAAnB,EAAiC,GAAjC;AACA,qBAAS,WAAT;;AAEA,gBAAI,OAAO,IAAX;AACA,gBAAI,CAAC,SAAS,OAAT,CAAiB,YAAjB,EAA+B,GAA/B,CAAL,EAA0C;AACtC,uBAAO,SAAS,cAAT,EAAP;AACA,yBAAS,WAAT;AACH;;AAED,qBAAS,SAAT,CAAmB,YAAnB,EAAiC,GAAjC;AACA,qBAAS,WAAT;;AAEA,gBAAI,SAAS,IAAb;AACA,gBAAI,CAAC,SAAS,OAAT,CAAiB,YAAjB,EAA+B,GAA/B,CAAL,EAA0C;AACtC,yBAAS,SAAS,cAAT,EAAT;AACA,yBAAS,WAAT;AACH;;AAED,qBAAS,SAAT,CAAmB,YAAnB,EAAiC,GAAjC;AACA,qBAAS,WAAT;;AAEA,gBAAI,OAAO,SAAS,aAAT,EAAX;;AAEA,qBAAS,SAAT;;AAEA,iBAAK,IAAL,GAAY,IAAZ;AACA,iBAAK,IAAL,GAAY,IAAZ;AACA,iBAAK,MAAL,GAAc,MAAd;AACA,iBAAK,IAAL,GAAY,IAAZ;AACH;;;;;kBArDgB,Y","file":"ForStatement.js","sourcesContent":["import Statement from '../Statement';\n\nexport default class ForStatement extends Statement {\n    constructor(childNodes) {\n        super('ForStatement', childNodes);\n    }\n\n    _acceptChildren(children) {\n        children.passToken('Keyword', 'for');\n        children.skipNonCode();\n\n        children.passToken('Punctuator', '(');\n        children.skipNonCode();\n\n        let init = null;\n\n        if (!children.isToken('Punctuator', ';')) {\n            if (children.isNode('VariableDeclaration')) {\n                init = children.currentElement;\n                children.moveNext();\n            } else {\n                init = children.passExpression();\n            }\n            children.skipNonCode();\n        }\n\n        children.passToken('Punctuator', ';');\n        children.skipNonCode();\n\n        let test = null;\n        if (!children.isToken('Punctuator', ';')) {\n            test = children.passExpression();\n            children.skipNonCode();\n        }\n\n        children.passToken('Punctuator', ';');\n        children.skipNonCode();\n\n        let update = null;\n        if (!children.isToken('Punctuator', ')')) {\n            update = children.passExpression();\n            children.skipNonCode();\n        }\n\n        children.passToken('Punctuator', ')');\n        children.skipNonCode();\n\n        let body = children.passStatement();\n\n        children.assertEnd();\n\n        this.init = init;\n        this.test = test;\n        this.update = update;\n        this.body = body;\n    }\n}\n"]}