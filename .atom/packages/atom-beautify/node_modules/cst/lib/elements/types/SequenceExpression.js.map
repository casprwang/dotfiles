{"version":3,"sources":["../../../src/elements/types/SequenceExpression.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;IAEqB,kB;;;;;;AAIjB,gCAAY,UAAZ,EAAwB;AAAA;AAAA,2HACd,oBADc,EACQ,UADR;AAEvB;;;;wCAEe,Q,EAAU;AACtB,gBAAI,cAAc,EAAlB;;AAEA,wBAAY,IAAZ,CAAiB,SAAS,cAAT,EAAjB;AACA,qBAAS,WAAT;;AAEA,eAAG;AACC,yBAAS,SAAT,CAAmB,YAAnB,EAAiC,GAAjC;AACA,yBAAS,WAAT;AACA,4BAAY,IAAZ,CAAiB,SAAS,cAAT,EAAjB;AACA,yBAAS,WAAT;AACH,aALD,QAKS,CAAC,SAAS,KALnB;;AAOA,qBAAS,SAAT;;AAEA,iBAAK,WAAL,GAAmB,WAAnB;AACH;;;;;kBAxBgB,kB","file":"SequenceExpression.js","sourcesContent":["import Expression from '../Expression';\n\nexport default class SequenceExpression extends Expression {\n\n    // TODO: Should respect operator precedence: putting \"a + b\" before \" * b\" without parens should raise an error.\n\n    constructor(childNodes) {\n        super('SequenceExpression', childNodes);\n    }\n\n    _acceptChildren(children) {\n        let expressions = [];\n\n        expressions.push(children.passExpression());\n        children.skipNonCode();\n\n        do {\n            children.passToken('Punctuator', ',');\n            children.skipNonCode();\n            expressions.push(children.passExpression());\n            children.skipNonCode();\n        } while (!children.isEnd);\n\n        children.assertEnd();\n\n        this.expressions = expressions;\n    }\n}\n"]}