'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _Expression2 = require('../Expression');

var _Expression3 = _interopRequireDefault(_Expression2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var unaryOperators = {
    '-': true,
    '+': true,
    '!': true,
    '~': true,
    'typeof': true,
    'void': true,
    'delete': true
};

var UnaryExpression = function (_Expression) {
    (0, _inherits3.default)(UnaryExpression, _Expression);


    // TODO: Should respect operator precedence: putting "-a" after "b" without parens should raise an error.

    function UnaryExpression(childNodes) {
        (0, _classCallCheck3.default)(this, UnaryExpression);

        var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(UnaryExpression).call(this, 'UnaryExpression', childNodes));

        _this.prefix = true;
        return _this;
    }

    (0, _createClass3.default)(UnaryExpression, [{
        key: '_acceptChildren',
        value: function _acceptChildren(children) {
            if (children.currentElement.type === 'Punctuator' || children.currentElement.type === 'Keyword') {
                children.assertToken(children.currentElement.type, unaryOperators);
            } else {
                children.assertToken('Punctuator');
            }

            var operator = children.passToken().value;
            children.skipNonCode();

            var argument = children.passExpression();

            children.assertEnd();

            this.argument = argument;
            this.operator = operator;
        }
    }]);
    return UnaryExpression;
}(_Expression3.default);

exports.default = UnaryExpression;
//# sourceMappingURL=UnaryExpression.js.map