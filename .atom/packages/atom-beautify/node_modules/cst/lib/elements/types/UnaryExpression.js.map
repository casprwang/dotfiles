{"version":3,"sources":["../../../src/elements/types/UnaryExpression.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAEA,IAAM,iBAAiB;AACnB,SAAK,IADc;AAEnB,SAAK,IAFc;AAGnB,SAAK,IAHc;AAInB,SAAK,IAJc;AAKnB,cAAU,IALS;AAMnB,YAAQ,IANW;AAOnB,cAAU;AAPS,CAAvB;;IAUqB,e;;;;;;AAIjB,6BAAY,UAAZ,EAAwB;AAAA;;AAAA,6HACd,iBADc,EACK,UADL;;AAEpB,cAAK,MAAL,GAAc,IAAd;AAFoB;AAGvB;;;;wCAEe,Q,EAAU;AACtB,gBAAI,SAAS,cAAT,CAAwB,IAAxB,KAAiC,YAAjC,IAAiD,SAAS,cAAT,CAAwB,IAAxB,KAAiC,SAAtF,EAAiG;AAC7F,yBAAS,WAAT,CAAqB,SAAS,cAAT,CAAwB,IAA7C,EAAmD,cAAnD;AACH,aAFD,MAEO;AACH,yBAAS,WAAT,CAAqB,YAArB;AACH;;AAED,gBAAI,WAAW,SAAS,SAAT,GAAqB,KAApC;AACA,qBAAS,WAAT;;AAEA,gBAAI,WAAW,SAAS,cAAT,EAAf;;AAEA,qBAAS,SAAT;;AAEA,iBAAK,QAAL,GAAgB,QAAhB;AACA,iBAAK,QAAL,GAAgB,QAAhB;AACH;;;;;kBAzBgB,e","file":"UnaryExpression.js","sourcesContent":["import Expression from '../Expression';\n\nconst unaryOperators = {\n    '-': true,\n    '+': true,\n    '!': true,\n    '~': true,\n    'typeof': true,\n    'void': true,\n    'delete': true\n};\n\nexport default class UnaryExpression extends Expression {\n\n    // TODO: Should respect operator precedence: putting \"-a\" after \"b\" without parens should raise an error.\n\n    constructor(childNodes) {\n        super('UnaryExpression', childNodes);\n        this.prefix = true;\n    }\n\n    _acceptChildren(children) {\n        if (children.currentElement.type === 'Punctuator' || children.currentElement.type === 'Keyword') {\n            children.assertToken(children.currentElement.type, unaryOperators);\n        } else {\n            children.assertToken('Punctuator');\n        }\n\n        let operator = children.passToken().value;\n        children.skipNonCode();\n\n        let argument = children.passExpression();\n\n        children.assertEnd();\n\n        this.argument = argument;\n        this.operator = operator;\n    }\n}\n"]}