'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _Node2 = require('../Node');

var _Node3 = _interopRequireDefault(_Node2);

var _getFunctionParams = require('./utils/getFunctionParams');

var _getFunctionParams2 = _interopRequireDefault(_getFunctionParams);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getterAndSetter = {
    get: true,
    set: true
};

var ObjectMethod = function (_Node) {
    (0, _inherits3.default)(ObjectMethod, _Node);

    function ObjectMethod(childNodes) {
        (0, _classCallCheck3.default)(this, ObjectMethod);

        var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(ObjectMethod).call(this, 'ObjectMethod', childNodes));

        _this.isFunction = true;
        return _this;
    }

    (0, _createClass3.default)(ObjectMethod, [{
        key: '_acceptChildren',
        value: function _acceptChildren(children) {
            var key = void 0;
            var generator = false;
            var computed = false;
            var kind = 'method';
            var async = false;
            var params = [];
            var body = void 0;
            var method = true;

            if (children.isToken('Punctuator', '*')) {
                children.passToken();
                children.skipNonCode();
                generator = true;
            }

            if (children.isToken('Identifier', 'async')) {
                async = true;
                children.passToken();
                children.skipNonCode();
            }

            if (children.isToken('Identifier', getterAndSetter)) {
                kind = children.currentElement.value;
                method = false;

                children.passToken('Identifier');
                children.skipNonCode();
            }

            computed = children.isToken('Punctuator', '[');
            key = readKey(children);

            children.skipNonCode();

            params = (0, _getFunctionParams2.default)(children);
            children.skipNonCode();

            body = children.passNode('BlockStatement');

            children.assertEnd();

            this.generator = generator;
            this.kind = kind;
            this.key = key;
            this.computed = computed;
            this.method = method;
            this.params = params;
            this.body = body;
            this.async = async;
        }
    }]);
    return ObjectMethod;
}(_Node3.default);

exports.default = ObjectMethod;


function readKey(children) {
    if (children.isNode('StringLiteral') || children.isNode('Identifier')) {
        return children.passNode();
    } else {
        children.passToken('Punctuator', '[');
        children.skipNonCode();
        var result = children.passExpression();
        children.skipNonCode();
        children.passToken('Punctuator', ']');
        return result;
    }
}
//# sourceMappingURL=ObjectMethod.js.map