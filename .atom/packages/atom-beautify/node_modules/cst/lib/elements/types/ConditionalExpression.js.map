{"version":3,"sources":["../../../src/elements/types/ConditionalExpression.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;IAEqB,qB;;;;;;AAIjB,mCAAY,UAAZ,EAAwB;AAAA;AAAA,8HACd,uBADc,EACW,UADX;AAEvB;;;;wCAEe,Q,EAAU;AACtB,gBAAI,OAAO,SAAS,cAAT,EAAX;AACA,qBAAS,WAAT;;AAEA,qBAAS,SAAT,CAAmB,YAAnB,EAAiC,GAAjC;AACA,qBAAS,WAAT;;AAEA,gBAAI,aAAa,SAAS,cAAT,EAAjB;AACA,qBAAS,WAAT;;AAEA,qBAAS,SAAT,CAAmB,YAAnB,EAAiC,GAAjC;AACA,qBAAS,WAAT;;AAEA,gBAAI,YAAY,SAAS,cAAT,EAAhB;AACA,qBAAS,SAAT;;AAEA,iBAAK,IAAL,GAAY,IAAZ;AACA,iBAAK,UAAL,GAAkB,UAAlB;AACA,iBAAK,SAAL,GAAiB,SAAjB;AACH;;;;;kBA3BgB,qB","file":"ConditionalExpression.js","sourcesContent":["import Expression from '../Expression';\n\nexport default class ConditionalExpression extends Expression {\n\n    // TODO: Should respect operator precedence: putting \"a + b\" before \" * b\" without parens should raise an error.\n\n    constructor(childNodes) {\n        super('ConditionalExpression', childNodes);\n    }\n\n    _acceptChildren(children) {\n        let test = children.passExpression();\n        children.skipNonCode();\n\n        children.passToken('Punctuator', '?');\n        children.skipNonCode();\n\n        let consequent = children.passExpression();\n        children.skipNonCode();\n\n        children.passToken('Punctuator', ':');\n        children.skipNonCode();\n\n        let alternate = children.passExpression();\n        children.assertEnd();\n\n        this.test = test;\n        this.consequent = consequent;\n        this.alternate = alternate;\n    }\n}\n"]}