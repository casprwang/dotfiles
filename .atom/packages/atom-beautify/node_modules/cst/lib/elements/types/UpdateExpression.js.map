{"version":3,"sources":["../../../src/elements/types/UpdateExpression.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAEA,IAAM,kBAAkB;AACpB,UAAM,IADc;AAEpB,UAAM;AAFc,CAAxB;;IAKqB,gB;;;;;;AAIjB,8BAAY,UAAZ,EAAwB;AAAA;AAAA,yHACd,kBADc,EACM,UADN;AAEvB;;;;wCAEe,Q,EAAU;AACtB,gBAAI,iBAAJ;AACA,gBAAI,iBAAJ;AACA,gBAAI,eAAJ;;AAEA,gBAAI,SAAS,OAAT,CAAiB,YAAjB,EAA+B,eAA/B,CAAJ,EAAqD;AACjD,2BAAW,SAAS,SAAT,GAAqB,KAAhC;AACA,yBAAS,WAAT;AACA,2BAAW,SAAS,cAAT,EAAX;AACA,yBAAS,IAAT;AACH,aALD,MAKO;AACH,2BAAW,SAAS,cAAT,EAAX;AACA,yBAAS,WAAT;AACA,2BAAW,SAAS,SAAT,GAAqB,KAAhC;AACA,yBAAS,KAAT;AACH;;AAED,qBAAS,SAAT;;AAEA,iBAAK,QAAL,GAAgB,QAAhB;AACA,iBAAK,QAAL,GAAgB,QAAhB;AACA,iBAAK,MAAL,GAAc,MAAd;AACH;;;;;kBA9BgB,gB","file":"UpdateExpression.js","sourcesContent":["import Expression from '../Expression';\n\nconst updateOperators = {\n    '++': true,\n    '--': true\n};\n\nexport default class UpdateExpression extends Expression {\n\n    // TODO: Should respect operator precedence: putting \"++a\" after \"b\" without parens should raise an error.\n\n    constructor(childNodes) {\n        super('UpdateExpression', childNodes);\n    }\n\n    _acceptChildren(children) {\n        let operator;\n        let argument;\n        let prefix;\n\n        if (children.isToken('Punctuator', updateOperators)) {\n            operator = children.passToken().value;\n            children.skipNonCode();\n            argument = children.passAssignable();\n            prefix = true;\n        } else {\n            argument = children.passAssignable();\n            children.skipNonCode();\n            operator = children.passToken().value;\n            prefix = false;\n        }\n\n        children.assertEnd();\n\n        this.argument = argument;\n        this.operator = operator;\n        this.prefix = prefix;\n    }\n}\n"]}