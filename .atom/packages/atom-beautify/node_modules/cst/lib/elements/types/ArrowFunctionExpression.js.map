{"version":3,"sources":["../../../src/elements/types/ArrowFunctionExpression.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;IAEqB,uB;;;AACjB,qCAAY,UAAZ,EAAwB;AAAA;;AAAA,qIACd,yBADc,EACa,UADb;;AAEpB,cAAK,EAAL,GAAU,IAAV;AACA,cAAK,SAAL,GAAiB,KAAjB;AACA,cAAK,UAAL,GAAkB,IAAlB;AAJoB;AAKvB;;;;wCAEe,Q,EAAU;AACtB,gBAAI,SAAS,EAAb;AACA,gBAAI,QAAQ,KAAZ;;AAEA,gBAAI,SAAS,OAAT,CAAiB,YAAjB,EAA+B,OAA/B,CAAJ,EAA6C;AACzC,wBAAQ,IAAR;AACA,yBAAS,SAAT,CAAmB,YAAnB,EAAiC,OAAjC;AACA,yBAAS,WAAT;AACH;;AAED,gBAAI,SAAS,OAAT,CAAiB,YAAjB,EAA+B,GAA/B,CAAJ,EAAyC;AACrC,yBAAS,iCAAkB,QAAlB,CAAT;AACA,yBAAS,WAAT;AACH,aAHD,MAGO,IAAI,SAAS,cAAT,CAAwB,SAA5B,EAAuC;AAC1C,uBAAO,IAAP,CAAY,SAAS,cAArB;AACA,yBAAS,QAAT;AACA,yBAAS,WAAT;AACH;;AAED,qBAAS,SAAT,CAAmB,YAAnB,EAAiC,IAAjC;AACA,qBAAS,WAAT;;AAEA,gBAAI,aAAa,CAAC,SAAS,cAAT,CAAwB,WAA1C;;AAEA,gBAAI,aAAJ;AACA,gBAAI,UAAJ,EAAgB;AACZ,uBAAO,SAAS,cAAT,EAAP;AACH,aAFD,MAEO;AACH,uBAAO,SAAS,aAAT,EAAP;AACH;;AAED,qBAAS,SAAT;;AAEA,iBAAK,KAAL,GAAa,KAAb;AACA,iBAAK,MAAL,GAAc,MAAd;AACA,iBAAK,IAAL,GAAY,IAAZ;AACA,iBAAK,UAAL,GAAkB,UAAlB;AACH;;;;;kBA7CgB,uB","file":"ArrowFunctionExpression.js","sourcesContent":["import Expression from '../Expression';\nimport getFunctionParams from './utils/getFunctionParams';\n\nexport default class ArrowFunctionExpression extends Expression {\n    constructor(childNodes) {\n        super('ArrowFunctionExpression', childNodes);\n        this.id = null;\n        this.generator = false;\n        this.isFunction = true;\n    }\n\n    _acceptChildren(children) {\n        let params = [];\n        let async = false;\n\n        if (children.isToken('Identifier', 'async')) {\n            async = true;\n            children.passToken('Identifier', 'async');\n            children.skipNonCode();\n        }\n\n        if (children.isToken('Punctuator', '(')) {\n            params = getFunctionParams(children);\n            children.skipNonCode();\n        } else if (children.currentElement.isPattern) {\n            params.push(children.currentElement);\n            children.moveNext();\n            children.skipNonCode();\n        }\n\n        children.passToken('Punctuator', '=>');\n        children.skipNonCode();\n\n        let expression = !children.currentElement.isStatement;\n\n        let body;\n        if (expression) {\n            body = children.passExpression();\n        } else {\n            body = children.passStatement();\n        }\n\n        children.assertEnd();\n\n        this.async = async;\n        this.params = params;\n        this.body = body;\n        this.expression = expression;\n    }\n}\n"]}