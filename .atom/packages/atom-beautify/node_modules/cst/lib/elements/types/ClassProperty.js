'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _Node2 = require('../Node');

var _Node3 = _interopRequireDefault(_Node2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ClassProperty = function (_Node) {
    (0, _inherits3.default)(ClassProperty, _Node);

    function ClassProperty(childNodes) {
        (0, _classCallCheck3.default)(this, ClassProperty);
        return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(ClassProperty).call(this, 'ClassProperty', childNodes));
    }

    (0, _createClass3.default)(ClassProperty, [{
        key: '_acceptChildren',
        value: function _acceptChildren(children) {
            this.static = false;
            this.value = null;

            if (children.isToken('Identifier', 'static')) {
                this.static = true;
                children.passToken();
                children.skipNonCode();
            }

            this.key = children.passAssignable();
            children.skipNonCode();

            if (children.isToken('Punctuator', '=')) {
                children.passToken('Punctuator', '=');
                children.skipNonCode();

                this.value = children.passNode();
            }

            children.assertEnd();

            // What is computed Class property?
            // See https://github.com/jeffmo/es-class-fields-and-static-properties/issues/33
            // It seems babylon doesn't support it at this stage
            this.computed = false;
        }
    }]);
    return ClassProperty;
}(_Node3.default);

exports.default = ClassProperty;
//# sourceMappingURL=ClassProperty.js.map