{"version":3,"sources":["../../src/elements/Token.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;AACA;;;;IAEqB,K;;;;;;;;;;;+BAOH,I,EAAc,K,EAAmB;AAC3C,mBAAO,IAAI,KAAJ,CAAU,IAAV,EAAgB,KAAhB,EAAuB,kBAAkB,IAAlB,EAAwB,KAAxB,CAAvB,CAAP;AACH;;;;;;;;;;wCAOsB,K,EAAiE;AACpF,mBAAO,IAAI,KAAJ,CAAU,MAAM,IAAhB,EAAsB,MAAM,KAA5B,EAAmC,MAAM,UAAzC,CAAP;AACH;;;;;;;;;;AAOD,mBAAY,IAAZ,EAA0B,KAA1B,EAAyC,WAAzC,EAA8D;AAAA;;AAAA,mHACpD,IADoD,EAC9C,EAD8C;;AAG1D,YAAI,UAAU,MAAV,KAAqB,CAAzB,EAA4B;AACxB,0BAAc,kBAAkB,IAAlB,EAAwB,KAAxB,CAAd;AACH;;AAED,YAAI,YAAY,KAAhB;AACA,YAAI,eAAe,KAAnB;AACA,YAAI,SAAS,IAAb;AACA,gBAAQ,IAAR;AACI,iBAAK,aAAL;AACI,4BAAY,IAAZ;AACA,yBAAS,KAAT;AACA;AACJ,iBAAK,cAAL;AACI,4BAAY,IAAZ;AACA,yBAAS,KAAT;AACA;AACJ,iBAAK,YAAL;AACI,+BAAe,IAAf;AACA,yBAAS,KAAT;AACA;AACJ,iBAAK,+BAAL;AACA,iBAAK,eAAL;AACA,iBAAK,UAAL;AACI,yBAAS,KAAT;AACA;AAjBR;AAmBA,cAAK,KAAL,GAAa,KAAb;AACA,cAAK,WAAL,GAAmB,WAAnB;AACA,cAAK,iBAAL,GAAyB,YAAY,MAArC;AACA,cAAK,gBAAL,GAAwB,qBAAS,WAAT,CAAxB;AACA,cAAK,OAAL,GAAe,IAAf;AACA,cAAK,SAAL,GAAiB,SAAjB;AACA,cAAK,YAAL,GAAoB,YAApB;AACA,cAAK,MAAL,GAAc,MAAd;AACA,cAAK,cAAL,GAAsB,CAAC,MAAvB;AArC0D;AAsC7D;;;;wCAUiC;AAC9B,mBAAO,IAAP;AACH;;;uCAEgC;AAC7B,mBAAO,IAAP;AACH;;;wCAEuB;AACpB,mBAAO,KAAK,WAAZ;AACH;;;8CAE6B;AAC1B,mBAAO,KAAK,iBAAZ;AACH;;;6CAEmC;AAChC,mBAAO,KAAK,gBAAZ;AACH;;;0CAEyB;AACtB,mBAAO,KAAK,gBAAL,CAAsB,MAAtB,GAA+B,CAAtC;AACH;;;2CAEkB;AACf,mBAAO,wBAAY,KAAK,KAAjB,CAAP;AACH;;;qCAEY,W,EAA+B;AACxC,gBAAI,YAAY,MAAZ,GAAqB,CAAzB,EAA4B;AACxB,sBAAM,IAAI,KAAJ,CAAU,wCAAV,CAAN;AACH;;AAED,iBAAK,aAAL,GAAqB,WAArB;AACH;;;;;;;;;;uCAOqB;AAClB,mBAAO,IAAI,KAAJ,CAAU,KAAK,IAAf,EAAqB,KAAK,KAA1B,EAAiC,KAAK,WAAtC,CAAP;AACH;;;;;kBApHgB,K;;;AAuHrB,SAAS,iBAAT,CAA2B,IAA3B,EAAyC,KAAzC,EAA6D;AACzD,YAAQ,IAAR;AACI,aAAK,aAAL;AACI,mBAAO,OAAO,KAAd;;AAEJ,aAAK,cAAL;AACI,mBAAO,OAAO,KAAP,GAAe,IAAtB;;AAEJ,aAAK,mBAAL;AACI,mBAAO,OAAO,KAAP,CAAP;;AAEJ,aAAK,SAAL;AACA,aAAK,SAAL;AACA,aAAK,MAAL;AACI,mBAAO,OAAO,KAAP,CAAP;;AAEJ;AACI,mBAAO,KAAP;AAhBR;AAkBH","file":"Token.js","sourcesContent":["/* @flow */\n\nimport Element from './Element';\nimport {getLines, getLineInfo} from '../utils/lines';\n\nexport default class Token extends Element {\n    /**\n     * Generic token constructor.\n     *\n     * @param {String} type\n     * @param {*} value\n     */\n    static create(type: string, value: any): Token {\n        return new Token(type, value, valueToSourceCode(type, value));\n    }\n\n    /**\n     * Creates new token using babel/acorn parser token.\n     *\n     * @param {{type: String, value: String, sourceCode: String}} token\n     */\n    static createFromToken(token: {type: string, value: string, sourceCode: string}): Token {\n        return new Token(token.type, token.value, token.sourceCode);\n    }\n\n    /**\n     * @param {String} type\n     * @param {String} value\n     * @param {String} _sourceCode private source code argument\n     */\n    constructor(type: string, value: string, _sourceCode: string) {\n        super(type, []);\n\n        if (arguments.length === 2) {\n            _sourceCode = valueToSourceCode(type, value);\n        }\n\n        let isComment = false;\n        let isWhitespace = false;\n        let isCode = true;\n        switch (type) {\n            case 'CommentLine':\n                isComment = true;\n                isCode = false;\n                break;\n            case 'CommentBlock':\n                isComment = true;\n                isCode = false;\n                break;\n            case 'Whitespace':\n                isWhitespace = true;\n                isCode = false;\n                break;\n            case 'AppleInstrumentationDirective':\n            case 'GritDirective':\n            case 'Hashbang':\n                isCode = false;\n                break;\n        }\n        this.value = value;\n        this._sourceCode = _sourceCode;\n        this._sourceCodeLength = _sourceCode.length;\n        this._sourceCodeLines = getLines(_sourceCode);\n        this.isToken = true;\n        this.isComment = isComment;\n        this.isWhitespace = isWhitespace;\n        this.isCode = isCode;\n        this.isNonCodeToken = !isCode;\n    }\n\n    value: string;\n    _sourceCode: string;\n    _sourceCodeLength: number;\n    _sourceCodeLines: Array<string>;\n    _isComment: boolean;\n    _isWhitespace: boolean;\n    _isCode: boolean;\n\n    getFirstToken(): ?Token | Element {\n        return this;\n    }\n\n    getLastToken(): ?Token | Element {\n        return this;\n    }\n\n    getSourceCode(): string {\n        return this._sourceCode;\n    }\n\n    getSourceCodeLength(): number {\n        return this._sourceCodeLength;\n    }\n\n    getSourceCodeLines(): Array<string> {\n        return this._sourceCodeLines;\n    }\n\n    getNewlineCount(): number {\n        return this._sourceCodeLines.length - 1;\n    }\n\n    getValueLineInfo() {\n        return getLineInfo(this.value);\n    }\n\n    _setChildren(newChildren: Array<any>): void {\n        if (newChildren.length > 0) {\n            throw new Error('Token nodes cannot contain child nodes');\n        }\n\n        this.childElements = newChildren;\n    }\n\n    /**\n     * Clones current Element structure.\n     *\n     * @returns {Element}\n     */\n    cloneElement(): Token {\n        return new Token(this.type, this.value, this._sourceCode);\n    }\n}\n\nfunction valueToSourceCode(type: string, value: any): string {\n    switch (type) {\n        case 'CommentLine':\n            return '//' + value;\n\n        case 'CommentBlock':\n            return '/*' + value + '*/';\n\n        case 'RegularExpression':\n            return String(value);\n\n        case 'Numeric':\n        case 'Boolean':\n        case 'Null':\n            return String(value);\n\n        default:\n            return value;\n    }\n}\n"]}