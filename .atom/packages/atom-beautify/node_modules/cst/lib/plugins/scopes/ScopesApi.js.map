{"version":3,"sources":["../../../src/plugins/scopes/ScopesApi.js"],"names":[],"mappings":"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","file":"ScopesApi.js","sourcesContent":["/* @flow */\nimport type Variable from './Variable';\nimport type Reference from './Reference';\nimport type Definition from './Definition';\nimport type Element from '../../elements/Element';\nimport Token from '../../elements/Token';\nimport Node from '../../elements/Node';\nimport Program from '../../elements/types/Program';\nimport BlockStatement from '../../elements/types/BlockStatement';\nimport Identifier from '../../elements/types/Identifier';\nimport Scope from './Scope';\nimport type {ReferenceInfo, DefinitionInfo, ScopeInfo} from './Scope';\nimport AssignmentPattern from '../../elements/types/AssignmentPattern';\nimport FunctionExpression from '../../elements/types/FunctionExpression';\nimport FunctionDeclaration from '../../elements/types/FunctionDeclaration';\nimport ArrowFunctionExpression from '../../elements/types/ArrowFunctionExpression';\nimport VariableDeclarator from '../../elements/types/VariableDeclarator';\nimport VariableDeclaration from '../../elements/types/VariableDeclaration';\nimport AssignmentExpression from '../../elements/types/AssignmentExpression';\nimport UpdateExpression from '../../elements/types/UpdateExpression';\nimport ForOfStatement from '../../elements/types/ForOfStatement';\nimport ForInStatement from '../../elements/types/ForInStatement';\nimport MemberExpression from '../../elements/types/MemberExpression';\nimport ObjectProperty from '../../elements/types/ObjectProperty';\nimport ObjectMethod from '../../elements/types/ObjectMethod';\nimport ImportDefaultSpecifier from '../../elements/types/ImportDefaultSpecifier';\nimport ImportNamespaceSpecifier from '../../elements/types/ImportNamespaceSpecifier';\nimport ImportSpecifier from '../../elements/types/ImportSpecifier';\nimport ThisExpression from '../../elements/types/ThisExpression';\nimport Super from '../../elements/types/Super';\nimport CatchClause from '../../elements/types/CatchClause';\nimport LabeledStatement from '../../elements/types/LabeledStatement';\nimport BreakStatement from '../../elements/types/BreakStatement';\nimport ContinueStatement from '../../elements/types/ContinueStatement';\nimport ClassExpression from '../../elements/types/ClassExpression';\nimport ClassDeclaration from '../../elements/types/ClassDeclaration';\nimport ClassMethod from '../../elements/types/ClassMethod';\nimport JSXIdentifier from '../../elements/types/JSXIdentifier';\nimport JSXAttribute from '../../elements/types/JSXAttribute';\nimport JSXElement from '../../elements/types/JSXElement';\nimport JSXMemberExpression from '../../elements/types/JSXMemberExpression';\nimport JSXNamespacedName from '../../elements/types/JSXNamespacedName';\nimport {types} from './Definition';\n\nconst scopedBlocks = {\n    'ForStatement': true,\n    'ForInStatement': true,\n    'ForOfStatement': true,\n    'SwitchStatement': true,\n    'CatchClause': true\n};\n\nexport default class ScopesApi {\n    constructor(program: Program) {\n        program.on('elements-add', (elements: Element[]) => {\n            elements.map(this._addElement, this);\n        });\n        program.on('elements-remove', (elements: Element[]) => {\n            elements.map(this._removeElement, this);\n        });\n        this._scopesMap = new Map();\n        this._program = program;\n        this._addElement(program);\n        this.acquire(this._program);\n    }\n\n    _program: Program;\n    _programScope: Scope;\n    _scopesMap: Map<Element, Scope>;\n\n    _addElement(element: Element) {\n        if (element instanceof Node) {\n            let nodes = buildNodeList((element: Node));\n            for (let i = 0; i < nodes.length; i++) {\n                this._addNode(nodes[i]);\n            }\n        }\n        this._updateTokenIfNecessary(element);\n    }\n\n    _removeElement(element: Element) {\n        if (element instanceof Node) {\n            let nodes = buildNodeList((element: Node));\n            for (let i = 0; i < nodes.length; i++) {\n                this._removeNode(nodes[i]);\n            }\n        }\n        this._updateTokenIfNecessary(element);\n    }\n\n    _updateTokenIfNecessary(element: Element) {\n        if (element instanceof Token) {\n            let parentElement = element.parentElement;\n            if (parentElement) {\n                if (element.type === 'Identifier') {\n                    this._removeElement(parentElement);\n                    this._addElement(parentElement);\n                    return;\n                }\n                if (\n                    element.type === 'Punctuator' &&\n                    element.value === ':' &&\n                    parentElement instanceof ObjectProperty\n                ) {\n                    this._removeElement(parentElement);\n                    this._addElement(parentElement);\n                    return;\n                }\n            }\n        }\n    }\n\n    _addNode(node: Node): void {\n        if (node instanceof Program) {\n            return this._addProgram(node);\n        }\n\n        if (node instanceof FunctionExpression) {\n            return this._addFunctionExpression(node);\n        }\n\n        if (node instanceof FunctionDeclaration) {\n            return this._addFunctionDeclaration(node);\n        }\n\n        if (node instanceof ArrowFunctionExpression) {\n            return this._addArrowFunctionExpression(node);\n        }\n\n        if (node instanceof ObjectMethod) {\n            return this._addObjectMethod(node);\n        }\n\n        if (node instanceof ClassDeclaration) {\n            return this._addClassDeclaration(node);\n        }\n\n        if (node instanceof ClassExpression) {\n            return this._addClassExpression(node);\n        }\n\n        if (node instanceof ClassMethod) {\n            return this._addClassMethod(node);\n        }\n\n        if (node.type in scopedBlocks) {\n            return this._addScopedBlock(node);\n        }\n\n        if (node instanceof BlockStatement) {\n            return this._addBlockStatement(node);\n        }\n\n        if (node instanceof ThisExpression) {\n            return this._addThisExpression(node);\n        }\n\n        if (node instanceof Super) {\n            return this._addSuper(node);\n        }\n\n        if (node instanceof Identifier) {\n            return this._addIdentifier(node);\n        }\n\n        if (node instanceof JSXIdentifier) {\n            return this._addJSXIdentifier(node);\n        }\n    }\n\n    _addProgram(node: Program) {\n        this._programScope = this._addScope({\n            node,\n            parentScope: undefined,\n            isFunctionScope: true,\n            isProgramScope: true\n        });\n    }\n\n    _addClassExpression(node: ClassExpression) {\n        this._addScope({\n            node,\n            parentScope: this._getParentScopeFor(node),\n            isClassScope: true\n        });\n    }\n\n    _addClassDeclaration(node: ClassDeclaration) {\n        this._addScope({\n            node,\n            parentScope: this._getParentScopeFor(node),\n            isClassScope: true\n        });\n    }\n\n    _addClassMethod(node: ClassMethod) {\n        this._addScope({\n            node,\n            parentScope: this._getParentScopeFor(node),\n            isFunctionScope: true\n        });\n    }\n\n    _addFunctionExpression(node: FunctionExpression) {\n        this._addScope({\n            node,\n            parentScope: this._getParentScopeFor(node),\n            isFunctionScope: true\n        });\n    }\n\n    _addObjectMethod(node: ObjectMethod) {\n        this._addScope({\n            node,\n            parentScope: this._getParentScopeFor(node),\n            isFunctionScope: true\n        });\n    }\n\n    _addFunctionDeclaration(node: FunctionDeclaration) {\n        this._addScope({\n            node,\n            parentScope: this._getParentScopeFor(node),\n            isFunctionScope: true\n        });\n    }\n\n    _addArrowFunctionExpression(node: ArrowFunctionExpression) {\n        this._addScope({\n            node,\n            parentScope: this._getParentScopeFor(node),\n            isFunctionScope: true,\n            isArrowFunctionScope: true\n        });\n    }\n\n    _addScopedBlock(node: Node) {\n        this._addScope({\n            node,\n            parentScope: this._getParentScopeFor(node)\n        });\n    }\n\n    _addBlockStatement(node: BlockStatement) {\n        let parentElement = node.parentElement;\n        if (\n            parentElement &&\n            (\n                parentElement.type === 'ForStatement' ||\n                parentElement.type === 'ForInStatement' ||\n                parentElement.type === 'ForOfStatement' ||\n                parentElement.type === 'CatchClause' ||\n                parentElement.type === 'ArrowFunctionExpression' ||\n                parentElement.type === 'FunctionExpression' ||\n                parentElement.type === 'FunctionDeclaration'\n            )\n        ) {\n            return;\n        }\n        this._addScope({\n            node,\n            parentScope: this._getScopeFor(parentElement)\n        });\n    }\n\n    _removeBlockStatement(node: BlockStatement) {\n        let parentElement = node.parentElement;\n        if (\n            parentElement &&\n            (\n                parentElement.type === 'ForStatement' ||\n                parentElement.type === 'ForInStatement' ||\n                parentElement.type === 'ForOfStatement' ||\n                parentElement.type === 'CatchClause' ||\n                parentElement.type === 'ArrowFunctionExpression' ||\n                parentElement.type === 'FunctionExpression' ||\n                parentElement.type === 'FunctionDeclaration'\n            )\n        ) {\n            return;\n        }\n\n        let scope = this._scopesMap.get(node);\n        if (scope) {\n            scope.destroy();\n            this._scopesMap.delete(node);\n        }\n    }\n\n    _addJSXIdentifier(node: JSXIdentifier) {\n        let name = node.name;\n        let scope = this._getScopeFor(node);\n        let parentElement = node.parentElement;\n\n        if (!scope || !parentElement) {\n            return;\n        }\n\n        if (parentElement instanceof JSXAttribute) {\n            if (node === parentElement.name) {\n                return;\n            }\n        }\n\n        if (parentElement instanceof JSXMemberExpression) {\n            if (node === parentElement.property) {\n                return;\n            }\n        }\n\n        if (parentElement instanceof JSXNamespacedName) {\n            if (node === parentElement.name) {\n                return;\n            }\n        }\n\n        this._addReferenceToScope(scope, {node, name, read: true, write: false});\n    }\n\n    _addIdentifier(node: Identifier) {\n        let scope = this._getScopeFor(node);\n        let parentElement = node.parentElement;\n\n        if (!scope || !parentElement) {\n            return;\n        }\n\n        let name = node.name;\n        if (parentElement instanceof ObjectProperty && parentElement.parentElement) {\n            if (node === parentElement.key && !parentElement.shorthand) {\n                if (parentElement.computed) {\n                    this._addReferenceToScope(scope, {node, name, read: true, write: false});\n                }\n                return;\n            }\n        }\n        let topLevelPattern = node;\n        while (topLevelPattern.parentElement) {\n            if (topLevelPattern.parentElement instanceof ObjectProperty) {\n                if (topLevelPattern.parentElement.parentElement.isPattern) {\n                    topLevelPattern = topLevelPattern.parentElement.parentElement;\n                    continue;\n                }\n            }\n            if (topLevelPattern.parentElement instanceof AssignmentPattern) {\n                if (topLevelPattern === topLevelPattern.parentElement.right) {\n                    break;\n                }\n            }\n            if (!topLevelPattern.parentElement.isPattern) {\n                break;\n            }\n            topLevelPattern = topLevelPattern.parentElement;\n        }\n\n        let container = topLevelPattern.parentElement;\n        if (!container) {\n            return;\n        }\n\n        if (\n            container instanceof ClassMethod ||\n            container instanceof ObjectMethod ||\n            container instanceof FunctionExpression ||\n            container instanceof FunctionDeclaration ||\n            container instanceof ArrowFunctionExpression\n        ) {\n            if (container.params.indexOf(topLevelPattern) !== -1) {\n                this._addDefinitionToScope(scope, {node, name, type: types.Parameter});\n                if (topLevelPattern instanceof AssignmentPattern) {\n                    this._addReferenceToScope(scope, {node, name, read: false, write: true, type: types.Parameter});\n                }\n                return;\n            }\n        }\n        if (container instanceof VariableDeclarator) {\n            if (container.id === topLevelPattern) {\n                let type = types.Variable;\n                let variableDeclaration = container.parentElement;\n                if (variableDeclaration && variableDeclaration instanceof VariableDeclaration) {\n                    if (variableDeclaration.kind === 'let') {\n                        type = types.LetVariable;\n                    }\n                    if (variableDeclaration.kind === 'const') {\n                        type = types.Constant;\n                    }\n                    this._addDefinitionToScope(scope, {node, name, type});\n                    let write = container.init ||\n                        variableDeclaration.parentElement instanceof ForOfStatement ||\n                        variableDeclaration.parentElement instanceof ForInStatement;\n                    if (write) {\n                        this._addReferenceToScope(scope, {node, name, read: false, write: true, type});\n                    }\n                }\n                return;\n            }\n        }\n        if (container instanceof CatchClause) {\n            if (container.param === topLevelPattern) {\n                this._addDefinitionToScope(scope, {node, name, type: types.CatchClauseError});\n                return;\n            }\n        }\n        if (container instanceof AssignmentExpression) {\n            if (container.left === topLevelPattern) {\n                this._addReferenceToScope(scope, {node, name, read: container.operator !== '=', write: true});\n                return;\n            }\n        }\n        if (container instanceof UpdateExpression) {\n            if (container.argument === topLevelPattern) {\n                this._addReferenceToScope(scope, {node, name, read: true, write: true});\n                return;\n            }\n        }\n        if (container instanceof MemberExpression) {\n            if (node === container.property && !container.computed) {\n                return;\n            }\n        }\n        if (container instanceof ObjectMethod) {\n            if (node === container.key && !container.computed && !container.shorthand) {\n                return;\n            }\n        }\n        if (container instanceof ClassMethod) {\n            if (node === container.key && !container.computed) {\n                return;\n            }\n        }\n        if (container instanceof ImportDefaultSpecifier) {\n            this._addDefinitionToScope(scope, {node, name, type: types.ImportBinding});\n            return;\n        }\n        if (container instanceof ImportNamespaceSpecifier) {\n            this._addDefinitionToScope(scope, {node, name, type: types.ImportBinding});\n            return;\n        }\n        if (container instanceof ImportSpecifier) {\n            if (container.local === node) {\n                this._addDefinitionToScope(scope, {node, name, type: types.ImportBinding});\n            }\n            return;\n        }\n        if (container instanceof ClassExpression) {\n            if (container.id === node) {\n                this._addDefinitionToScope(scope, {node, name, type: types.SelfReference});\n                this._addReferenceToScope(scope, {\n                    node: node,\n                    name: node.name,\n                    read: false,\n                    write: true,\n                    type: types.SelfReference\n                });\n                return;\n            }\n        }\n        if (container instanceof ClassDeclaration) {\n            if (container.id === node) {\n                let parentScope = this._getParentScopeFor(container);\n                if (parentScope) {\n                    this._addDefinitionToScope(parentScope, {node, name, type: types.LetVariable});\n                    this._addReferenceToScope(parentScope, {\n                        node: node,\n                        name: node.name,\n                        read: false,\n                        write: true,\n                        type: types.LetVariable\n                    });\n                    return;\n                }\n            }\n        }\n        if (container instanceof FunctionDeclaration) {\n            if (node === container.id) {\n                let parentScope = this._getParentScopeFor(container);\n                if (parentScope) {\n                    this._addDefinitionToScope(parentScope, {\n                        node: node,\n                        name: node.name,\n                        type: types.LetVariable\n                    });\n                    this._addReferenceToScope(parentScope, {\n                        node: node,\n                        name: node.name,\n                        read: false,\n                        write: true,\n                        type: types.LetVariable\n                    });\n                }\n                return;\n            }\n        }\n        if (container instanceof FunctionExpression) {\n            if (node === container.id) {\n                this._addDefinitionToScope(scope, {\n                    node: node,\n                    name: node.name,\n                    type: types.SelfReference\n                });\n                this._addReferenceToScope(scope, {\n                    node: node,\n                    name: node.name,\n                    read: false,\n                    write: true,\n                    type: types.SelfReference\n                });\n                return;\n            }\n        }\n        if (container instanceof LabeledStatement) {\n            if (node === container.label) {\n                return;\n            }\n        }\n        if (container instanceof BreakStatement || container instanceof ContinueStatement) {\n            return;\n        }\n        this._addReferenceToScope(scope, {node, name, read: true, write: false});\n    }\n\n    _addThisExpression(node: ThisExpression) {\n        let scope = this._getScopeFor(node);\n        if (scope) {\n            this._addReferenceToScope(scope, {node, name: 'this', read: true, write: false});\n        }\n    }\n\n    _addSuper(node: Super) {\n        let scope = this._getScopeFor(node);\n        if (scope) {\n            this._addReferenceToScope(scope, {node, name: 'super', read: true, write: false});\n        }\n    }\n\n    _removeNode(node: Node) {\n        if (\n            node instanceof FunctionExpression ||\n            node instanceof FunctionDeclaration ||\n            node instanceof ArrowFunctionExpression ||\n            node instanceof ClassDeclaration ||\n            node instanceof ClassExpression ||\n            node.type in scopedBlocks\n        ) {\n            let scope = this._scopesMap.get(node);\n            if (scope) {\n                scope.destroy();\n                this._scopesMap.delete(node);\n            }\n        }\n\n        if (node instanceof BlockStatement) {\n            return this._removeBlockStatement(node);\n        }\n\n        if (\n            node instanceof ThisExpression ||\n            node instanceof Super ||\n            node instanceof Identifier ||\n            node instanceof JSXIdentifier\n        ) {\n            let reference = this._programScope._programReferences.get(node);\n            if (reference) {\n                reference.scope._removeReference(reference);\n            }\n            let definition = this._programScope._programDefinitions.get(node);\n            if (definition) {\n                definition.scope._removeDefinition(definition);\n            }\n        }\n    }\n\n    _addReferenceToScope(scope: Scope, referenceInfo: ReferenceInfo) {\n        let reference = this._programScope._programReferences.get(referenceInfo.node);\n        if (!reference) {\n            scope._addReference(referenceInfo);\n        }\n    }\n\n    _addDefinitionToScope(scope: Scope, definitionInfo: DefinitionInfo) {\n        let definition = this._programScope._programDefinitions.get(definitionInfo.node);\n        if (!definition) {\n            scope._addDefinition(definitionInfo);\n        }\n    }\n\n    _addScope(scopeInfo: ScopeInfo): Scope {\n        let scope = this._scopesMap.get(scopeInfo.node);\n        if (!scope) {\n            scope = new Scope(scopeInfo);\n            this._scopesMap.set(scopeInfo.node, scope);\n        }\n        return scope;\n    }\n\n    _getParentScopeFor(element: Element): ?Scope {\n        return this._getScopeFor(element.parentElement);\n    }\n\n    _getScopeFor(element: ?Element): ?Scope {\n        while (element) {\n            let scope = this._scopesMap.get(element);\n            if (scope) {\n                return scope;\n            }\n            element = element.parentElement;\n        }\n        return null;\n    }\n\n    acquire(element: Node): ?Scope {\n        return this._scopesMap.get(element);\n    }\n\n    findReference(node: Node): ?Reference {\n        return this._programScope._programReferences.get(node);\n    }\n\n    findDefinition(node: Node): ?Definition {\n        return this._programScope._programDefinitions.get(node);\n    }\n\n    findVariable(node: Node): ?Variable {\n        let reference = this._programScope._programReferences.get(node);\n        if (reference) {\n            return reference.variable;\n        }\n        let definition = this._programScope._programDefinitions.get(node);\n        if (definition) {\n            return definition.variable;\n        }\n    }\n}\n\nfunction buildNodeList(parentNode: Node): Node[] {\n    let result: Node[] = [parentNode];\n    let nodesToProcess: Node[] = [parentNode];\n    while (nodesToProcess.length > 0) {\n        let node = nodesToProcess.shift();\n        let childElements = node.childElements;\n        for (let i = 0; i < childElements.length; i++) {\n            let element = childElements[i];\n            if (element instanceof Node) {\n                result.push(element);\n                nodesToProcess.push(element);\n            }\n        }\n    }\n    return result;\n}\n"]}