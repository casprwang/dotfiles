{"version":3,"sources":["../src/Traverse.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;IAMqB,Q;AACjB,wBAAc;AAAA;;AACV,aAAK,UAAL,GAAkB,IAAI,kBAAJ,EAAlB;AACA,aAAK,WAAL,GAAmB,IAAI,kBAAJ,EAAnB;AACH;;;;0CAKiB,I,EAA2B;AACzC,mBAAO,KAAK,UAAL,CAAgB,MAAhB,CAAuB,IAAvB,CAAP;AACH;;;2CAEkB,I,EAA4B;AAC3C,mBAAO,KAAK,WAAL,CAAiB,MAAjB,CAAwB,IAAxB,CAAP;AACH;;;mDAE0B,I,EAAc,K,EAA6B;AAClE,gBAAI,SAAS,KAAK,WAAL,CAAiB,MAAjB,CAAwB,IAAxB,CAAb;;AAEA,gBAAI,KAAJ,EAAW;AACP,uBAAO,OAAO,MAAP,CAAc,UAAS,KAAT,EAAgB;AACjC,2BAAO,MAAM,KAAN,KAAgB,KAAvB;AACH,iBAFM,CAAP;AAGH;;AAED,mBAAO,MAAP;AACH;;;oCAEW,Q,EAAgC;AACxC,gBAAI,YAAY,KAAK,UAArB;AACA,gBAAI,aAAa,KAAK,WAAtB;;AAEA,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,SAAS,MAA7B,EAAqC,GAArC,EAA0C;AACtC,+BAAe,SAAS,CAAT,CAAf;AACH;;AAED,qBAAS,cAAT,CAAwB,OAAxB,EAAiC;AAC7B,oBAAI,QAAQ,OAAZ,EAAqB;AACjB,+BAAW,UAAX,CAAsB,OAAtB;AACH,iBAFD,MAEO;AACH,8BAAU,UAAV,CAAqB,OAArB;AACA,wBAAI,QAAQ,QAAQ,UAApB;AACA,2BAAO,KAAP,EAAc;AACV,uCAAe,KAAf;AACA,gCAAQ,MAAM,WAAd;AACH;AACJ;AACJ;AACJ;;;uCAEc,Q,EAAgC;AAC3C,gBAAI,YAAY,KAAK,UAArB;AACA,gBAAI,aAAa,KAAK,WAAtB;;AAEA,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,SAAS,MAA7B,EAAqC,GAArC,EAA0C;AACtC,kCAAkB,SAAS,CAAT,CAAlB;AACH;;AAED,qBAAS,iBAAT,CAA2B,OAA3B,EAAoC;AAChC,oBAAI,QAAQ,OAAZ,EAAqB;AACjB,+BAAW,aAAX,CAAyB,OAAzB;AACH,iBAFD,MAEO;AACH,8BAAU,aAAV,CAAwB,OAAxB;AACA,wBAAI,QAAQ,QAAQ,UAApB;AACA,2BAAO,KAAP,EAAc;AACV,0CAAkB,KAAlB;AACA,gCAAQ,MAAM,WAAd;AACH;AACJ;AACJ;AACJ;;;;;kBAvEgB,Q;;IA0Ef,kB;AACF,kCAAc;AAAA;;AACV,aAAK,MAAL,GAAc,EAAd;AACH;;;;+BAIM,I,EAA0B;AAC7B,gBAAI,QAAQ,KAAK,MAAL,CAAY,IAAZ,CAAZ;AACA,gBAAI,KAAJ,EAAW;AACP,uBAAO,MAAM,MAAN,EAAP;AACH,aAFD,MAEO;AACH,uBAAO,EAAP;AACH;AACJ;;;mCAEU,O,EAAwB;AAC/B,gBAAI,QAAQ,KAAK,MAAL,CAAY,QAAQ,IAApB,CAAZ;AACA,gBAAI,CAAC,KAAL,EAAY;AACR,wBAAQ,KAAK,MAAL,CAAY,QAAQ,IAApB,IAA4B,EAApC;AACH;AACD,kBAAM,MAAM,MAAZ,IAAsB,OAAtB;AACH;;;sCAEa,O,EAAwB;AAClC,gBAAI,QAAQ,KAAK,MAAL,CAAY,QAAQ,IAApB,CAAZ;AACA,kBAAM,MAAN,CAAa,MAAM,OAAN,CAAc,OAAd,CAAb,EAAqC,CAArC;AACH","file":"Traverse.js","sourcesContent":["/* @flow */\n\nimport type Element from './elements/Element';\nimport type Node from './elements/Node';\nimport type Token from './elements/Token';\n\nexport default class Traverse {\n    constructor() {\n        this._nodeIndex = new ElementIndexByType();\n        this._tokenIndex = new ElementIndexByType();\n    }\n\n    _nodeIndex: ElementIndexByType;\n    _tokenIndex: ElementIndexByType;\n\n    selectNodesByType(type: string): Array<Node> {\n        return this._nodeIndex.select(type);\n    }\n\n    selectTokensByType(type: string): Array<Token> {\n        return this._tokenIndex.select(type);\n    }\n\n    selectTokensByTypeAndValue(type: string, value: string): Array<Token> {\n        let tokens = this._tokenIndex.select(type);\n\n        if (value) {\n            return tokens.filter(function(token) {\n                return token.value === value;\n            });\n        }\n\n        return tokens;\n    }\n\n    addElements(elements: Array<Element>): void {\n        let nodeIndex = this._nodeIndex;\n        let tokenIndex = this._tokenIndex;\n\n        for (let i = 0; i < elements.length; i++) {\n            addElementTree(elements[i]);\n        }\n\n        function addElementTree(element) {\n            if (element.isToken) {\n                tokenIndex.addElement(element);\n            } else {\n                nodeIndex.addElement(element);\n                let child = element.firstChild;\n                while (child) {\n                    addElementTree(child);\n                    child = child.nextSibling;\n                }\n            }\n        }\n    }\n\n    removeElements(elements: Array<Element>): void {\n        let nodeIndex = this._nodeIndex;\n        let tokenIndex = this._tokenIndex;\n\n        for (let i = 0; i < elements.length; i++) {\n            removeElementTree(elements[i]);\n        }\n\n        function removeElementTree(element) {\n            if (element.isToken) {\n                tokenIndex.removeElement(element);\n            } else {\n                nodeIndex.removeElement(element);\n                let child = element.firstChild;\n                while (child) {\n                    removeElementTree(child);\n                    child = child.nextSibling;\n                }\n            }\n        }\n    }\n}\n\nclass ElementIndexByType {\n    constructor() {\n        this._index = {};\n    }\n\n    _index: Object;\n\n    select(type: string): Array<any> {\n        let items = this._index[type];\n        if (items) {\n            return items.concat();\n        } else {\n            return [];\n        }\n    }\n\n    addElement(element: Element): void {\n        let items = this._index[element.type];\n        if (!items) {\n            items = this._index[element.type] = [];\n        }\n        items[items.length] = element;\n    }\n\n    removeElement(element: Element): void {\n        let items = this._index[element.type];\n        items.splice(items.indexOf(element), 1);\n    }\n}\n"]}