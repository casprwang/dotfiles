
/* line 1 "ragel/i18n/en_au.js.rl" */
;(function() {


/* line 126 "ragel/i18n/en_au.js.rl" */



/* line 11 "js/lib/gherkin/lexer/en_au.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 19, 37, 38, 39, 41, 43, 
	48, 53, 58, 63, 67, 71, 73, 74, 
	75, 76, 77, 78, 79, 80, 81, 82, 
	83, 84, 85, 86, 87, 88, 89, 91, 
	93, 98, 105, 110, 111, 112, 113, 114, 
	115, 116, 117, 118, 119, 120, 121, 122, 
	123, 124, 125, 126, 127, 143, 145, 147, 
	149, 151, 153, 155, 157, 159, 161, 163, 
	165, 167, 169, 171, 173, 191, 192, 193, 
	194, 195, 196, 197, 198, 199, 200, 201, 
	202, 203, 204, 205, 206, 207, 208, 209, 
	210, 211, 212, 213, 214, 215, 216, 217, 
	218, 219, 220, 221, 222, 223, 224, 225, 
	226, 227, 228, 229, 230, 231, 232, 233, 
	234, 235, 250, 252, 254, 256, 258, 260, 
	262, 264, 266, 268, 270, 272, 274, 276, 
	278, 280, 282, 284, 286, 288, 290, 292, 
	294, 296, 298, 300, 302, 304, 306, 308, 
	310, 312, 314, 316, 318, 320, 322, 324, 
	326, 328, 330, 332, 334, 336, 338, 340, 
	342, 344, 346, 348, 350, 352, 354, 356, 
	358, 360, 362, 364, 366, 368, 370, 372, 
	374, 376, 378, 380, 382, 384, 386, 388, 
	390, 392, 394, 396, 398, 400, 402, 404, 
	406, 408, 410, 412, 414, 416, 418, 420, 
	422, 424, 426, 428, 430, 432, 434, 436, 
	438, 440, 442, 444, 446, 448, 450, 452, 
	454, 456, 458, 460, 462, 464, 466, 468, 
	470, 472, 474, 476, 478, 480, 482, 485, 
	487, 489, 491, 493, 495, 497, 499, 501, 
	503, 505, 506, 507, 508, 509, 510, 511, 
	512, 513, 514, 515, 516, 517, 518, 519, 
	520, 521, 522, 523, 524, 525, 526, 527, 
	528, 529, 530, 531, 532, 533, 534, 535, 
	536, 537, 538, 539, 551, 553, 555, 557, 
	559, 561, 563, 565, 567, 569, 571, 573, 
	575, 577, 579, 581, 583, 585, 587, 589, 
	591, 593, 595, 597, 599, 601, 603, 605, 
	607, 609, 611, 613, 615, 617, 619, 621, 
	623, 625, 627, 629, 631, 633, 635, 637, 
	639, 641, 643, 645, 647, 649, 651, 653, 
	655, 657, 659, 661, 663, 665, 667, 669, 
	671, 673, 675, 677, 679, 681, 683, 685, 
	687, 689, 691, 693, 695, 696, 697, 698, 
	699, 700, 701, 702, 703, 704, 705, 706, 
	707, 708, 709, 710, 711, 712, 713, 727, 
	729, 731, 733, 735, 737, 739, 741, 743, 
	745, 747, 749, 751, 753, 755, 757, 759, 
	761, 763, 765, 767, 769, 771, 773, 775, 
	777, 779, 781, 783, 785, 787, 789, 791, 
	793, 795, 797, 799, 801, 803, 805, 807, 
	809, 811, 813, 815, 817, 819, 821, 823, 
	825, 827, 829, 831, 833, 835, 837, 839, 
	841, 843, 845, 847, 849, 851, 853, 855, 
	857, 859, 861, 863, 865, 867, 869, 871, 
	873, 875, 877, 879, 881, 883, 885, 887, 
	889, 891, 893, 895, 897, 899, 901, 903, 
	905, 907, 909, 911, 913, 915, 917, 919, 
	921, 923, 925, 927, 929, 931, 934, 936, 
	938, 940, 942, 944, 946, 948, 950, 952, 
	954, 955, 956, 957, 958, 959, 960, 961, 
	962, 965, 966, 967, 968, 969, 970, 971, 
	972, 973, 974, 975, 976, 977, 978, 979, 
	980, 981, 982, 983, 984, 985, 986, 987, 
	988, 995, 997, 999, 1001, 1003, 1005, 1007, 
	1009, 1011, 1013, 1015, 1017, 1021, 1027, 1030, 
	1032, 1038, 1056, 1058, 1060, 1062, 1064, 1066, 
	1068, 1070, 1072, 1074, 1076, 1078, 1080, 1082, 
	1084, 1086, 1088, 1090, 1092, 1094, 1096, 1098, 
	1100, 1102, 1104, 1106, 1108, 1110, 1112, 1114, 
	1116, 1118, 1120, 1122, 1124, 1126, 1128, 1130, 
	1132, 1134, 1136, 1138, 1140, 1142, 1144, 1146, 
	1148, 1150, 1152, 1154, 1156, 1158, 1160, 1162, 
	1164, 1166, 1168, 1170, 1172, 1174, 1176, 1178, 
	1180, 1182, 1184, 1186, 1188, 1190, 1192, 1194, 
	1196, 1198, 1200, 1202, 1204, 1206, 1208, 1210, 
	1212, 1214, 1216, 1218, 1220, 1222, 1224, 1226, 
	1228, 1230, 1232, 1234, 1236, 1238, 1240, 1242, 
	1244, 1246, 1248, 1250, 1252, 1254, 1256, 1258, 
	1260, 1262, 1264, 1266, 1268, 1270, 1272, 1274, 
	1277, 1279, 1281, 1283, 1285, 1287, 1289, 1291, 
	1293, 1295, 1297, 1298, 1299
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	66, 70, 73, 80, 82, 84, 89, 124, 
	239, 9, 13, 10, 32, 34, 35, 37, 
	42, 64, 65, 66, 70, 73, 80, 82, 
	84, 89, 124, 9, 13, 34, 34, 10, 
	13, 10, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 9, 13, 10, 32, 9, 13, 10, 
	13, 10, 95, 70, 69, 65, 84, 85, 
	82, 69, 95, 69, 78, 68, 95, 37, 
	32, 10, 13, 10, 13, 13, 32, 64, 
	9, 10, 9, 10, 13, 32, 64, 11, 
	12, 10, 32, 64, 9, 13, 119, 119, 
	119, 44, 32, 108, 111, 111, 107, 32, 
	109, 97, 116, 101, 58, 10, 10, 10, 
	32, 35, 37, 42, 64, 65, 66, 70, 
	73, 80, 82, 84, 89, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, 10, 32, 34, 
	35, 37, 42, 64, 65, 66, 70, 73, 
	80, 82, 84, 89, 124, 9, 13, 117, 
	116, 32, 97, 116, 32, 116, 104, 101, 
	32, 101, 110, 100, 32, 111, 102, 32, 
	116, 104, 101, 32, 100, 97, 121, 32, 
	73, 32, 114, 101, 99, 107, 111, 110, 
	105, 114, 115, 116, 32, 111, 102, 102, 
	58, 10, 10, 10, 32, 35, 37, 42, 
	64, 65, 66, 73, 80, 82, 84, 89, 
	9, 13, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 32, 
	10, 119, 10, 119, 10, 119, 10, 44, 
	10, 32, 10, 108, 10, 111, 10, 111, 
	10, 107, 10, 32, 10, 109, 10, 97, 
	10, 116, 10, 101, 10, 58, 10, 117, 
	10, 116, 10, 32, 10, 97, 10, 116, 
	10, 32, 10, 116, 10, 104, 10, 101, 
	10, 32, 10, 101, 10, 110, 10, 100, 
	10, 32, 10, 111, 10, 102, 10, 32, 
	10, 116, 10, 104, 10, 101, 10, 32, 
	10, 100, 10, 97, 10, 121, 10, 32, 
	10, 73, 10, 32, 10, 114, 10, 101, 
	10, 99, 10, 107, 10, 111, 10, 110, 
	10, 116, 10, 39, 10, 115, 10, 32, 
	10, 106, 10, 117, 10, 115, 10, 116, 
	10, 32, 10, 117, 10, 110, 10, 98, 
	10, 101, 10, 108, 10, 105, 10, 101, 
	10, 118, 10, 97, 10, 98, 10, 108, 
	10, 101, 10, 114, 10, 101, 10, 116, 
	10, 116, 10, 121, 10, 32, 10, 109, 
	10, 117, 10, 99, 10, 104, 10, 101, 
	10, 99, 10, 107, 10, 111, 10, 110, 
	10, 32, 10, 105, 10, 116, 10, 39, 
	10, 115, 10, 32, 10, 108, 10, 105, 
	10, 107, 10, 111, 10, 111, 10, 32, 
	10, 114, 10, 105, 10, 103, 10, 104, 
	10, 116, 10, 39, 101, 10, 107, 10, 
	110, 10, 111, 10, 119, 10, 97, 10, 
	104, 10, 32, 10, 110, 10, 97, 10, 
	104, 116, 39, 115, 32, 106, 117, 115, 
	116, 32, 117, 110, 98, 101, 108, 105, 
	101, 118, 97, 98, 108, 101, 114, 101, 
	116, 116, 121, 32, 109, 117, 99, 104, 
	58, 10, 10, 10, 32, 35, 37, 64, 
	65, 70, 80, 82, 89, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 119, 10, 119, 10, 
	119, 10, 44, 10, 32, 10, 108, 10, 
	111, 10, 111, 10, 107, 10, 32, 10, 
	109, 10, 97, 10, 116, 10, 101, 10, 
	58, 10, 105, 10, 114, 10, 115, 10, 
	116, 10, 32, 10, 111, 10, 102, 10, 
	102, 10, 114, 10, 101, 10, 116, 10, 
	116, 10, 121, 10, 32, 10, 109, 10, 
	117, 10, 99, 10, 104, 10, 101, 10, 
	99, 10, 107, 10, 111, 10, 110, 10, 
	32, 10, 105, 10, 116, 10, 39, 10, 
	115, 10, 32, 10, 108, 10, 105, 10, 
	107, 10, 111, 10, 117, 10, 39, 10, 
	108, 10, 108, 10, 32, 10, 119, 10, 
	97, 10, 110, 10, 110, 10, 97, 101, 
	99, 107, 111, 110, 32, 105, 116, 39, 
	115, 32, 108, 105, 107, 101, 58, 10, 
	10, 10, 32, 35, 37, 42, 64, 65, 
	66, 73, 80, 84, 89, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, 10, 119, 10, 
	119, 10, 119, 10, 44, 10, 32, 10, 
	108, 10, 111, 10, 111, 10, 107, 10, 
	32, 10, 109, 10, 97, 10, 116, 10, 
	101, 10, 58, 10, 117, 10, 116, 10, 
	32, 10, 97, 10, 116, 10, 32, 10, 
	116, 10, 104, 10, 101, 10, 32, 10, 
	101, 10, 110, 10, 100, 10, 32, 10, 
	111, 10, 102, 10, 32, 10, 116, 10, 
	104, 10, 101, 10, 32, 10, 100, 10, 
	97, 10, 121, 10, 32, 10, 73, 10, 
	32, 10, 114, 10, 101, 10, 99, 10, 
	107, 10, 111, 10, 110, 10, 116, 10, 
	39, 10, 115, 10, 32, 10, 106, 10, 
	117, 10, 115, 10, 116, 10, 32, 10, 
	117, 10, 110, 10, 98, 10, 101, 10, 
	108, 10, 105, 10, 101, 10, 118, 10, 
	97, 10, 98, 10, 108, 10, 101, 10, 
	114, 10, 101, 10, 116, 10, 116, 10, 
	121, 10, 32, 10, 109, 10, 117, 10, 
	99, 10, 104, 10, 111, 10, 111, 10, 
	32, 10, 114, 10, 105, 10, 103, 10, 
	104, 10, 116, 10, 39, 101, 10, 107, 
	10, 110, 10, 111, 10, 119, 10, 97, 
	10, 104, 10, 32, 10, 110, 10, 97, 
	10, 104, 111, 111, 32, 114, 105, 103, 
	104, 116, 39, 101, 111, 107, 110, 111, 
	119, 97, 104, 32, 110, 97, 104, 117, 
	39, 108, 108, 32, 119, 97, 110, 110, 
	97, 58, 10, 10, 10, 32, 35, 80, 
	124, 9, 13, 10, 114, 10, 101, 10, 
	116, 10, 116, 10, 121, 10, 32, 10, 
	109, 10, 117, 10, 99, 10, 104, 10, 
	58, 32, 124, 9, 13, 10, 32, 92, 
	124, 9, 13, 10, 92, 124, 10, 92, 
	10, 32, 92, 124, 9, 13, 10, 32, 
	34, 35, 37, 42, 64, 65, 66, 70, 
	73, 80, 82, 84, 89, 124, 9, 13, 
	10, 119, 10, 119, 10, 119, 10, 44, 
	10, 32, 10, 108, 10, 111, 10, 111, 
	10, 107, 10, 32, 10, 109, 10, 97, 
	10, 116, 10, 101, 10, 58, 10, 117, 
	10, 116, 10, 32, 10, 97, 10, 116, 
	10, 32, 10, 116, 10, 104, 10, 101, 
	10, 32, 10, 101, 10, 110, 10, 100, 
	10, 32, 10, 111, 10, 102, 10, 32, 
	10, 116, 10, 104, 10, 101, 10, 32, 
	10, 100, 10, 97, 10, 121, 10, 32, 
	10, 73, 10, 32, 10, 114, 10, 101, 
	10, 99, 10, 107, 10, 111, 10, 110, 
	10, 105, 10, 114, 10, 115, 10, 116, 
	10, 32, 10, 111, 10, 102, 10, 102, 
	10, 116, 10, 39, 10, 115, 10, 32, 
	10, 106, 10, 117, 10, 115, 10, 116, 
	10, 32, 10, 117, 10, 110, 10, 98, 
	10, 101, 10, 108, 10, 105, 10, 101, 
	10, 118, 10, 97, 10, 98, 10, 108, 
	10, 101, 10, 114, 10, 101, 10, 116, 
	10, 116, 10, 121, 10, 32, 10, 109, 
	10, 117, 10, 99, 10, 104, 10, 101, 
	10, 99, 10, 107, 10, 111, 10, 110, 
	10, 32, 10, 105, 10, 116, 10, 39, 
	10, 115, 10, 32, 10, 108, 10, 105, 
	10, 107, 10, 111, 10, 111, 10, 32, 
	10, 114, 10, 105, 10, 103, 10, 104, 
	10, 116, 10, 39, 101, 10, 107, 10, 
	110, 10, 111, 10, 119, 10, 97, 10, 
	104, 10, 32, 10, 110, 10, 97, 10, 
	104, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 17, 16, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 14, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 16, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 13, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 10, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 12, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	3, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	5, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 4, 3, 2, 
	4, 16, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 0, 0, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 19, 37, 39, 41, 44, 47, 
	52, 57, 62, 67, 71, 75, 78, 80, 
	82, 84, 86, 88, 90, 92, 94, 96, 
	98, 100, 102, 104, 106, 108, 110, 113, 
	116, 121, 128, 133, 135, 137, 139, 141, 
	143, 145, 147, 149, 151, 153, 155, 157, 
	159, 161, 163, 165, 167, 183, 186, 189, 
	192, 195, 198, 201, 204, 207, 210, 213, 
	216, 219, 222, 225, 228, 246, 248, 250, 
	252, 254, 256, 258, 260, 262, 264, 266, 
	268, 270, 272, 274, 276, 278, 280, 282, 
	284, 286, 288, 290, 292, 294, 296, 298, 
	300, 302, 304, 306, 308, 310, 312, 314, 
	316, 318, 320, 322, 324, 326, 328, 330, 
	332, 334, 349, 352, 355, 358, 361, 364, 
	367, 370, 373, 376, 379, 382, 385, 388, 
	391, 394, 397, 400, 403, 406, 409, 412, 
	415, 418, 421, 424, 427, 430, 433, 436, 
	439, 442, 445, 448, 451, 454, 457, 460, 
	463, 466, 469, 472, 475, 478, 481, 484, 
	487, 490, 493, 496, 499, 502, 505, 508, 
	511, 514, 517, 520, 523, 526, 529, 532, 
	535, 538, 541, 544, 547, 550, 553, 556, 
	559, 562, 565, 568, 571, 574, 577, 580, 
	583, 586, 589, 592, 595, 598, 601, 604, 
	607, 610, 613, 616, 619, 622, 625, 628, 
	631, 634, 637, 640, 643, 646, 649, 652, 
	655, 658, 661, 664, 667, 670, 673, 676, 
	679, 682, 685, 688, 691, 694, 697, 701, 
	704, 707, 710, 713, 716, 719, 722, 725, 
	728, 731, 733, 735, 737, 739, 741, 743, 
	745, 747, 749, 751, 753, 755, 757, 759, 
	761, 763, 765, 767, 769, 771, 773, 775, 
	777, 779, 781, 783, 785, 787, 789, 791, 
	793, 795, 797, 799, 811, 814, 817, 820, 
	823, 826, 829, 832, 835, 838, 841, 844, 
	847, 850, 853, 856, 859, 862, 865, 868, 
	871, 874, 877, 880, 883, 886, 889, 892, 
	895, 898, 901, 904, 907, 910, 913, 916, 
	919, 922, 925, 928, 931, 934, 937, 940, 
	943, 946, 949, 952, 955, 958, 961, 964, 
	967, 970, 973, 976, 979, 982, 985, 988, 
	991, 994, 997, 1000, 1003, 1006, 1009, 1012, 
	1015, 1018, 1021, 1024, 1027, 1029, 1031, 1033, 
	1035, 1037, 1039, 1041, 1043, 1045, 1047, 1049, 
	1051, 1053, 1055, 1057, 1059, 1061, 1063, 1077, 
	1080, 1083, 1086, 1089, 1092, 1095, 1098, 1101, 
	1104, 1107, 1110, 1113, 1116, 1119, 1122, 1125, 
	1128, 1131, 1134, 1137, 1140, 1143, 1146, 1149, 
	1152, 1155, 1158, 1161, 1164, 1167, 1170, 1173, 
	1176, 1179, 1182, 1185, 1188, 1191, 1194, 1197, 
	1200, 1203, 1206, 1209, 1212, 1215, 1218, 1221, 
	1224, 1227, 1230, 1233, 1236, 1239, 1242, 1245, 
	1248, 1251, 1254, 1257, 1260, 1263, 1266, 1269, 
	1272, 1275, 1278, 1281, 1284, 1287, 1290, 1293, 
	1296, 1299, 1302, 1305, 1308, 1311, 1314, 1317, 
	1320, 1323, 1326, 1329, 1332, 1335, 1338, 1341, 
	1344, 1347, 1350, 1353, 1356, 1359, 1362, 1365, 
	1368, 1371, 1374, 1377, 1380, 1383, 1387, 1390, 
	1393, 1396, 1399, 1402, 1405, 1408, 1411, 1414, 
	1417, 1419, 1421, 1423, 1425, 1427, 1429, 1431, 
	1433, 1437, 1439, 1441, 1443, 1445, 1447, 1449, 
	1451, 1453, 1455, 1457, 1459, 1461, 1463, 1465, 
	1467, 1469, 1471, 1473, 1475, 1477, 1479, 1481, 
	1483, 1490, 1493, 1496, 1499, 1502, 1505, 1508, 
	1511, 1514, 1517, 1520, 1523, 1527, 1533, 1537, 
	1540, 1546, 1564, 1567, 1570, 1573, 1576, 1579, 
	1582, 1585, 1588, 1591, 1594, 1597, 1600, 1603, 
	1606, 1609, 1612, 1615, 1618, 1621, 1624, 1627, 
	1630, 1633, 1636, 1639, 1642, 1645, 1648, 1651, 
	1654, 1657, 1660, 1663, 1666, 1669, 1672, 1675, 
	1678, 1681, 1684, 1687, 1690, 1693, 1696, 1699, 
	1702, 1705, 1708, 1711, 1714, 1717, 1720, 1723, 
	1726, 1729, 1732, 1735, 1738, 1741, 1744, 1747, 
	1750, 1753, 1756, 1759, 1762, 1765, 1768, 1771, 
	1774, 1777, 1780, 1783, 1786, 1789, 1792, 1795, 
	1798, 1801, 1804, 1807, 1810, 1813, 1816, 1819, 
	1822, 1825, 1828, 1831, 1834, 1837, 1840, 1843, 
	1846, 1849, 1852, 1855, 1858, 1861, 1864, 1867, 
	1870, 1873, 1876, 1879, 1882, 1885, 1888, 1891, 
	1895, 1898, 1901, 1904, 1907, 1910, 1913, 1916, 
	1919, 1922, 1925, 1927, 1929
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 1, 0, 2, 1, 3, 4, 5, 
	6, 7, 8, 9, 10, 11, 12, 13, 
	14, 15, 16, 1, 0, 18, 0, 19, 
	0, 21, 22, 20, 24, 25, 23, 28, 
	27, 29, 27, 26, 32, 31, 33, 31, 
	30, 32, 31, 34, 31, 30, 32, 31, 
	35, 31, 30, 37, 36, 36, 0, 2, 
	38, 38, 0, 40, 41, 39, 2, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 55, 0, 56, 0, 58, 59, 
	57, 61, 62, 60, 0, 0, 0, 0, 
	63, 64, 65, 64, 64, 67, 66, 63, 
	2, 68, 7, 68, 0, 69, 0, 70, 
	0, 71, 0, 72, 0, 73, 0, 74, 
	0, 75, 0, 76, 0, 77, 0, 78, 
	0, 79, 0, 80, 0, 81, 0, 82, 
	0, 83, 0, 85, 84, 87, 86, 87, 
	88, 89, 90, 91, 89, 92, 93, 94, 
	95, 96, 97, 98, 99, 88, 86, 87, 
	100, 86, 87, 101, 86, 87, 102, 86, 
	87, 103, 86, 87, 104, 86, 87, 105, 
	86, 87, 106, 86, 87, 107, 86, 87, 
	108, 86, 87, 109, 86, 87, 110, 86, 
	87, 111, 86, 87, 112, 86, 87, 113, 
	86, 87, 114, 86, 116, 115, 117, 118, 
	119, 120, 121, 122, 123, 124, 125, 126, 
	127, 128, 129, 130, 115, 0, 131, 0, 
	132, 0, 133, 0, 134, 0, 135, 0, 
	136, 0, 137, 0, 138, 0, 139, 0, 
	140, 0, 141, 0, 142, 0, 143, 0, 
	144, 0, 145, 0, 146, 0, 147, 0, 
	148, 0, 149, 0, 150, 0, 151, 0, 
	152, 0, 153, 0, 154, 0, 155, 0, 
	156, 0, 157, 0, 158, 0, 159, 0, 
	160, 0, 161, 0, 162, 0, 163, 0, 
	164, 0, 165, 0, 166, 0, 167, 0, 
	168, 0, 169, 0, 170, 0, 171, 0, 
	172, 0, 174, 173, 176, 175, 176, 177, 
	178, 179, 180, 178, 181, 182, 183, 184, 
	185, 186, 187, 177, 175, 176, 188, 175, 
	176, 189, 175, 176, 190, 175, 176, 191, 
	175, 176, 192, 175, 176, 193, 175, 176, 
	194, 175, 176, 195, 175, 176, 196, 175, 
	176, 197, 175, 176, 198, 175, 176, 199, 
	175, 176, 200, 175, 176, 201, 175, 176, 
	202, 175, 176, 203, 175, 176, 204, 175, 
	176, 205, 175, 176, 206, 175, 176, 207, 
	175, 176, 208, 175, 176, 209, 175, 176, 
	210, 175, 176, 211, 175, 176, 212, 175, 
	176, 213, 175, 176, 214, 175, 176, 215, 
	175, 176, 216, 175, 176, 202, 175, 176, 
	217, 175, 176, 218, 175, 176, 219, 175, 
	176, 220, 175, 176, 221, 175, 176, 222, 
	175, 176, 223, 175, 176, 224, 175, 176, 
	225, 175, 176, 226, 175, 176, 227, 175, 
	176, 228, 175, 176, 229, 175, 176, 230, 
	175, 176, 231, 175, 176, 232, 175, 176, 
	233, 175, 176, 234, 175, 176, 235, 175, 
	176, 236, 175, 176, 237, 175, 176, 238, 
	175, 176, 239, 175, 176, 240, 175, 176, 
	241, 175, 176, 242, 175, 176, 243, 175, 
	176, 244, 175, 176, 245, 175, 176, 246, 
	175, 176, 247, 175, 176, 248, 175, 176, 
	249, 175, 176, 250, 175, 176, 251, 175, 
	176, 252, 175, 176, 253, 175, 176, 254, 
	175, 176, 255, 175, 176, 256, 175, 176, 
	257, 175, 176, 258, 175, 176, 259, 175, 
	176, 260, 175, 176, 261, 175, 176, 262, 
	175, 176, 263, 175, 176, 264, 175, 176, 
	265, 175, 176, 266, 175, 176, 267, 175, 
	176, 268, 175, 176, 269, 175, 176, 249, 
	175, 176, 270, 175, 176, 271, 175, 176, 
	272, 175, 176, 273, 175, 176, 274, 175, 
	176, 275, 175, 176, 276, 175, 176, 277, 
	175, 176, 278, 175, 176, 216, 175, 176, 
	279, 175, 176, 280, 175, 176, 281, 175, 
	176, 282, 175, 176, 283, 175, 176, 284, 
	175, 176, 285, 175, 176, 286, 175, 176, 
	287, 175, 176, 288, 175, 176, 289, 175, 
	176, 290, 175, 176, 291, 175, 176, 215, 
	175, 176, 292, 175, 176, 293, 175, 176, 
	294, 175, 176, 295, 175, 176, 296, 175, 
	176, 297, 175, 176, 298, 175, 176, 249, 
	175, 176, 299, 300, 175, 176, 301, 175, 
	176, 302, 175, 176, 303, 175, 176, 249, 
	175, 176, 304, 175, 176, 305, 175, 176, 
	306, 175, 176, 307, 175, 176, 308, 175, 
	176, 249, 175, 309, 0, 310, 0, 311, 
	0, 312, 0, 313, 0, 314, 0, 315, 
	0, 316, 0, 317, 0, 318, 0, 319, 
	0, 320, 0, 321, 0, 322, 0, 323, 
	0, 324, 0, 325, 0, 326, 0, 327, 
	0, 328, 0, 163, 0, 329, 0, 330, 
	0, 331, 0, 332, 0, 333, 0, 334, 
	0, 335, 0, 336, 0, 337, 0, 338, 
	0, 339, 0, 341, 340, 343, 342, 343, 
	344, 345, 346, 345, 347, 348, 349, 350, 
	351, 344, 342, 343, 352, 342, 343, 353, 
	342, 343, 354, 342, 343, 355, 342, 343, 
	356, 342, 343, 357, 342, 343, 358, 342, 
	343, 359, 342, 343, 360, 342, 343, 361, 
	342, 343, 362, 342, 343, 363, 342, 343, 
	364, 342, 343, 365, 342, 343, 366, 342, 
	343, 367, 342, 343, 368, 342, 343, 369, 
	342, 343, 370, 342, 343, 371, 342, 343, 
	372, 342, 343, 373, 342, 343, 374, 342, 
	343, 375, 342, 343, 376, 342, 343, 377, 
	342, 343, 378, 342, 343, 379, 342, 343, 
	380, 342, 343, 381, 342, 343, 382, 342, 
	343, 383, 342, 343, 384, 342, 343, 385, 
	342, 343, 386, 342, 343, 387, 342, 343, 
	379, 342, 343, 388, 342, 343, 389, 342, 
	343, 390, 342, 343, 391, 342, 343, 392, 
	342, 343, 393, 342, 343, 394, 342, 343, 
	395, 342, 343, 396, 342, 343, 379, 342, 
	343, 397, 342, 343, 398, 342, 343, 399, 
	342, 343, 400, 342, 343, 401, 342, 343, 
	402, 342, 343, 403, 342, 343, 404, 342, 
	343, 405, 342, 343, 406, 342, 343, 407, 
	342, 343, 408, 342, 343, 409, 342, 343, 
	378, 342, 343, 410, 342, 343, 411, 342, 
	343, 412, 342, 343, 413, 342, 343, 414, 
	342, 343, 415, 342, 343, 416, 342, 343, 
	417, 342, 343, 418, 342, 343, 419, 342, 
	343, 379, 342, 420, 0, 421, 0, 422, 
	0, 423, 0, 424, 0, 425, 0, 426, 
	0, 427, 0, 428, 0, 429, 0, 430, 
	0, 431, 0, 432, 0, 433, 0, 434, 
	0, 435, 0, 437, 436, 439, 438, 439, 
	440, 441, 442, 443, 441, 444, 445, 446, 
	447, 448, 449, 440, 438, 439, 450, 438, 
	439, 451, 438, 439, 452, 438, 439, 453, 
	438, 439, 454, 438, 439, 455, 438, 439, 
	456, 438, 439, 457, 438, 439, 458, 438, 
	439, 459, 438, 439, 460, 438, 439, 461, 
	438, 439, 462, 438, 439, 463, 438, 439, 
	464, 438, 439, 465, 438, 439, 466, 438, 
	439, 467, 438, 439, 468, 438, 439, 469, 
	438, 439, 470, 438, 439, 471, 438, 439, 
	472, 438, 439, 473, 438, 439, 474, 438, 
	439, 475, 438, 439, 476, 438, 439, 477, 
	438, 439, 478, 438, 439, 464, 438, 439, 
	479, 438, 439, 480, 438, 439, 481, 438, 
	439, 482, 438, 439, 483, 438, 439, 484, 
	438, 439, 485, 438, 439, 486, 438, 439, 
	487, 438, 439, 488, 438, 439, 489, 438, 
	439, 490, 438, 439, 491, 438, 439, 492, 
	438, 439, 493, 438, 439, 494, 438, 439, 
	495, 438, 439, 496, 438, 439, 497, 438, 
	439, 498, 438, 439, 499, 438, 439, 500, 
	438, 439, 501, 438, 439, 502, 438, 439, 
	503, 438, 439, 504, 438, 439, 505, 438, 
	439, 506, 438, 439, 507, 438, 439, 508, 
	438, 439, 509, 438, 439, 510, 438, 439, 
	511, 438, 439, 512, 438, 439, 513, 438, 
	439, 514, 438, 439, 515, 438, 439, 516, 
	438, 439, 517, 438, 439, 518, 438, 439, 
	519, 438, 439, 520, 438, 439, 521, 438, 
	439, 522, 438, 439, 523, 438, 439, 524, 
	438, 439, 525, 438, 439, 526, 438, 439, 
	527, 438, 439, 528, 438, 439, 529, 438, 
	439, 530, 438, 439, 531, 438, 439, 511, 
	438, 439, 532, 438, 439, 533, 438, 439, 
	534, 438, 439, 535, 438, 439, 536, 438, 
	439, 537, 438, 439, 538, 438, 439, 539, 
	438, 439, 540, 438, 439, 478, 438, 439, 
	541, 438, 439, 542, 438, 439, 543, 438, 
	439, 544, 438, 439, 545, 438, 439, 546, 
	438, 439, 547, 438, 439, 511, 438, 439, 
	548, 549, 438, 439, 550, 438, 439, 551, 
	438, 439, 552, 438, 439, 511, 438, 439, 
	553, 438, 439, 554, 438, 439, 555, 438, 
	439, 556, 438, 439, 557, 438, 439, 511, 
	438, 558, 0, 559, 0, 560, 0, 561, 
	0, 562, 0, 563, 0, 564, 0, 163, 
	0, 565, 566, 567, 0, 568, 0, 569, 
	0, 570, 0, 163, 0, 571, 0, 572, 
	0, 573, 0, 574, 0, 575, 0, 163, 
	0, 576, 0, 577, 0, 578, 0, 579, 
	0, 580, 0, 581, 0, 582, 0, 583, 
	0, 584, 0, 585, 0, 586, 0, 588, 
	587, 590, 589, 590, 591, 592, 593, 592, 
	591, 589, 590, 594, 589, 590, 595, 589, 
	590, 596, 589, 590, 597, 589, 590, 598, 
	589, 590, 599, 589, 590, 600, 589, 590, 
	601, 589, 590, 602, 589, 590, 603, 589, 
	590, 604, 589, 605, 606, 605, 0, 609, 
	608, 610, 611, 608, 607, 0, 613, 614, 
	612, 0, 613, 612, 609, 615, 613, 614, 
	615, 612, 609, 616, 617, 618, 619, 620, 
	621, 622, 623, 624, 625, 626, 627, 628, 
	629, 630, 616, 0, 87, 631, 86, 87, 
	632, 86, 87, 633, 86, 87, 634, 86, 
	87, 635, 86, 87, 636, 86, 87, 637, 
	86, 87, 638, 86, 87, 639, 86, 87, 
	640, 86, 87, 641, 86, 87, 642, 86, 
	87, 643, 86, 87, 644, 86, 87, 114, 
	86, 87, 645, 86, 87, 646, 86, 87, 
	647, 86, 87, 648, 86, 87, 649, 86, 
	87, 650, 86, 87, 651, 86, 87, 652, 
	86, 87, 653, 86, 87, 654, 86, 87, 
	655, 86, 87, 656, 86, 87, 657, 86, 
	87, 658, 86, 87, 659, 86, 87, 660, 
	86, 87, 661, 86, 87, 662, 86, 87, 
	663, 86, 87, 664, 86, 87, 665, 86, 
	87, 666, 86, 87, 667, 86, 87, 668, 
	86, 87, 669, 86, 87, 670, 86, 87, 
	671, 86, 87, 672, 86, 87, 673, 86, 
	87, 674, 86, 87, 675, 86, 87, 676, 
	86, 87, 677, 86, 87, 678, 86, 87, 
	679, 86, 87, 680, 86, 87, 681, 86, 
	87, 682, 86, 87, 683, 86, 87, 684, 
	86, 87, 644, 86, 87, 685, 86, 87, 
	686, 86, 87, 687, 86, 87, 688, 86, 
	87, 689, 86, 87, 690, 86, 87, 691, 
	86, 87, 692, 86, 87, 693, 86, 87, 
	694, 86, 87, 695, 86, 87, 696, 86, 
	87, 697, 86, 87, 698, 86, 87, 699, 
	86, 87, 700, 86, 87, 701, 86, 87, 
	702, 86, 87, 703, 86, 87, 704, 86, 
	87, 677, 86, 87, 705, 86, 87, 706, 
	86, 87, 707, 86, 87, 708, 86, 87, 
	709, 86, 87, 710, 86, 87, 711, 86, 
	87, 712, 86, 87, 713, 86, 87, 644, 
	86, 87, 714, 86, 87, 715, 86, 87, 
	716, 86, 87, 717, 86, 87, 718, 86, 
	87, 719, 86, 87, 720, 86, 87, 721, 
	86, 87, 722, 86, 87, 723, 86, 87, 
	724, 86, 87, 725, 86, 87, 726, 86, 
	87, 643, 86, 87, 727, 86, 87, 728, 
	86, 87, 729, 86, 87, 730, 86, 87, 
	731, 86, 87, 732, 86, 87, 733, 86, 
	87, 677, 86, 87, 734, 735, 86, 87, 
	736, 86, 87, 737, 86, 87, 738, 86, 
	87, 677, 86, 87, 739, 86, 87, 740, 
	86, 87, 741, 86, 87, 742, 86, 87, 
	743, 86, 87, 677, 86, 744, 0, 1, 
	0, 745, 0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 69, 102, 241, 262, 348, 480, 488, 
	524, 650, 4, 5, 6, 7, 6, 6, 
	7, 6, 8, 8, 8, 9, 8, 8, 
	8, 9, 10, 11, 12, 2, 12, 13, 
	2, 14, 16, 17, 18, 19, 20, 21, 
	22, 23, 24, 25, 26, 27, 28, 652, 
	30, 31, 2, 14, 31, 2, 14, 33, 
	34, 2, 33, 32, 34, 36, 37, 38, 
	39, 40, 41, 42, 43, 44, 45, 46, 
	47, 48, 49, 50, 51, 52, 51, 52, 
	52, 2, 53, 67, 530, 545, 578, 586, 
	607, 617, 631, 639, 54, 55, 56, 57, 
	58, 59, 60, 61, 62, 63, 64, 65, 
	66, 2, 68, 2, 2, 3, 13, 15, 
	29, 32, 35, 69, 102, 241, 262, 348, 
	480, 488, 524, 70, 71, 72, 73, 74, 
	75, 76, 77, 78, 79, 80, 81, 82, 
	83, 84, 85, 86, 87, 88, 89, 90, 
	91, 92, 93, 94, 95, 96, 97, 98, 
	99, 100, 101, 29, 103, 104, 105, 106, 
	107, 108, 109, 110, 111, 112, 113, 112, 
	113, 113, 2, 114, 128, 129, 144, 177, 
	198, 208, 222, 230, 115, 116, 117, 118, 
	119, 120, 121, 122, 123, 124, 125, 126, 
	127, 2, 68, 130, 131, 132, 133, 134, 
	135, 136, 137, 138, 139, 140, 141, 142, 
	143, 145, 146, 147, 148, 149, 150, 151, 
	152, 153, 154, 155, 156, 157, 158, 159, 
	160, 161, 162, 163, 164, 165, 166, 167, 
	168, 169, 170, 171, 172, 173, 174, 175, 
	176, 128, 178, 179, 180, 181, 182, 183, 
	184, 185, 186, 187, 188, 189, 190, 191, 
	192, 193, 194, 195, 196, 197, 199, 200, 
	201, 202, 203, 204, 205, 206, 207, 209, 
	210, 211, 212, 213, 214, 215, 216, 217, 
	218, 219, 220, 221, 223, 224, 225, 226, 
	227, 228, 229, 231, 235, 232, 233, 234, 
	236, 237, 238, 239, 240, 242, 243, 244, 
	245, 246, 247, 248, 249, 250, 251, 252, 
	253, 254, 255, 256, 257, 258, 259, 260, 
	261, 263, 264, 265, 266, 267, 268, 269, 
	270, 271, 272, 273, 274, 275, 274, 275, 
	275, 2, 276, 290, 305, 313, 323, 337, 
	277, 278, 279, 280, 281, 282, 283, 284, 
	285, 286, 287, 288, 289, 2, 291, 292, 
	293, 294, 295, 296, 297, 298, 299, 300, 
	301, 302, 303, 304, 68, 306, 307, 308, 
	309, 310, 311, 312, 314, 315, 316, 317, 
	318, 319, 320, 321, 322, 324, 325, 326, 
	327, 328, 329, 330, 331, 332, 333, 334, 
	335, 336, 338, 339, 340, 341, 342, 343, 
	344, 345, 346, 347, 349, 350, 351, 352, 
	353, 354, 355, 356, 357, 358, 359, 360, 
	361, 362, 363, 364, 365, 366, 365, 366, 
	366, 2, 367, 381, 382, 397, 430, 451, 
	461, 469, 368, 369, 370, 371, 372, 373, 
	374, 375, 376, 377, 378, 379, 380, 2, 
	68, 383, 384, 385, 386, 387, 388, 389, 
	390, 391, 392, 393, 394, 395, 396, 398, 
	399, 400, 401, 402, 403, 404, 405, 406, 
	407, 408, 409, 410, 411, 412, 413, 414, 
	415, 416, 417, 418, 419, 420, 421, 422, 
	423, 424, 425, 426, 427, 428, 429, 381, 
	431, 432, 433, 434, 435, 436, 437, 438, 
	439, 440, 441, 442, 443, 444, 445, 446, 
	447, 448, 449, 450, 452, 453, 454, 455, 
	456, 457, 458, 459, 460, 462, 463, 464, 
	465, 466, 467, 468, 470, 474, 471, 472, 
	473, 475, 476, 477, 478, 479, 481, 482, 
	483, 484, 485, 486, 487, 489, 493, 499, 
	490, 491, 492, 494, 495, 496, 497, 498, 
	500, 501, 502, 503, 504, 505, 506, 507, 
	508, 509, 510, 511, 512, 511, 512, 512, 
	2, 513, 514, 515, 516, 517, 518, 519, 
	520, 521, 522, 523, 68, 524, 525, 526, 
	528, 529, 527, 525, 526, 527, 525, 528, 
	529, 3, 13, 15, 29, 32, 35, 69, 
	102, 241, 262, 348, 480, 488, 524, 531, 
	532, 533, 534, 535, 536, 537, 538, 539, 
	540, 541, 542, 543, 544, 546, 547, 548, 
	549, 550, 551, 552, 553, 554, 555, 556, 
	557, 558, 559, 560, 561, 562, 563, 564, 
	565, 566, 567, 568, 569, 570, 571, 572, 
	573, 574, 575, 576, 577, 67, 579, 580, 
	581, 582, 583, 584, 585, 587, 588, 589, 
	590, 591, 592, 593, 594, 595, 596, 597, 
	598, 599, 600, 601, 602, 603, 604, 605, 
	606, 608, 609, 610, 611, 612, 613, 614, 
	615, 616, 618, 619, 620, 621, 622, 623, 
	624, 625, 626, 627, 628, 629, 630, 632, 
	633, 634, 635, 636, 637, 638, 640, 644, 
	641, 642, 643, 645, 646, 647, 648, 649, 
	651, 0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	35, 0, 0, 0, 7, 139, 48, 0, 
	102, 9, 5, 45, 134, 45, 0, 33, 
	122, 33, 33, 0, 11, 106, 0, 0, 
	114, 25, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 149, 126, 0, 110, 23, 0, 
	27, 118, 27, 51, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	0, 75, 33, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 17, 17, 31, 130, 60, 57, 31, 
	63, 57, 63, 63, 63, 63, 63, 63, 
	63, 63, 66, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 0, 72, 33, 84, 84, 84, 84, 
	84, 84, 84, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 15, 15, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	0, 69, 33, 84, 84, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 13, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	0, 78, 33, 84, 84, 84, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 19, 
	19, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 0, 
	81, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 21, 0, 0, 37, 
	37, 54, 37, 87, 0, 0, 39, 0, 
	0, 93, 90, 41, 96, 90, 96, 96, 
	96, 96, 96, 96, 96, 96, 99, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 652;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/en_au.js.rl" */

/* line 130 "ragel/i18n/en_au.js.rl" */

/* line 131 "ragel/i18n/en_au.js.rl" */

/* line 132 "ragel/i18n/en_au.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 1111 "js/lib/gherkin/lexer/en_au.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/en_au.js.rl" */
  
/* line 1118 "js/lib/gherkin/lexer/en_au.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/en_au.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/en_au.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/en_au.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/en_au.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/en_au.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/en_au.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/en_au.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/en_au.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/en_au.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/en_au.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/en_au.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/en_au.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/en_au.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/en_au.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/en_au.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/en_au.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/en_au.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/en_au.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/en_au.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/en_au.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/en_au.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/en_au.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/en_au.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/en_au.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1345 "js/lib/gherkin/lexer/en_au.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/en_au.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1384 "js/lib/gherkin/lexer/en_au.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/en_au.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/en_au', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/en_au', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();
