
/* line 1 "ragel/i18n/pl.js.rl" */
;(function() {


/* line 126 "ragel/i18n/pl.js.rl" */



/* line 11 "js/lib/gherkin/lexer/pl.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 23, 45, 46, 47, 49, 51, 
	56, 61, 66, 71, 75, 79, 81, 82, 
	83, 84, 85, 86, 87, 88, 89, 90, 
	91, 92, 93, 94, 95, 96, 97, 99, 
	101, 106, 113, 118, 120, 121, 122, 123, 
	124, 125, 126, 127, 128, 141, 143, 145, 
	147, 149, 151, 153, 155, 157, 159, 161, 
	163, 165, 167, 169, 171, 173, 175, 177, 
	179, 181, 203, 204, 205, 206, 207, 208, 
	209, 210, 211, 212, 213, 215, 216, 217, 
	218, 219, 220, 221, 222, 223, 224, 225, 
	226, 227, 228, 230, 231, 232, 233, 234, 
	235, 236, 237, 238, 239, 240, 241, 242, 
	243, 244, 245, 246, 247, 248, 249, 250, 
	251, 252, 253, 254, 255, 256, 266, 268, 
	270, 272, 274, 276, 278, 280, 282, 284, 
	286, 288, 290, 292, 294, 296, 298, 300, 
	302, 304, 306, 308, 310, 312, 314, 316, 
	318, 320, 322, 324, 326, 328, 330, 332, 
	334, 336, 338, 340, 342, 344, 346, 348, 
	350, 351, 352, 353, 354, 355, 356, 357, 
	358, 359, 360, 361, 381, 383, 385, 387, 
	389, 391, 393, 395, 397, 399, 401, 403, 
	405, 407, 409, 411, 414, 416, 418, 420, 
	422, 424, 426, 428, 430, 432, 434, 436, 
	438, 440, 442, 444, 446, 449, 451, 453, 
	455, 457, 459, 461, 463, 465, 467, 469, 
	471, 473, 475, 477, 479, 481, 483, 485, 
	487, 489, 491, 493, 495, 497, 499, 501, 
	503, 505, 507, 510, 512, 514, 516, 518, 
	520, 522, 524, 526, 528, 530, 532, 534, 
	536, 538, 540, 542, 544, 546, 548, 550, 
	552, 554, 556, 558, 561, 563, 565, 567, 
	569, 571, 573, 575, 577, 579, 581, 583, 
	585, 587, 590, 592, 594, 596, 598, 600, 
	602, 604, 606, 608, 610, 612, 613, 614, 
	615, 616, 617, 618, 619, 620, 621, 622, 
	623, 624, 625, 626, 627, 628, 629, 630, 
	631, 632, 652, 654, 656, 658, 660, 662, 
	664, 666, 668, 670, 672, 674, 676, 678, 
	680, 682, 685, 687, 689, 691, 693, 695, 
	697, 699, 701, 703, 705, 707, 709, 711, 
	713, 715, 717, 720, 722, 724, 726, 728, 
	730, 732, 734, 736, 738, 740, 742, 744, 
	746, 748, 750, 752, 754, 756, 758, 760, 
	762, 764, 766, 768, 770, 772, 774, 776, 
	778, 780, 782, 784, 786, 788, 790, 792, 
	794, 796, 799, 801, 803, 805, 807, 809, 
	811, 813, 815, 817, 819, 821, 823, 825, 
	827, 829, 831, 833, 835, 837, 838, 839, 
	840, 841, 842, 843, 844, 845, 846, 847, 
	848, 849, 850, 852, 853, 854, 855, 856, 
	857, 858, 859, 860, 861, 862, 863, 883, 
	885, 887, 889, 891, 893, 895, 897, 899, 
	901, 903, 905, 907, 909, 911, 913, 916, 
	918, 920, 922, 924, 926, 928, 930, 932, 
	934, 936, 938, 940, 942, 944, 946, 948, 
	951, 953, 955, 957, 959, 961, 963, 965, 
	967, 969, 971, 973, 975, 977, 979, 981, 
	983, 985, 987, 989, 991, 993, 995, 997, 
	999, 1001, 1003, 1005, 1007, 1009, 1012, 1014, 
	1016, 1018, 1020, 1022, 1024, 1026, 1028, 1030, 
	1032, 1034, 1036, 1038, 1040, 1042, 1044, 1046, 
	1048, 1050, 1052, 1054, 1056, 1058, 1060, 1063, 
	1065, 1067, 1069, 1071, 1073, 1075, 1077, 1079, 
	1081, 1083, 1085, 1087, 1089, 1091, 1093, 1095, 
	1097, 1099, 1100, 1101, 1102, 1103, 1107, 1113, 
	1116, 1118, 1124, 1146, 1148, 1150, 1152, 1154, 
	1156, 1158, 1161, 1163, 1165, 1167, 1169, 1171, 
	1173, 1175, 1177, 1179, 1181, 1183, 1185, 1187, 
	1189, 1191, 1193, 1195, 1197, 1199, 1201, 1203, 
	1205, 1207, 1210, 1212, 1214, 1216, 1218, 1220, 
	1222, 1224, 1226, 1228, 1230, 1232, 1234, 1236, 
	1238, 1240, 1242, 1244, 1246, 1248, 1250, 1252, 
	1254, 1256, 1258, 1260, 1262, 1264, 1266, 1268, 
	1270, 1272, 1274, 1276, 1278, 1280, 1282, 1284, 
	1286, 1288, 1290, 1292, 1294, 1296, 1298, 1300, 
	1302, 1303, 1304
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	70, 71, 73, 74, 75, 77, 79, 80, 
	83, 87, 90, 124, 239, 9, 13, 10, 
	32, 34, 35, 37, 42, 64, 65, 70, 
	71, 73, 74, 75, 77, 79, 80, 83, 
	87, 90, 124, 9, 13, 34, 34, 10, 
	13, 10, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 9, 13, 10, 32, 9, 13, 10, 
	13, 10, 95, 70, 69, 65, 84, 85, 
	82, 69, 95, 69, 78, 68, 95, 37, 
	32, 10, 13, 10, 13, 13, 32, 64, 
	9, 10, 9, 10, 13, 32, 64, 11, 
	12, 10, 32, 64, 9, 13, 108, 115, 
	101, 112, 101, 107, 116, 58, 10, 10, 
	10, 32, 35, 37, 64, 65, 70, 80, 
	83, 87, 90, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 115, 10, 112, 10, 101, 10, 
	107, 10, 116, 10, 58, 10, 32, 34, 
	35, 37, 42, 64, 65, 70, 71, 73, 
	74, 75, 77, 79, 80, 83, 87, 90, 
	124, 9, 13, 117, 110, 107, 99, 106, 
	97, 100, 121, 101, -59, -101, -68, 108, 
	105, 101, 105, 101, 97, 106, -60, -123, 
	99, 114, 97, 122, 111, 114, 116, 114, 
	122, 101, 98, 97, 32, 98, 105, 122, 
	110, 101, 115, 111, 119, 122, 121, 107, 
	-59, -126, 97, 100, 121, 58, 10, 10, 
	10, 32, 35, 65, 70, 80, 87, 124, 
	9, 13, 10, 115, 10, 112, 10, 101, 
	10, 107, 10, 116, 10, 58, 10, 117, 
	10, 110, 10, 107, 10, 99, 10, 106, 
	10, 97, 10, 111, 10, 116, 10, 114, 
	10, 122, 10, 101, 10, 98, 10, 97, 
	10, 32, 10, 98, 10, 105, 10, 122, 
	10, 110, 10, 101, 10, 115, 10, 111, 
	10, 119, -59, 10, -126, 10, 10, 97, 
	-59, 10, -101, 10, 10, 99, 10, 105, 
	10, 119, 10, 111, -59, 10, -101, 10, 
	-60, 10, -121, 10, 99, 122, 101, 110, 
	97, 114, 105, 117, 115, 122, 58, 10, 
	10, 10, 32, 35, 37, 42, 64, 65, 
	70, 71, 73, 74, 75, 77, 79, 80, 
	83, 87, 90, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 32, 10, 108, 115, 10, 101, 
	10, 112, 10, 101, 10, 107, 10, 116, 
	10, 58, 10, 117, 10, 110, 10, 107, 
	10, 99, 10, 106, 10, 97, 10, 100, 
	10, 121, 10, 101, -59, 10, -101, -68, 
	10, 10, 108, 10, 105, 10, 101, 10, 
	105, 10, 101, 10, 97, 10, 106, -60, 
	10, -123, 10, 10, 99, 10, 114, 10, 
	97, 10, 122, 10, 111, 10, 116, 10, 
	114, 10, 122, 10, 101, 10, 98, 10, 
	97, 10, 32, 10, 98, 10, 105, 10, 
	122, 10, 110, 10, 101, 10, 115, 10, 
	111, 10, 119, 10, 99, 122, 10, 101, 
	10, 110, 10, 97, 10, 114, 10, 105, 
	10, 117, 10, 115, 10, 122, 10, 97, 
	10, 98, 10, 108, 10, 111, 10, 110, 
	10, 32, 10, 115, 10, 99, 10, 101, 
	10, 110, 10, 97, 10, 114, 10, 105, 
	10, 117, 10, 115, 10, 122, -59, 10, 
	116, -126, 10, 10, 97, -59, 10, -101, 
	10, 10, 99, 10, 105, 10, 119, 10, 
	111, -59, 10, -101, 10, -60, 10, -121, 
	10, 10, 97, -59, 10, 107, -126, 10, 
	10, 111, -59, 10, -68, 10, 10, 101, 
	10, 110, 10, 105, -59, 10, -126, 10, 
	10, 97, 10, 100, 97, 98, 108, 111, 
	110, 32, 115, 99, 101, 110, 97, 114, 
	105, 117, 115, 122, 97, 58, 10, 10, 
	10, 32, 35, 37, 42, 64, 65, 70, 
	71, 73, 74, 75, 77, 79, 80, 83, 
	87, 90, 9, 13, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 32, 10, 108, 115, 10, 101, 10, 
	112, 10, 101, 10, 107, 10, 116, 10, 
	58, 10, 117, 10, 110, 10, 107, 10, 
	99, 10, 106, 10, 97, 10, 100, 10, 
	121, 10, 101, -59, 10, -101, -68, 10, 
	10, 108, 10, 105, 10, 101, 10, 105, 
	10, 101, 10, 97, 10, 106, -60, 10, 
	-123, 10, 10, 99, 10, 114, 10, 97, 
	10, 122, 10, 111, 10, 116, 10, 114, 
	10, 122, 10, 101, 10, 98, 10, 97, 
	10, 32, 10, 98, 10, 105, 10, 122, 
	10, 110, 10, 101, 10, 115, 10, 111, 
	10, 119, 10, 99, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 117, 
	10, 115, 10, 122, -59, 10, 116, -126, 
	10, 10, 97, -59, 10, -101, 10, 10, 
	99, 10, 105, 10, 119, 10, 111, -59, 
	10, -101, 10, -60, 10, -121, 10, 10, 
	97, 10, 107, -59, 10, -126, 10, 10, 
	97, 10, 100, -59, 116, -126, 97, -59, 
	-101, 99, 105, 119, 111, -59, -101, -60, 
	-121, 97, -59, 107, -126, 111, -59, -68, 
	101, 110, 105, 97, 58, 10, 10, 10, 
	32, 35, 37, 42, 64, 65, 70, 71, 
	73, 74, 75, 77, 79, 80, 83, 87, 
	90, 9, 13, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	32, 10, 108, 115, 10, 101, 10, 112, 
	10, 101, 10, 107, 10, 116, 10, 58, 
	10, 117, 10, 110, 10, 107, 10, 99, 
	10, 106, 10, 97, 10, 100, 10, 121, 
	10, 101, -59, 10, -101, -68, 10, 10, 
	108, 10, 105, 10, 101, 10, 105, 10, 
	101, 10, 97, 10, 106, -60, 10, -123, 
	10, 10, 99, 10, 114, 10, 97, 10, 
	122, 10, 111, 10, 116, 10, 114, 10, 
	122, 10, 101, 10, 98, 10, 97, 10, 
	32, 10, 98, 10, 105, 10, 122, 10, 
	110, 10, 101, 10, 115, 10, 111, 10, 
	119, 10, 99, 122, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 117, 
	10, 115, 10, 122, 10, 97, 10, 98, 
	10, 108, 10, 111, 10, 110, 10, 32, 
	10, 115, 10, 99, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 117, 
	10, 115, 10, 122, -59, 10, 116, -126, 
	10, 10, 97, -59, 10, -101, 10, 10, 
	99, 10, 105, 10, 119, 10, 111, -59, 
	10, -101, 10, -60, 10, -121, 10, 10, 
	97, 10, 107, -59, 10, -126, 10, 10, 
	97, 10, 100, -59, -126, 97, 100, 32, 
	124, 9, 13, 10, 32, 92, 124, 9, 
	13, 10, 92, 124, 10, 92, 10, 32, 
	92, 124, 9, 13, 10, 32, 34, 35, 
	37, 42, 64, 65, 70, 71, 73, 74, 
	75, 77, 79, 80, 83, 87, 90, 124, 
	9, 13, 10, 117, 10, 110, 10, 107, 
	10, 99, 10, 106, 10, 97, 10, 111, 
	114, 10, 116, 10, 114, 10, 122, 10, 
	101, 10, 98, 10, 97, 10, 32, 10, 
	98, 10, 105, 10, 122, 10, 110, 10, 
	101, 10, 115, 10, 111, 10, 119, 10, 
	122, 10, 121, 10, 107, -59, 10, -126, 
	10, 10, 97, 10, 100, 10, 121, 10, 
	99, 122, 10, 101, 10, 110, 10, 97, 
	10, 114, 10, 105, 10, 117, 10, 115, 
	10, 122, 10, 97, 10, 98, 10, 108, 
	10, 111, 10, 110, 10, 32, 10, 115, 
	10, 99, 10, 101, 10, 110, 10, 97, 
	10, 114, 10, 105, 10, 117, 10, 115, 
	10, 122, -59, 10, -126, 10, 10, 97, 
	-59, 10, -101, 10, 10, 99, 10, 105, 
	10, 119, 10, 111, -59, 10, -101, 10, 
	-60, 10, -121, 10, 10, 97, -59, 10, 
	-126, 10, 10, 111, -59, 10, -68, 10, 
	10, 101, 10, 110, 10, 105, 187, 191, 
	0
];

var _lexer_single_lengths = [
	0, 21, 20, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 11, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 20, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 8, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 18, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 18, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 18, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 2, 4, 3, 
	2, 4, 20, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 23, 45, 47, 49, 52, 55, 
	60, 65, 70, 75, 79, 83, 86, 88, 
	90, 92, 94, 96, 98, 100, 102, 104, 
	106, 108, 110, 112, 114, 116, 118, 121, 
	124, 129, 136, 141, 144, 146, 148, 150, 
	152, 154, 156, 158, 160, 173, 176, 179, 
	182, 185, 188, 191, 194, 197, 200, 203, 
	206, 209, 212, 215, 218, 221, 224, 227, 
	230, 233, 255, 257, 259, 261, 263, 265, 
	267, 269, 271, 273, 275, 278, 280, 282, 
	284, 286, 288, 290, 292, 294, 296, 298, 
	300, 302, 304, 307, 309, 311, 313, 315, 
	317, 319, 321, 323, 325, 327, 329, 331, 
	333, 335, 337, 339, 341, 343, 345, 347, 
	349, 351, 353, 355, 357, 359, 369, 372, 
	375, 378, 381, 384, 387, 390, 393, 396, 
	399, 402, 405, 408, 411, 414, 417, 420, 
	423, 426, 429, 432, 435, 438, 441, 444, 
	447, 450, 453, 456, 459, 462, 465, 468, 
	471, 474, 477, 480, 483, 486, 489, 492, 
	495, 497, 499, 501, 503, 505, 507, 509, 
	511, 513, 515, 517, 537, 540, 543, 546, 
	549, 552, 555, 558, 561, 564, 567, 570, 
	573, 576, 579, 582, 586, 589, 592, 595, 
	598, 601, 604, 607, 610, 613, 616, 619, 
	622, 625, 628, 631, 634, 638, 641, 644, 
	647, 650, 653, 656, 659, 662, 665, 668, 
	671, 674, 677, 680, 683, 686, 689, 692, 
	695, 698, 701, 704, 707, 710, 713, 716, 
	719, 722, 725, 729, 732, 735, 738, 741, 
	744, 747, 750, 753, 756, 759, 762, 765, 
	768, 771, 774, 777, 780, 783, 786, 789, 
	792, 795, 798, 801, 805, 808, 811, 814, 
	817, 820, 823, 826, 829, 832, 835, 838, 
	841, 844, 848, 851, 854, 857, 860, 863, 
	866, 869, 872, 875, 878, 881, 883, 885, 
	887, 889, 891, 893, 895, 897, 899, 901, 
	903, 905, 907, 909, 911, 913, 915, 917, 
	919, 921, 941, 944, 947, 950, 953, 956, 
	959, 962, 965, 968, 971, 974, 977, 980, 
	983, 986, 990, 993, 996, 999, 1002, 1005, 
	1008, 1011, 1014, 1017, 1020, 1023, 1026, 1029, 
	1032, 1035, 1038, 1042, 1045, 1048, 1051, 1054, 
	1057, 1060, 1063, 1066, 1069, 1072, 1075, 1078, 
	1081, 1084, 1087, 1090, 1093, 1096, 1099, 1102, 
	1105, 1108, 1111, 1114, 1117, 1120, 1123, 1126, 
	1129, 1132, 1135, 1138, 1141, 1144, 1147, 1150, 
	1153, 1156, 1160, 1163, 1166, 1169, 1172, 1175, 
	1178, 1181, 1184, 1187, 1190, 1193, 1196, 1199, 
	1202, 1205, 1208, 1211, 1214, 1217, 1219, 1221, 
	1223, 1225, 1227, 1229, 1231, 1233, 1235, 1237, 
	1239, 1241, 1243, 1246, 1248, 1250, 1252, 1254, 
	1256, 1258, 1260, 1262, 1264, 1266, 1268, 1288, 
	1291, 1294, 1297, 1300, 1303, 1306, 1309, 1312, 
	1315, 1318, 1321, 1324, 1327, 1330, 1333, 1337, 
	1340, 1343, 1346, 1349, 1352, 1355, 1358, 1361, 
	1364, 1367, 1370, 1373, 1376, 1379, 1382, 1385, 
	1389, 1392, 1395, 1398, 1401, 1404, 1407, 1410, 
	1413, 1416, 1419, 1422, 1425, 1428, 1431, 1434, 
	1437, 1440, 1443, 1446, 1449, 1452, 1455, 1458, 
	1461, 1464, 1467, 1470, 1473, 1476, 1480, 1483, 
	1486, 1489, 1492, 1495, 1498, 1501, 1504, 1507, 
	1510, 1513, 1516, 1519, 1522, 1525, 1528, 1531, 
	1534, 1537, 1540, 1543, 1546, 1549, 1552, 1556, 
	1559, 1562, 1565, 1568, 1571, 1574, 1577, 1580, 
	1583, 1586, 1589, 1592, 1595, 1598, 1601, 1604, 
	1607, 1610, 1612, 1614, 1616, 1618, 1622, 1628, 
	1632, 1635, 1641, 1663, 1666, 1669, 1672, 1675, 
	1678, 1681, 1685, 1688, 1691, 1694, 1697, 1700, 
	1703, 1706, 1709, 1712, 1715, 1718, 1721, 1724, 
	1727, 1730, 1733, 1736, 1739, 1742, 1745, 1748, 
	1751, 1754, 1758, 1761, 1764, 1767, 1770, 1773, 
	1776, 1779, 1782, 1785, 1788, 1791, 1794, 1797, 
	1800, 1803, 1806, 1809, 1812, 1815, 1818, 1821, 
	1824, 1827, 1830, 1833, 1836, 1839, 1842, 1845, 
	1848, 1851, 1854, 1857, 1860, 1863, 1866, 1869, 
	1872, 1875, 1878, 1881, 1884, 1887, 1890, 1893, 
	1896, 1898, 1900
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 6, 11, 12, 13, 14, 15, 
	16, 17, 18, 19, 20, 1, 0, 2, 
	1, 3, 4, 5, 6, 7, 8, 9, 
	10, 6, 11, 12, 13, 14, 15, 16, 
	17, 18, 19, 1, 0, 21, 0, 22, 
	0, 24, 25, 23, 27, 28, 26, 31, 
	30, 32, 30, 29, 35, 34, 36, 34, 
	33, 35, 34, 37, 34, 33, 35, 34, 
	38, 34, 33, 40, 39, 39, 0, 2, 
	41, 41, 0, 43, 44, 42, 2, 0, 
	45, 0, 46, 0, 47, 0, 48, 0, 
	49, 0, 50, 0, 51, 0, 52, 0, 
	53, 0, 54, 0, 55, 0, 56, 0, 
	57, 0, 58, 0, 59, 0, 61, 62, 
	60, 64, 65, 63, 0, 0, 0, 0, 
	66, 67, 68, 67, 67, 70, 69, 66, 
	2, 71, 7, 71, 0, 72, 73, 0, 
	74, 0, 75, 0, 76, 0, 77, 0, 
	78, 0, 79, 0, 81, 80, 83, 82, 
	83, 84, 85, 86, 85, 87, 88, 89, 
	90, 91, 92, 84, 82, 83, 93, 82, 
	83, 94, 82, 83, 95, 82, 83, 96, 
	82, 83, 97, 82, 83, 98, 82, 83, 
	99, 82, 83, 100, 82, 83, 101, 82, 
	83, 102, 82, 83, 103, 82, 83, 104, 
	82, 83, 105, 82, 83, 106, 82, 83, 
	107, 82, 83, 108, 82, 83, 109, 82, 
	83, 110, 82, 83, 111, 82, 83, 112, 
	82, 114, 113, 115, 116, 117, 118, 119, 
	120, 121, 122, 118, 123, 124, 125, 126, 
	127, 128, 129, 130, 131, 113, 0, 132, 
	0, 133, 0, 134, 0, 135, 0, 136, 
	0, 78, 0, 137, 0, 74, 0, 138, 
	0, 139, 0, 140, 141, 0, 142, 0, 
	74, 0, 140, 0, 143, 0, 144, 0, 
	145, 0, 146, 0, 147, 0, 148, 0, 
	74, 0, 149, 0, 150, 0, 74, 0, 
	151, 152, 0, 153, 0, 154, 0, 155, 
	0, 156, 0, 157, 0, 158, 0, 159, 
	0, 160, 0, 161, 0, 162, 0, 163, 
	0, 164, 0, 165, 0, 166, 0, 136, 
	0, 167, 0, 168, 0, 169, 0, 170, 
	0, 171, 0, 172, 0, 173, 0, 174, 
	0, 175, 0, 177, 176, 179, 178, 179, 
	180, 181, 182, 183, 184, 185, 181, 180, 
	178, 179, 186, 178, 179, 187, 178, 179, 
	188, 178, 179, 189, 178, 179, 190, 178, 
	179, 191, 178, 179, 192, 178, 179, 193, 
	178, 179, 194, 178, 179, 195, 178, 179, 
	196, 178, 179, 190, 178, 179, 197, 178, 
	179, 198, 178, 179, 199, 178, 179, 200, 
	178, 179, 201, 178, 179, 202, 178, 179, 
	203, 178, 179, 204, 178, 179, 205, 178, 
	179, 206, 178, 179, 207, 178, 179, 208, 
	178, 179, 209, 178, 179, 210, 178, 179, 
	211, 178, 179, 196, 178, 212, 179, 178, 
	213, 179, 178, 179, 214, 178, 215, 179, 
	178, 216, 179, 178, 179, 217, 178, 179, 
	218, 178, 179, 219, 178, 179, 220, 178, 
	221, 179, 178, 222, 179, 178, 223, 179, 
	178, 190, 179, 178, 224, 225, 0, 226, 
	0, 227, 0, 228, 0, 229, 0, 230, 
	0, 231, 0, 232, 0, 233, 0, 234, 
	0, 236, 235, 238, 237, 238, 239, 240, 
	241, 242, 240, 243, 244, 245, 242, 246, 
	247, 248, 249, 250, 251, 252, 253, 239, 
	237, 238, 254, 237, 238, 255, 237, 238, 
	256, 237, 238, 257, 237, 238, 258, 237, 
	238, 259, 237, 238, 260, 237, 238, 261, 
	237, 238, 262, 237, 238, 263, 237, 238, 
	264, 237, 238, 265, 237, 238, 266, 237, 
	238, 267, 237, 238, 268, 237, 238, 269, 
	270, 237, 238, 271, 237, 238, 272, 237, 
	238, 273, 237, 238, 274, 237, 238, 275, 
	237, 238, 268, 237, 238, 276, 237, 238, 
	277, 237, 238, 278, 237, 238, 279, 237, 
	238, 280, 237, 238, 275, 237, 238, 281, 
	237, 238, 271, 237, 238, 282, 237, 283, 
	238, 237, 284, 285, 238, 237, 238, 286, 
	237, 238, 271, 237, 238, 284, 237, 238, 
	287, 237, 238, 288, 237, 238, 289, 237, 
	238, 290, 237, 291, 238, 237, 292, 238, 
	237, 238, 271, 237, 238, 293, 237, 238, 
	294, 237, 238, 271, 237, 238, 295, 237, 
	238, 296, 237, 238, 297, 237, 238, 298, 
	237, 238, 299, 237, 238, 300, 237, 238, 
	301, 237, 238, 302, 237, 238, 303, 237, 
	238, 304, 237, 238, 305, 237, 238, 306, 
	237, 238, 307, 237, 238, 308, 237, 238, 
	309, 237, 238, 280, 237, 238, 310, 311, 
	237, 238, 312, 237, 238, 313, 237, 238, 
	314, 237, 238, 315, 237, 238, 316, 237, 
	238, 317, 237, 238, 318, 237, 238, 275, 
	237, 238, 319, 237, 238, 320, 237, 238, 
	321, 237, 238, 322, 237, 238, 323, 237, 
	238, 324, 237, 238, 325, 237, 238, 326, 
	237, 238, 327, 237, 238, 328, 237, 238, 
	329, 237, 238, 330, 237, 238, 331, 237, 
	238, 332, 237, 238, 333, 237, 238, 280, 
	237, 334, 238, 287, 237, 335, 238, 237, 
	238, 336, 237, 337, 238, 237, 338, 238, 
	237, 238, 339, 237, 238, 340, 237, 238, 
	341, 237, 238, 342, 237, 343, 238, 237, 
	344, 238, 237, 345, 238, 237, 275, 238, 
	237, 238, 346, 237, 347, 238, 348, 237, 
	349, 238, 237, 238, 350, 237, 351, 238, 
	237, 352, 238, 237, 238, 353, 237, 238, 
	354, 237, 238, 280, 237, 355, 238, 237, 
	356, 238, 237, 238, 357, 237, 238, 358, 
	237, 359, 0, 360, 0, 361, 0, 362, 
	0, 363, 0, 364, 0, 365, 0, 366, 
	0, 367, 0, 368, 0, 369, 0, 370, 
	0, 371, 0, 372, 0, 373, 0, 374, 
	0, 375, 0, 376, 0, 378, 377, 380, 
	379, 380, 381, 382, 383, 384, 382, 385, 
	386, 387, 384, 388, 389, 390, 391, 392, 
	393, 394, 395, 381, 379, 380, 396, 379, 
	380, 397, 379, 380, 398, 379, 380, 399, 
	379, 380, 400, 379, 380, 401, 379, 380, 
	402, 379, 380, 403, 379, 380, 404, 379, 
	380, 405, 379, 380, 406, 379, 380, 407, 
	379, 380, 408, 379, 380, 409, 379, 380, 
	410, 379, 380, 411, 412, 379, 380, 413, 
	379, 380, 414, 379, 380, 415, 379, 380, 
	416, 379, 380, 417, 379, 380, 410, 379, 
	380, 418, 379, 380, 419, 379, 380, 420, 
	379, 380, 421, 379, 380, 422, 379, 380, 
	417, 379, 380, 423, 379, 380, 413, 379, 
	380, 424, 379, 425, 380, 379, 426, 427, 
	380, 379, 380, 428, 379, 380, 413, 379, 
	380, 426, 379, 380, 429, 379, 380, 430, 
	379, 380, 431, 379, 380, 432, 379, 433, 
	380, 379, 434, 380, 379, 380, 413, 379, 
	380, 435, 379, 380, 436, 379, 380, 413, 
	379, 380, 437, 379, 380, 438, 379, 380, 
	439, 379, 380, 440, 379, 380, 441, 379, 
	380, 442, 379, 380, 443, 379, 380, 444, 
	379, 380, 445, 379, 380, 446, 379, 380, 
	447, 379, 380, 448, 379, 380, 449, 379, 
	380, 450, 379, 380, 451, 379, 380, 422, 
	379, 380, 452, 379, 380, 453, 379, 380, 
	454, 379, 380, 455, 379, 380, 456, 379, 
	380, 457, 379, 380, 458, 379, 380, 459, 
	379, 380, 417, 379, 460, 380, 429, 379, 
	461, 380, 379, 380, 462, 379, 463, 380, 
	379, 464, 380, 379, 380, 465, 379, 380, 
	466, 379, 380, 467, 379, 380, 468, 379, 
	469, 380, 379, 470, 380, 379, 471, 380, 
	379, 417, 380, 379, 380, 472, 379, 380, 
	473, 379, 474, 380, 379, 475, 380, 379, 
	380, 476, 379, 380, 477, 379, 478, 143, 
	0, 479, 0, 480, 0, 481, 0, 482, 
	0, 483, 0, 484, 0, 485, 0, 486, 
	0, 487, 0, 488, 0, 489, 0, 78, 
	0, 490, 0, 491, 492, 0, 493, 0, 
	494, 0, 495, 0, 496, 0, 497, 0, 
	498, 0, 499, 0, 500, 0, 501, 0, 
	503, 502, 505, 504, 505, 506, 507, 508, 
	509, 507, 510, 511, 512, 509, 513, 514, 
	515, 516, 517, 518, 519, 520, 506, 504, 
	505, 521, 504, 505, 522, 504, 505, 523, 
	504, 505, 524, 504, 505, 525, 504, 505, 
	526, 504, 505, 527, 504, 505, 528, 504, 
	505, 529, 504, 505, 530, 504, 505, 531, 
	504, 505, 532, 504, 505, 533, 504, 505, 
	534, 504, 505, 535, 504, 505, 536, 537, 
	504, 505, 538, 504, 505, 539, 504, 505, 
	540, 504, 505, 541, 504, 505, 542, 504, 
	505, 535, 504, 505, 543, 504, 505, 544, 
	504, 505, 545, 504, 505, 546, 504, 505, 
	547, 504, 505, 542, 504, 505, 548, 504, 
	505, 538, 504, 505, 549, 504, 550, 505, 
	504, 551, 552, 505, 504, 505, 553, 504, 
	505, 538, 504, 505, 551, 504, 505, 554, 
	504, 505, 555, 504, 505, 556, 504, 505, 
	557, 504, 558, 505, 504, 559, 505, 504, 
	505, 538, 504, 505, 560, 504, 505, 561, 
	504, 505, 538, 504, 505, 562, 504, 505, 
	563, 504, 505, 564, 504, 505, 565, 504, 
	505, 566, 504, 505, 567, 504, 505, 568, 
	504, 505, 569, 504, 505, 570, 504, 505, 
	571, 504, 505, 572, 504, 505, 573, 504, 
	505, 574, 504, 505, 575, 504, 505, 576, 
	504, 505, 547, 504, 505, 577, 578, 504, 
	505, 579, 504, 505, 580, 504, 505, 581, 
	504, 505, 582, 504, 505, 583, 504, 505, 
	584, 504, 505, 585, 504, 505, 542, 504, 
	505, 586, 504, 505, 587, 504, 505, 588, 
	504, 505, 589, 504, 505, 590, 504, 505, 
	591, 504, 505, 592, 504, 505, 593, 504, 
	505, 594, 504, 505, 595, 504, 505, 596, 
	504, 505, 597, 504, 505, 598, 504, 505, 
	599, 504, 505, 600, 504, 505, 547, 504, 
	601, 505, 554, 504, 602, 505, 504, 505, 
	603, 504, 604, 505, 504, 605, 505, 504, 
	505, 606, 504, 505, 607, 504, 505, 608, 
	504, 505, 609, 504, 610, 505, 504, 611, 
	505, 504, 612, 505, 504, 542, 505, 504, 
	505, 613, 504, 505, 614, 504, 615, 505, 
	504, 616, 505, 504, 505, 617, 504, 505, 
	618, 504, 619, 0, 620, 0, 621, 0, 
	622, 0, 623, 624, 623, 0, 627, 626, 
	628, 629, 626, 625, 0, 631, 632, 630, 
	0, 631, 630, 627, 633, 631, 632, 633, 
	630, 627, 634, 635, 636, 637, 638, 639, 
	640, 641, 642, 638, 643, 644, 645, 646, 
	647, 648, 649, 650, 651, 634, 0, 83, 
	652, 82, 83, 653, 82, 83, 654, 82, 
	83, 655, 82, 83, 656, 82, 83, 111, 
	82, 83, 657, 658, 82, 83, 659, 82, 
	83, 660, 82, 83, 661, 82, 83, 662, 
	82, 83, 663, 82, 83, 664, 82, 83, 
	665, 82, 83, 666, 82, 83, 667, 82, 
	83, 668, 82, 83, 669, 82, 83, 670, 
	82, 83, 671, 82, 83, 672, 82, 83, 
	656, 82, 83, 673, 82, 83, 674, 82, 
	83, 675, 82, 676, 83, 82, 677, 83, 
	82, 83, 678, 82, 83, 679, 82, 83, 
	111, 82, 83, 680, 681, 82, 83, 682, 
	82, 83, 683, 82, 83, 684, 82, 83, 
	685, 82, 83, 686, 82, 83, 687, 82, 
	83, 688, 82, 83, 111, 82, 83, 689, 
	82, 83, 690, 82, 83, 691, 82, 83, 
	692, 82, 83, 693, 82, 83, 694, 82, 
	83, 695, 82, 83, 696, 82, 83, 697, 
	82, 83, 698, 82, 83, 699, 82, 83, 
	700, 82, 83, 701, 82, 83, 702, 82, 
	83, 703, 82, 83, 656, 82, 704, 83, 
	82, 705, 83, 82, 83, 706, 82, 707, 
	83, 82, 708, 83, 82, 83, 709, 82, 
	83, 710, 82, 83, 711, 82, 83, 712, 
	82, 713, 83, 82, 714, 83, 82, 715, 
	83, 82, 111, 83, 82, 83, 716, 82, 
	717, 83, 82, 718, 83, 82, 83, 719, 
	82, 720, 83, 82, 721, 83, 82, 83, 
	722, 82, 83, 723, 82, 83, 656, 82, 
	724, 0, 1, 0, 725, 0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 66, 72, 74, 80, 82, 87, 90, 
	159, 396, 409, 533, 616, 4, 5, 6, 
	7, 6, 6, 7, 6, 8, 8, 8, 
	9, 8, 8, 8, 9, 10, 11, 12, 
	2, 12, 13, 2, 14, 16, 17, 18, 
	19, 20, 21, 22, 23, 24, 25, 26, 
	27, 28, 618, 30, 31, 2, 14, 31, 
	2, 14, 33, 34, 2, 33, 32, 34, 
	36, 37, 29, 38, 39, 40, 41, 42, 
	43, 44, 43, 44, 44, 2, 45, 59, 
	539, 545, 569, 594, 607, 46, 47, 48, 
	49, 50, 51, 52, 53, 54, 55, 56, 
	57, 58, 2, 60, 61, 62, 63, 64, 
	65, 2, 2, 3, 13, 15, 29, 32, 
	35, 66, 72, 74, 80, 82, 87, 90, 
	159, 396, 409, 533, 67, 68, 69, 70, 
	71, 73, 75, 76, 77, 79, 78, 81, 
	72, 83, 84, 85, 86, 88, 89, 91, 
	106, 92, 93, 94, 95, 96, 97, 98, 
	99, 100, 101, 102, 103, 104, 105, 107, 
	108, 109, 110, 111, 112, 113, 114, 115, 
	116, 117, 116, 117, 117, 2, 118, 124, 
	130, 146, 119, 120, 121, 122, 123, 65, 
	125, 126, 127, 128, 129, 131, 132, 133, 
	134, 135, 136, 137, 138, 139, 140, 141, 
	142, 143, 144, 145, 147, 148, 149, 150, 
	151, 152, 153, 154, 155, 156, 157, 158, 
	160, 285, 161, 162, 163, 164, 165, 166, 
	167, 168, 169, 170, 171, 170, 171, 171, 
	2, 172, 186, 187, 194, 200, 202, 208, 
	210, 215, 218, 234, 259, 272, 173, 174, 
	175, 176, 177, 178, 179, 180, 181, 182, 
	183, 184, 185, 2, 65, 188, 189, 186, 
	190, 191, 192, 193, 195, 196, 197, 198, 
	199, 201, 203, 204, 205, 207, 206, 209, 
	200, 211, 212, 213, 214, 216, 217, 219, 
	220, 221, 222, 223, 224, 225, 226, 227, 
	228, 229, 230, 231, 232, 233, 235, 243, 
	236, 237, 238, 239, 240, 241, 242, 244, 
	245, 246, 247, 248, 249, 250, 251, 252, 
	253, 254, 255, 256, 257, 258, 260, 261, 
	262, 263, 264, 265, 266, 267, 268, 269, 
	270, 271, 273, 274, 281, 275, 276, 277, 
	278, 279, 280, 282, 283, 284, 210, 286, 
	287, 288, 289, 290, 291, 292, 293, 294, 
	295, 296, 297, 298, 299, 300, 301, 302, 
	303, 304, 305, 304, 305, 305, 2, 306, 
	320, 321, 328, 334, 336, 342, 344, 349, 
	352, 368, 377, 390, 307, 308, 309, 310, 
	311, 312, 313, 314, 315, 316, 317, 318, 
	319, 2, 65, 322, 323, 320, 324, 325, 
	326, 327, 329, 330, 331, 332, 333, 335, 
	337, 338, 339, 341, 340, 343, 334, 345, 
	346, 347, 348, 350, 351, 353, 354, 355, 
	356, 357, 358, 359, 360, 361, 362, 363, 
	364, 365, 366, 367, 369, 370, 371, 372, 
	373, 374, 375, 376, 378, 379, 380, 381, 
	382, 383, 384, 385, 386, 387, 388, 389, 
	391, 392, 393, 394, 395, 344, 397, 398, 
	399, 400, 401, 402, 403, 404, 405, 406, 
	407, 408, 410, 411, 529, 412, 413, 414, 
	415, 416, 417, 418, 419, 420, 421, 422, 
	421, 422, 422, 2, 423, 437, 438, 445, 
	451, 453, 459, 461, 466, 469, 485, 510, 
	523, 424, 425, 426, 427, 428, 429, 430, 
	431, 432, 433, 434, 435, 436, 2, 65, 
	439, 440, 437, 441, 442, 443, 444, 446, 
	447, 448, 449, 450, 452, 454, 455, 456, 
	458, 457, 460, 451, 462, 463, 464, 465, 
	467, 468, 470, 471, 472, 473, 474, 475, 
	476, 477, 478, 479, 480, 481, 482, 483, 
	484, 486, 494, 487, 488, 489, 490, 491, 
	492, 493, 495, 496, 497, 498, 499, 500, 
	501, 502, 503, 504, 505, 506, 507, 508, 
	509, 511, 512, 513, 514, 515, 516, 517, 
	518, 519, 520, 521, 522, 524, 525, 526, 
	527, 528, 461, 530, 531, 532, 82, 533, 
	534, 535, 537, 538, 536, 534, 535, 536, 
	534, 537, 538, 3, 13, 15, 29, 32, 
	35, 66, 72, 74, 80, 82, 87, 90, 
	159, 396, 409, 533, 540, 541, 542, 543, 
	544, 546, 561, 547, 548, 549, 550, 551, 
	552, 553, 554, 555, 556, 557, 558, 559, 
	560, 562, 563, 564, 565, 566, 567, 568, 
	570, 578, 571, 572, 573, 574, 575, 576, 
	577, 579, 580, 581, 582, 583, 584, 585, 
	586, 587, 588, 589, 590, 591, 592, 593, 
	595, 596, 597, 598, 599, 600, 601, 602, 
	603, 604, 605, 606, 608, 609, 610, 611, 
	612, 613, 614, 615, 617, 0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 35, 0, 0, 0, 7, 
	139, 48, 0, 102, 9, 5, 45, 134, 
	45, 0, 33, 122, 33, 33, 0, 11, 
	106, 0, 0, 114, 25, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 149, 126, 0, 
	110, 23, 0, 27, 118, 27, 51, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 144, 0, 54, 0, 69, 33, 84, 
	84, 84, 84, 84, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 13, 0, 0, 0, 0, 0, 
	13, 31, 130, 60, 57, 31, 63, 57, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 66, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 144, 0, 54, 0, 81, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 21, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 0, 
	75, 33, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 17, 17, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 144, 0, 54, 0, 78, 33, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 19, 19, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 0, 72, 33, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 15, 15, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 37, 37, 54, 37, 87, 0, 0, 
	39, 0, 0, 93, 90, 41, 96, 90, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 99, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 618;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/pl.js.rl" */

/* line 130 "ragel/i18n/pl.js.rl" */

/* line 131 "ragel/i18n/pl.js.rl" */

/* line 132 "ragel/i18n/pl.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 1082 "js/lib/gherkin/lexer/pl.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/pl.js.rl" */
  
/* line 1089 "js/lib/gherkin/lexer/pl.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/pl.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/pl.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/pl.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/pl.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/pl.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/pl.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/pl.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/pl.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/pl.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/pl.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/pl.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/pl.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/pl.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/pl.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/pl.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/pl.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/pl.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/pl.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/pl.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/pl.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/pl.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/pl.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/pl.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/pl.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1316 "js/lib/gherkin/lexer/pl.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/pl.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1355 "js/lib/gherkin/lexer/pl.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/pl.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/pl', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/pl', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();
