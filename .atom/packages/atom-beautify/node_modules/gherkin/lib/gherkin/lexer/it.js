
/* line 1 "ragel/i18n/it.js.rl" */
;(function() {


/* line 126 "ragel/i18n/it.js.rl" */



/* line 11 "js/lib/gherkin/lexer/it.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 19, 37, 38, 39, 41, 43, 
	48, 53, 58, 63, 67, 71, 73, 74, 
	75, 76, 77, 78, 79, 80, 81, 82, 
	83, 84, 85, 86, 87, 88, 89, 91, 
	93, 98, 105, 110, 111, 112, 113, 114, 
	115, 116, 117, 118, 119, 120, 121, 122, 
	123, 124, 125, 140, 142, 144, 146, 148, 
	150, 152, 154, 156, 158, 160, 162, 164, 
	166, 168, 170, 188, 189, 190, 194, 196, 
	197, 198, 199, 200, 201, 202, 203, 210, 
	212, 214, 216, 218, 220, 222, 224, 226, 
	228, 230, 232, 234, 236, 237, 238, 239, 
	240, 241, 242, 243, 244, 245, 246, 247, 
	248, 249, 250, 251, 262, 264, 266, 268, 
	270, 272, 274, 276, 278, 280, 282, 284, 
	286, 288, 290, 292, 294, 296, 298, 300, 
	302, 304, 306, 308, 310, 312, 314, 316, 
	318, 320, 322, 324, 326, 328, 330, 332, 
	334, 336, 338, 340, 342, 345, 347, 349, 
	351, 353, 355, 357, 359, 361, 363, 365, 
	367, 369, 371, 373, 375, 377, 379, 380, 
	381, 382, 383, 384, 385, 387, 388, 389, 
	390, 391, 392, 393, 394, 395, 411, 413, 
	415, 417, 419, 421, 423, 425, 427, 429, 
	431, 433, 435, 437, 439, 441, 443, 445, 
	447, 449, 451, 453, 455, 457, 459, 461, 
	463, 465, 467, 469, 471, 476, 478, 480, 
	482, 484, 486, 488, 490, 492, 494, 496, 
	498, 500, 502, 504, 506, 508, 510, 512, 
	515, 517, 519, 521, 523, 525, 527, 529, 
	531, 533, 535, 537, 539, 541, 543, 545, 
	547, 549, 550, 551, 552, 553, 554, 555, 
	556, 557, 558, 559, 560, 561, 562, 563, 
	564, 565, 566, 567, 568, 569, 570, 585, 
	587, 589, 591, 593, 595, 597, 599, 601, 
	603, 605, 607, 609, 611, 613, 615, 617, 
	619, 621, 623, 625, 627, 629, 634, 636, 
	638, 640, 642, 644, 646, 648, 650, 652, 
	654, 656, 658, 660, 662, 664, 666, 668, 
	670, 672, 674, 676, 678, 680, 682, 684, 
	688, 694, 697, 699, 705, 723, 725, 727, 
	729, 731, 733, 735, 737, 742, 744, 746, 
	748, 750, 752, 754, 756, 758, 760, 762, 
	764, 766, 768, 770, 772, 774, 776, 778, 
	780, 783, 785, 787, 789, 791, 793, 795, 
	797, 799, 801, 803, 805, 807, 809, 811, 
	813, 815, 817, 819, 820, 821
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	67, 68, 69, 70, 77, 81, 83, 124, 
	239, 9, 13, 10, 32, 34, 35, 37, 
	42, 64, 65, 67, 68, 69, 70, 77, 
	81, 83, 124, 9, 13, 34, 34, 10, 
	13, 10, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 9, 13, 10, 32, 9, 13, 10, 
	13, 10, 95, 70, 69, 65, 84, 85, 
	82, 69, 95, 69, 78, 68, 95, 37, 
	32, 10, 13, 10, 13, 13, 32, 64, 
	9, 10, 9, 10, 13, 32, 64, 11, 
	12, 10, 32, 64, 9, 13, 108, 108, 
	111, 114, 97, 111, 110, 116, 101, 115, 
	116, 111, 58, 10, 10, 10, 32, 35, 
	37, 42, 64, 65, 68, 69, 70, 77, 
	81, 83, 9, 13, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 32, 10, 32, 34, 35, 37, 42, 
	64, 65, 67, 68, 69, 70, 77, 81, 
	83, 124, 9, 13, 97, 116, 97, 101, 
	105, 111, 32, 115, 101, 109, 112, 105, 
	58, 10, 10, 10, 32, 35, 70, 124, 
	9, 13, 10, 117, 10, 110, 10, 122, 
	10, 105, 10, 111, 10, 110, 10, 97, 
	10, 108, 10, 105, 10, 116, -61, 10, 
	-96, 10, 10, 58, 117, 110, 122, 105, 
	111, 110, 97, 108, 105, 116, -61, -96, 
	58, 10, 10, 10, 32, 35, 37, 64, 
	67, 69, 70, 83, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 111, 10, 110, 10, 116, 
	10, 101, 10, 115, 10, 116, 10, 111, 
	10, 58, 10, 115, 10, 101, 10, 109, 
	10, 112, 10, 105, 10, 117, 10, 110, 
	10, 122, 10, 105, 10, 111, 10, 110, 
	10, 97, 10, 108, 10, 105, 10, 116, 
	-61, 10, -96, 10, 10, 99, 10, 101, 
	104, 10, 110, 10, 97, 10, 114, 10, 
	105, 10, 101, 10, 109, 10, 97, 10, 
	32, 10, 100, 10, 101, 10, 108, 10, 
	108, 10, 111, 10, 32, 10, 115, 10, 
	99, 10, 101, 117, 97, 110, 100, 111, 
	99, 101, 104, 110, 97, 114, 105, 111, 
	58, 10, 10, 10, 32, 35, 37, 42, 
	64, 65, 67, 68, 69, 70, 77, 81, 
	83, 9, 13, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	32, 10, 108, 10, 108, 10, 111, 10, 
	114, 10, 97, 10, 111, 10, 110, 10, 
	116, 10, 101, 10, 115, 10, 116, 10, 
	111, 10, 58, 10, 97, 10, 116, 10, 
	97, 101, 105, 111, 10, 117, 10, 110, 
	10, 122, 10, 105, 10, 111, 10, 110, 
	10, 97, 10, 108, 10, 105, 10, 116, 
	-61, 10, -96, 10, 10, 117, 10, 97, 
	10, 110, 10, 100, 10, 111, 10, 99, 
	10, 101, 104, 10, 110, 10, 97, 10, 
	114, 10, 105, 10, 101, 10, 109, 10, 
	97, 10, 32, 10, 100, 10, 101, 10, 
	108, 10, 108, 10, 111, 10, 32, 10, 
	115, 10, 99, 10, 101, 101, 109, 97, 
	32, 100, 101, 108, 108, 111, 32, 115, 
	99, 101, 110, 97, 114, 105, 111, 58, 
	10, 10, 10, 32, 35, 37, 42, 64, 
	65, 68, 69, 70, 77, 81, 83, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 32, 10, 
	108, 10, 108, 10, 111, 10, 114, 10, 
	97, 10, 97, 10, 116, 10, 97, 101, 
	105, 111, 10, 117, 10, 110, 10, 122, 
	10, 105, 10, 111, 10, 110, 10, 97, 
	10, 108, 10, 105, 10, 116, -61, 10, 
	-96, 10, 10, 58, 10, 117, 10, 97, 
	10, 110, 10, 100, 10, 111, 10, 99, 
	10, 101, 10, 110, 10, 97, 10, 114, 
	10, 105, 10, 111, 32, 124, 9, 13, 
	10, 32, 92, 124, 9, 13, 10, 92, 
	124, 10, 92, 10, 32, 92, 124, 9, 
	13, 10, 32, 34, 35, 37, 42, 64, 
	65, 67, 68, 69, 70, 77, 81, 83, 
	124, 9, 13, 10, 108, 10, 108, 10, 
	111, 10, 114, 10, 97, 10, 97, 10, 
	116, 10, 97, 101, 105, 111, 10, 117, 
	10, 110, 10, 122, 10, 105, 10, 111, 
	10, 110, 10, 97, 10, 108, 10, 105, 
	10, 116, -61, 10, -96, 10, 10, 58, 
	10, 117, 10, 97, 10, 110, 10, 100, 
	10, 111, 10, 99, 10, 101, 104, 10, 
	110, 10, 97, 10, 114, 10, 105, 10, 
	111, 10, 101, 10, 109, 10, 97, 10, 
	32, 10, 100, 10, 101, 10, 108, 10, 
	108, 10, 111, 10, 32, 10, 115, 10, 
	99, 10, 101, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 17, 16, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 13, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 16, 1, 1, 4, 2, 1, 
	1, 1, 1, 1, 1, 1, 5, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 9, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 14, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 5, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 13, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 5, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	4, 3, 2, 4, 16, 2, 2, 2, 
	2, 2, 2, 2, 5, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 0, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 19, 37, 39, 41, 44, 47, 
	52, 57, 62, 67, 71, 75, 78, 80, 
	82, 84, 86, 88, 90, 92, 94, 96, 
	98, 100, 102, 104, 106, 108, 110, 113, 
	116, 121, 128, 133, 135, 137, 139, 141, 
	143, 145, 147, 149, 151, 153, 155, 157, 
	159, 161, 163, 178, 181, 184, 187, 190, 
	193, 196, 199, 202, 205, 208, 211, 214, 
	217, 220, 223, 241, 243, 245, 250, 253, 
	255, 257, 259, 261, 263, 265, 267, 274, 
	277, 280, 283, 286, 289, 292, 295, 298, 
	301, 304, 307, 310, 313, 315, 317, 319, 
	321, 323, 325, 327, 329, 331, 333, 335, 
	337, 339, 341, 343, 354, 357, 360, 363, 
	366, 369, 372, 375, 378, 381, 384, 387, 
	390, 393, 396, 399, 402, 405, 408, 411, 
	414, 417, 420, 423, 426, 429, 432, 435, 
	438, 441, 444, 447, 450, 453, 456, 459, 
	462, 465, 468, 471, 474, 478, 481, 484, 
	487, 490, 493, 496, 499, 502, 505, 508, 
	511, 514, 517, 520, 523, 526, 529, 531, 
	533, 535, 537, 539, 541, 544, 546, 548, 
	550, 552, 554, 556, 558, 560, 576, 579, 
	582, 585, 588, 591, 594, 597, 600, 603, 
	606, 609, 612, 615, 618, 621, 624, 627, 
	630, 633, 636, 639, 642, 645, 648, 651, 
	654, 657, 660, 663, 666, 672, 675, 678, 
	681, 684, 687, 690, 693, 696, 699, 702, 
	705, 708, 711, 714, 717, 720, 723, 726, 
	730, 733, 736, 739, 742, 745, 748, 751, 
	754, 757, 760, 763, 766, 769, 772, 775, 
	778, 781, 783, 785, 787, 789, 791, 793, 
	795, 797, 799, 801, 803, 805, 807, 809, 
	811, 813, 815, 817, 819, 821, 823, 838, 
	841, 844, 847, 850, 853, 856, 859, 862, 
	865, 868, 871, 874, 877, 880, 883, 886, 
	889, 892, 895, 898, 901, 904, 910, 913, 
	916, 919, 922, 925, 928, 931, 934, 937, 
	940, 943, 946, 949, 952, 955, 958, 961, 
	964, 967, 970, 973, 976, 979, 982, 985, 
	989, 995, 999, 1002, 1008, 1026, 1029, 1032, 
	1035, 1038, 1041, 1044, 1047, 1053, 1056, 1059, 
	1062, 1065, 1068, 1071, 1074, 1077, 1080, 1083, 
	1086, 1089, 1092, 1095, 1098, 1101, 1104, 1107, 
	1110, 1114, 1117, 1120, 1123, 1126, 1129, 1132, 
	1135, 1138, 1141, 1144, 1147, 1150, 1153, 1156, 
	1159, 1162, 1165, 1168, 1170, 1172
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 1, 0, 2, 1, 3, 4, 5, 
	6, 7, 8, 9, 10, 11, 12, 13, 
	14, 15, 16, 1, 0, 18, 0, 19, 
	0, 21, 22, 20, 24, 25, 23, 28, 
	27, 29, 27, 26, 32, 31, 33, 31, 
	30, 32, 31, 34, 31, 30, 32, 31, 
	35, 31, 30, 37, 36, 36, 0, 2, 
	38, 38, 0, 40, 41, 39, 2, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 55, 0, 56, 0, 58, 59, 
	57, 61, 62, 60, 0, 0, 0, 0, 
	63, 64, 65, 64, 64, 67, 66, 63, 
	2, 68, 7, 68, 0, 69, 0, 70, 
	0, 71, 0, 72, 0, 73, 0, 74, 
	0, 75, 0, 76, 0, 77, 0, 78, 
	0, 79, 0, 80, 0, 81, 0, 83, 
	82, 85, 84, 85, 86, 87, 88, 89, 
	87, 90, 91, 89, 92, 93, 94, 95, 
	86, 84, 85, 96, 84, 85, 97, 84, 
	85, 98, 84, 85, 99, 84, 85, 100, 
	84, 85, 101, 84, 85, 102, 84, 85, 
	103, 84, 85, 104, 84, 85, 105, 84, 
	85, 106, 84, 85, 107, 84, 85, 108, 
	84, 85, 109, 84, 85, 110, 84, 112, 
	111, 113, 114, 115, 116, 117, 118, 119, 
	120, 121, 122, 123, 124, 125, 126, 111, 
	0, 127, 0, 128, 0, 73, 73, 73, 
	73, 0, 56, 129, 0, 130, 0, 131, 
	0, 132, 0, 133, 0, 134, 0, 136, 
	135, 138, 137, 138, 139, 140, 141, 140, 
	139, 137, 138, 142, 137, 138, 143, 137, 
	138, 144, 137, 138, 145, 137, 138, 146, 
	137, 138, 147, 137, 138, 148, 137, 138, 
	149, 137, 138, 150, 137, 138, 151, 137, 
	152, 138, 137, 153, 138, 137, 138, 154, 
	137, 155, 0, 156, 0, 157, 0, 158, 
	0, 159, 0, 160, 0, 161, 0, 162, 
	0, 163, 0, 164, 0, 165, 0, 166, 
	0, 167, 0, 169, 168, 171, 170, 171, 
	172, 173, 174, 173, 175, 176, 177, 178, 
	172, 170, 171, 179, 170, 171, 180, 170, 
	171, 181, 170, 171, 182, 170, 171, 183, 
	170, 171, 184, 170, 171, 185, 170, 171, 
	186, 170, 171, 187, 170, 171, 188, 170, 
	171, 189, 170, 171, 190, 170, 171, 191, 
	170, 171, 192, 170, 171, 193, 170, 171, 
	194, 170, 171, 195, 170, 171, 196, 170, 
	171, 197, 170, 171, 198, 170, 171, 199, 
	170, 171, 200, 170, 171, 201, 170, 171, 
	202, 170, 171, 203, 170, 171, 204, 170, 
	171, 199, 170, 171, 205, 170, 171, 206, 
	170, 171, 207, 170, 171, 208, 170, 171, 
	209, 170, 171, 210, 170, 171, 211, 170, 
	171, 212, 170, 171, 213, 170, 171, 214, 
	170, 215, 171, 170, 199, 171, 170, 171, 
	216, 170, 171, 217, 218, 170, 171, 219, 
	170, 171, 220, 170, 171, 221, 170, 171, 
	198, 170, 171, 222, 170, 171, 223, 170, 
	171, 224, 170, 171, 225, 170, 171, 226, 
	170, 171, 227, 170, 171, 228, 170, 171, 
	229, 170, 171, 230, 170, 171, 231, 170, 
	171, 232, 170, 171, 233, 170, 171, 217, 
	170, 234, 0, 235, 0, 236, 0, 237, 
	0, 73, 0, 238, 0, 239, 240, 0, 
	241, 0, 242, 0, 243, 0, 244, 0, 
	245, 0, 246, 0, 248, 247, 250, 249, 
	250, 251, 252, 253, 254, 252, 255, 256, 
	257, 254, 258, 259, 260, 261, 251, 249, 
	250, 262, 249, 250, 263, 249, 250, 264, 
	249, 250, 265, 249, 250, 266, 249, 250, 
	267, 249, 250, 268, 249, 250, 269, 249, 
	250, 270, 249, 250, 271, 249, 250, 272, 
	249, 250, 273, 249, 250, 274, 249, 250, 
	275, 249, 250, 276, 249, 250, 277, 249, 
	250, 278, 249, 250, 279, 249, 250, 280, 
	249, 250, 281, 249, 250, 282, 249, 250, 
	283, 249, 250, 284, 249, 250, 285, 249, 
	250, 286, 249, 250, 287, 249, 250, 288, 
	249, 250, 276, 249, 250, 289, 249, 250, 
	290, 249, 250, 281, 281, 281, 281, 249, 
	250, 291, 249, 250, 292, 249, 250, 293, 
	249, 250, 294, 249, 250, 295, 249, 250, 
	296, 249, 250, 297, 249, 250, 298, 249, 
	250, 299, 249, 250, 300, 249, 301, 250, 
	249, 288, 250, 249, 250, 302, 249, 250, 
	303, 249, 250, 304, 249, 250, 305, 249, 
	250, 281, 249, 250, 306, 249, 250, 307, 
	308, 249, 250, 309, 249, 250, 310, 249, 
	250, 311, 249, 250, 287, 249, 250, 312, 
	249, 250, 313, 249, 250, 314, 249, 250, 
	315, 249, 250, 316, 249, 250, 317, 249, 
	250, 318, 249, 250, 319, 249, 250, 320, 
	249, 250, 321, 249, 250, 322, 249, 250, 
	323, 249, 250, 307, 249, 324, 0, 325, 
	0, 326, 0, 327, 0, 328, 0, 329, 
	0, 330, 0, 331, 0, 332, 0, 333, 
	0, 334, 0, 335, 0, 336, 0, 337, 
	0, 338, 0, 339, 0, 340, 0, 341, 
	0, 342, 0, 344, 343, 346, 345, 346, 
	347, 348, 349, 350, 348, 351, 352, 350, 
	353, 354, 355, 356, 347, 345, 346, 357, 
	345, 346, 358, 345, 346, 359, 345, 346, 
	360, 345, 346, 361, 345, 346, 362, 345, 
	346, 363, 345, 346, 364, 345, 346, 365, 
	345, 346, 366, 345, 346, 367, 345, 346, 
	368, 345, 346, 369, 345, 346, 370, 345, 
	346, 371, 345, 346, 372, 345, 346, 373, 
	345, 346, 374, 345, 346, 375, 345, 346, 
	376, 345, 346, 377, 345, 346, 378, 345, 
	346, 376, 376, 376, 376, 345, 346, 379, 
	345, 346, 380, 345, 346, 381, 345, 346, 
	382, 345, 346, 383, 345, 346, 384, 345, 
	346, 385, 345, 346, 386, 345, 346, 387, 
	345, 346, 388, 345, 389, 346, 345, 390, 
	346, 345, 346, 371, 345, 346, 391, 345, 
	346, 392, 345, 346, 393, 345, 346, 394, 
	345, 346, 376, 345, 346, 395, 345, 346, 
	396, 345, 346, 397, 345, 346, 398, 345, 
	346, 399, 345, 346, 400, 345, 346, 390, 
	345, 401, 402, 401, 0, 405, 404, 406, 
	407, 404, 403, 0, 409, 410, 408, 0, 
	409, 408, 405, 411, 409, 410, 411, 408, 
	405, 412, 413, 414, 415, 416, 417, 418, 
	419, 420, 421, 422, 423, 424, 425, 426, 
	412, 0, 85, 427, 84, 85, 428, 84, 
	85, 429, 84, 85, 430, 84, 85, 431, 
	84, 85, 432, 84, 85, 433, 84, 85, 
	431, 431, 431, 431, 84, 85, 434, 84, 
	85, 435, 84, 85, 436, 84, 85, 437, 
	84, 85, 438, 84, 85, 439, 84, 85, 
	440, 84, 85, 441, 84, 85, 442, 84, 
	85, 443, 84, 444, 85, 84, 445, 85, 
	84, 85, 110, 84, 85, 446, 84, 85, 
	447, 84, 85, 448, 84, 85, 449, 84, 
	85, 431, 84, 85, 450, 84, 85, 451, 
	452, 84, 85, 453, 84, 85, 454, 84, 
	85, 455, 84, 85, 456, 84, 85, 445, 
	84, 85, 457, 84, 85, 458, 84, 85, 
	459, 84, 85, 460, 84, 85, 461, 84, 
	85, 462, 84, 85, 463, 84, 85, 464, 
	84, 85, 465, 84, 85, 466, 84, 85, 
	467, 84, 85, 468, 84, 85, 451, 84, 
	469, 0, 1, 0, 470, 0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 40, 67, 70, 92, 39, 166, 171, 
	319, 371, 4, 5, 6, 7, 6, 6, 
	7, 6, 8, 8, 8, 9, 8, 8, 
	8, 9, 10, 11, 12, 2, 12, 13, 
	2, 14, 16, 17, 18, 19, 20, 21, 
	22, 23, 24, 25, 26, 27, 28, 373, 
	30, 31, 2, 14, 31, 2, 14, 33, 
	34, 2, 33, 32, 34, 36, 37, 38, 
	39, 29, 41, 42, 43, 44, 45, 46, 
	47, 48, 49, 50, 49, 50, 50, 2, 
	51, 65, 325, 330, 333, 329, 346, 351, 
	52, 53, 54, 55, 56, 57, 58, 59, 
	60, 61, 62, 63, 64, 2, 66, 2, 
	2, 3, 13, 15, 29, 32, 35, 40, 
	67, 70, 92, 39, 166, 171, 319, 68, 
	69, 71, 72, 73, 74, 75, 76, 77, 
	78, 77, 78, 78, 2, 79, 80, 81, 
	82, 83, 84, 85, 86, 87, 88, 89, 
	90, 91, 66, 93, 94, 95, 96, 97, 
	98, 99, 100, 101, 102, 103, 104, 105, 
	106, 107, 106, 107, 107, 2, 108, 122, 
	130, 135, 147, 109, 110, 111, 112, 113, 
	114, 115, 116, 117, 118, 119, 120, 121, 
	2, 123, 124, 125, 126, 127, 128, 129, 
	66, 131, 132, 133, 134, 136, 137, 138, 
	139, 140, 141, 142, 143, 144, 145, 146, 
	148, 149, 153, 150, 151, 152, 154, 155, 
	156, 157, 158, 159, 160, 161, 162, 163, 
	164, 165, 167, 168, 169, 170, 172, 173, 
	249, 174, 175, 176, 177, 178, 179, 180, 
	181, 180, 181, 181, 2, 182, 196, 197, 
	202, 210, 213, 201, 225, 230, 183, 184, 
	185, 186, 187, 188, 189, 190, 191, 192, 
	193, 194, 195, 2, 66, 198, 199, 200, 
	201, 196, 203, 204, 205, 206, 207, 208, 
	209, 211, 212, 214, 215, 216, 217, 218, 
	219, 220, 221, 222, 223, 224, 226, 227, 
	228, 229, 231, 232, 236, 233, 234, 235, 
	237, 238, 239, 240, 241, 242, 243, 244, 
	245, 246, 247, 248, 250, 251, 252, 253, 
	254, 255, 256, 257, 258, 259, 260, 261, 
	262, 263, 264, 265, 266, 267, 268, 269, 
	270, 269, 270, 270, 2, 271, 285, 286, 
	291, 294, 290, 307, 312, 272, 273, 274, 
	275, 276, 277, 278, 279, 280, 281, 282, 
	283, 284, 2, 66, 287, 288, 289, 290, 
	285, 292, 293, 295, 296, 297, 298, 299, 
	300, 301, 302, 303, 304, 305, 306, 308, 
	309, 310, 311, 313, 314, 315, 316, 317, 
	318, 319, 320, 321, 323, 324, 322, 320, 
	321, 322, 320, 323, 324, 3, 13, 15, 
	29, 32, 35, 40, 67, 70, 92, 39, 
	166, 171, 319, 326, 327, 328, 329, 65, 
	331, 332, 334, 335, 336, 337, 338, 339, 
	340, 341, 342, 343, 344, 345, 347, 348, 
	349, 350, 352, 353, 358, 354, 355, 356, 
	357, 359, 360, 361, 362, 363, 364, 365, 
	366, 367, 368, 369, 370, 372, 0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	35, 0, 0, 0, 7, 139, 48, 0, 
	102, 9, 5, 45, 134, 45, 0, 33, 
	122, 33, 33, 0, 11, 106, 0, 0, 
	114, 25, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 149, 126, 0, 110, 23, 0, 
	27, 118, 27, 51, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 144, 0, 54, 0, 72, 
	33, 84, 84, 84, 84, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 15, 15, 31, 
	130, 60, 57, 31, 63, 57, 63, 63, 
	63, 63, 63, 63, 63, 63, 66, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	144, 0, 54, 0, 81, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 21, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 144, 0, 54, 0, 69, 33, 84, 
	84, 84, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	13, 0, 0, 0, 0, 0, 0, 0, 
	13, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	144, 0, 54, 0, 75, 33, 84, 84, 
	84, 84, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 17, 17, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	144, 0, 54, 0, 78, 33, 84, 84, 
	84, 84, 84, 84, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 19, 19, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 37, 37, 54, 37, 87, 
	0, 0, 39, 0, 0, 93, 90, 41, 
	96, 90, 96, 96, 96, 96, 96, 96, 
	96, 96, 99, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 373;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/it.js.rl" */

/* line 130 "ragel/i18n/it.js.rl" */

/* line 131 "ragel/i18n/it.js.rl" */

/* line 132 "ragel/i18n/it.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 711 "js/lib/gherkin/lexer/it.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/it.js.rl" */
  
/* line 718 "js/lib/gherkin/lexer/it.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/it.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/it.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/it.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/it.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/it.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/it.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/it.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/it.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/it.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/it.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/it.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/it.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/it.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/it.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/it.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/it.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/it.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/it.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/it.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/it.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/it.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/it.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/it.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/it.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 945 "js/lib/gherkin/lexer/it.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/it.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 984 "js/lib/gherkin/lexer/it.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/it.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/it', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/it', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();
