
/* line 1 "ragel/i18n/cs.js.rl" */
;(function() {


/* line 126 "ragel/i18n/cs.js.rl" */



/* line 11 "js/lib/gherkin/lexer/cs.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 18, 35, 36, 37, 39, 41, 
	46, 51, 56, 61, 65, 69, 71, 72, 
	73, 74, 75, 76, 77, 78, 79, 80, 
	81, 82, 83, 84, 85, 86, 87, 89, 
	91, 96, 103, 108, 110, 113, 116, 119, 
	122, 125, 128, 129, 131, 132, 133, 134, 
	135, 136, 137, 138, 139, 140, 141, 142, 
	157, 159, 161, 163, 165, 167, 169, 171, 
	173, 175, 177, 179, 181, 183, 185, 187, 
	204, 205, 206, 207, 208, 209, 210, 211, 
	212, 213, 214, 215, 216, 217, 218, 219, 
	220, 221, 222, 223, 224, 237, 239, 241, 
	243, 245, 247, 249, 251, 253, 255, 257, 
	259, 261, 263, 265, 267, 270, 288, 289, 
	290, 291, 292, 293, 294, 295, 298, 299, 
	300, 301, 302, 303, 304, 305, 306, 307, 
	308, 309, 316, 318, 320, 322, 324, 326, 
	328, 330, 332, 334, 336, 337, 340, 341, 
	342, 343, 344, 345, 346, 347, 348, 349, 
	350, 362, 364, 366, 368, 370, 372, 374, 
	376, 378, 380, 382, 384, 386, 388, 390, 
	392, 394, 396, 398, 400, 402, 404, 406, 
	408, 410, 412, 414, 416, 418, 420, 422, 
	424, 426, 428, 430, 432, 434, 436, 438, 
	440, 442, 444, 446, 448, 450, 452, 455, 
	457, 459, 461, 463, 465, 467, 469, 471, 
	474, 476, 478, 480, 482, 484, 486, 488, 
	490, 492, 494, 496, 498, 500, 502, 504, 
	506, 508, 510, 512, 513, 514, 515, 516, 
	517, 518, 519, 520, 521, 522, 523, 524, 
	525, 526, 527, 528, 529, 544, 546, 548, 
	550, 552, 554, 556, 558, 560, 562, 564, 
	566, 568, 570, 572, 574, 577, 595, 596, 
	597, 598, 599, 600, 601, 602, 603, 604, 
	605, 606, 607, 608, 609, 610, 611, 612, 
	613, 614, 618, 624, 627, 629, 635, 652, 
	654, 657, 659, 661, 663, 665, 667, 669, 
	671, 673, 675, 677, 679, 681, 683, 685, 
	687, 689, 691, 693, 695, 697, 699, 701, 
	703, 705, 707, 709, 711, 713, 715, 717, 
	719, 721, 723, 726, 728, 732, 734, 736, 
	738, 740, 742, 744, 746, 748, 750, 752, 
	754, 756, 758, 760, 762, 764, 766, 768, 
	770, 772, 774, 776, 778, 780, 782, 784, 
	786, 788, 790, 792, 794, 796, 798, 800, 
	802, 803, 804, 805, 806, 807, 809, 811, 
	813, 815, 817, 820, 822, 825, 827, 829, 
	831, 833, 835, 837, 839, 841, 843, 845, 
	847, 849, 851, 853, 855, 857, 859, 861, 
	863, 865, 867, 869, 871, 873, 875, 877, 
	879, 881, 883, 885, 887, 889, 892, 910, 
	911, 912, 913, 914, 915, 917, 919, 921, 
	923, 925, 927, 929, 931, 933, 935, 937, 
	939, 941, 943, 945, 947, 949, 951, 953, 
	955, 957, 959, 961, 963, 965, 967, 969, 
	971, 973, 975, 978, 980, 983, 985, 987, 
	989, 991, 993, 995, 997, 999, 1001, 1003, 
	1005, 1007, 1009, 1011, 1013, 1015, 1017, 1019, 
	1021, 1023, 1025, 1027, 1029, 1031, 1033, 1035, 
	1037, 1039, 1041, 1043, 1045, 1046, 1047
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	75, 78, 79, 80, 83, 90, 124, 239, 
	9, 13, 10, 32, 34, 35, 37, 42, 
	64, 65, 75, 78, 79, 80, 83, 90, 
	124, 9, 13, 34, 34, 10, 13, 10, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 9, 
	13, 10, 32, 9, 13, 10, 13, 10, 
	95, 70, 69, 65, 84, 85, 82, 69, 
	95, 69, 78, 68, 95, 37, 32, 10, 
	13, 10, 13, 13, 32, 64, 9, 10, 
	9, 10, 13, 32, 64, 11, 12, 10, 
	32, 64, 9, 13, 32, 108, 10, 13, 
	116, 10, 13, 97, 10, 13, 107, -61, 
	10, 13, -87, 10, 13, 10, 13, 32, 
	101, 100, 111, 121, -59, -66, 110, 116, 
	101, 120, 116, 58, 10, 10, 10, 32, 
	35, 37, 42, 64, 65, 75, 78, 79, 
	80, 83, 90, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 32, 10, 32, 34, 35, 37, 
	42, 64, 65, 75, 78, 79, 80, 83, 
	90, 124, 9, 13, -61, -95, -60, -115, 
	114, 116, 32, 83, 99, -61, -87, 110, 
	-61, -95, -59, -103, 101, 58, 10, 10, 
	10, 32, 35, 37, 42, 64, 65, 75, 
	80, 83, 90, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 32, 10, 32, 108, 10, 32, 
	34, 35, 37, 42, 64, 65, 75, 78, 
	79, 80, 83, 90, 116, 124, 9, 13, 
	115, 110, 111, 118, 97, 32, 115, -59, 
	97, 111, -103, -61, -83, 107, 108, 97, 
	100, 121, 58, 10, 10, 10, 32, 35, 
	80, 124, 9, 13, 10, 111, -59, 10, 
	-66, 10, 10, 97, 10, 100, 10, 97, 
	10, 118, 10, 101, 10, 107, 10, 58, 
	107, -59, 107, 122, -66, 97, 100, 97, 
	118, 101, 107, 58, 10, 10, 10, 32, 
	35, 37, 64, 75, 78, 79, 80, 83, 
	9, 13, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 111, 
	10, 110, 10, 116, 10, 101, 10, 120, 
	10, 116, 10, 58, -61, 10, -95, 10, 
	-60, 10, -115, 10, 10, 114, 10, 116, 
	10, 32, 10, 83, 10, 99, -61, 10, 
	-87, 10, 10, 110, -61, 10, -95, 10, 
	-59, 10, -103, 10, 10, 101, 10, 115, 
	10, 110, 10, 111, 10, 118, 10, 97, 
	10, 32, 10, 115, -59, 10, 111, -103, 
	10, -61, 10, -83, 10, 10, 107, 10, 
	108, 10, 97, 10, 100, 10, 121, -59, 
	10, 122, -66, 10, 10, 97, 10, 100, 
	10, 97, 10, 118, 10, 101, 10, 107, 
	10, 97, 10, 100, -61, 10, -83, 10, 
	10, 99, -61, 10, -87, 10, 10, 110, 
	-61, 10, -95, 10, -59, 10, -103, 10, 
	117, 100, 97, 100, -61, -83, 99, -61, 
	-87, 110, -61, -95, -59, -103, 58, 10, 
	10, 10, 32, 35, 37, 42, 64, 65, 
	75, 78, 79, 80, 83, 90, 9, 13, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 32, 10, 32, 
	108, 10, 32, 34, 35, 37, 42, 64, 
	65, 75, 78, 79, 80, 83, 90, 116, 
	124, 9, 13, 97, 32, 112, -59, -103, 
	101, 100, 112, 111, 107, 108, 97, 100, 
	117, 97, 107, -61, -87, 32, 32, 124, 
	9, 13, 10, 32, 92, 124, 9, 13, 
	10, 92, 124, 10, 92, 10, 32, 92, 
	124, 9, 13, 10, 32, 34, 35, 37, 
	42, 64, 65, 75, 78, 79, 80, 83, 
	90, 124, 9, 13, 10, 101, 10, 100, 
	111, 10, 121, -59, 10, -66, 10, 10, 
	110, 10, 116, 10, 101, 10, 120, 10, 
	116, 10, 58, -61, 10, -95, 10, -60, 
	10, -115, 10, 10, 114, 10, 116, 10, 
	32, 10, 83, 10, 99, -61, 10, -87, 
	10, 10, 110, -61, 10, -95, 10, -59, 
	10, -103, 10, 10, 101, 10, 115, 10, 
	110, 10, 111, 10, 118, 10, 97, 10, 
	32, 10, 115, 10, 97, 111, 10, 107, 
	-59, 10, 107, 122, -66, 10, 10, 97, 
	10, 100, 10, 97, 10, 118, 10, 101, 
	10, 107, 10, 117, 10, 100, 10, 97, 
	10, 100, -61, 10, -83, 10, 10, 99, 
	-61, 10, -87, 10, 10, 110, -61, 10, 
	-95, 10, -59, 10, -103, 10, 10, 97, 
	10, 32, 10, 112, -59, 10, -103, 10, 
	10, 101, 10, 100, 10, 112, 10, 111, 
	10, 107, 10, 108, 10, 97, 10, 100, 
	10, 117, 97, 107, -61, -87, 32, 10, 
	101, 10, 100, 10, 121, -59, 10, -66, 
	10, 10, 97, 111, 10, 107, -59, 10, 
	107, -66, 10, 10, 97, 10, 100, 10, 
	97, 10, 118, 10, 101, 10, 107, 10, 
	58, 10, 117, 10, 100, 10, 99, -61, 
	10, -87, 10, 10, 110, -61, 10, -95, 
	10, -59, 10, -103, 10, 10, 97, 10, 
	32, 10, 112, -59, 10, -103, 10, 10, 
	101, 10, 100, 10, 112, 10, 111, 10, 
	107, 10, 108, 10, 97, 10, 100, 10, 
	117, 10, 32, 108, 10, 32, 34, 35, 
	37, 42, 64, 65, 75, 78, 79, 80, 
	83, 90, 116, 124, 9, 13, 97, 107, 
	-61, -87, 32, 10, 101, 10, 100, 10, 
	121, -59, 10, -66, 10, -61, 10, -95, 
	10, -60, 10, -115, 10, 10, 114, 10, 
	116, 10, 32, 10, 83, 10, 99, -61, 
	10, -87, 10, 10, 110, -61, 10, -95, 
	10, -59, 10, -103, 10, 10, 101, 10, 
	58, 10, 115, 10, 110, 10, 111, 10, 
	118, 10, 97, 10, 32, 10, 115, 10, 
	97, 111, 10, 107, -59, 10, 107, -66, 
	10, 10, 97, 10, 100, 10, 97, 10, 
	118, 10, 101, 10, 107, 10, 117, 10, 
	100, 10, 99, -61, 10, -87, 10, 10, 
	110, -61, 10, -95, 10, -59, 10, -103, 
	10, 10, 97, 10, 32, 10, 112, -59, 
	10, -103, 10, 10, 101, 10, 100, 10, 
	112, 10, 111, 10, 107, 10, 108, 10, 
	97, 10, 100, 10, 117, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 16, 15, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 2, 3, 3, 3, 3, 
	3, 3, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 13, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 15, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 11, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 16, 1, 1, 
	1, 1, 1, 1, 1, 3, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 5, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 3, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	10, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 13, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 16, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 4, 3, 2, 4, 15, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 4, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 2, 2, 2, 
	2, 2, 3, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 16, 1, 
	1, 1, 1, 1, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 18, 35, 37, 39, 42, 45, 
	50, 55, 60, 65, 69, 73, 76, 78, 
	80, 82, 84, 86, 88, 90, 92, 94, 
	96, 98, 100, 102, 104, 106, 108, 111, 
	114, 119, 126, 131, 134, 138, 142, 146, 
	150, 154, 158, 160, 163, 165, 167, 169, 
	171, 173, 175, 177, 179, 181, 183, 185, 
	200, 203, 206, 209, 212, 215, 218, 221, 
	224, 227, 230, 233, 236, 239, 242, 245, 
	262, 264, 266, 268, 270, 272, 274, 276, 
	278, 280, 282, 284, 286, 288, 290, 292, 
	294, 296, 298, 300, 302, 315, 318, 321, 
	324, 327, 330, 333, 336, 339, 342, 345, 
	348, 351, 354, 357, 360, 364, 382, 384, 
	386, 388, 390, 392, 394, 396, 400, 402, 
	404, 406, 408, 410, 412, 414, 416, 418, 
	420, 422, 429, 432, 435, 438, 441, 444, 
	447, 450, 453, 456, 459, 461, 465, 467, 
	469, 471, 473, 475, 477, 479, 481, 483, 
	485, 497, 500, 503, 506, 509, 512, 515, 
	518, 521, 524, 527, 530, 533, 536, 539, 
	542, 545, 548, 551, 554, 557, 560, 563, 
	566, 569, 572, 575, 578, 581, 584, 587, 
	590, 593, 596, 599, 602, 605, 608, 611, 
	614, 617, 620, 623, 626, 629, 632, 636, 
	639, 642, 645, 648, 651, 654, 657, 660, 
	664, 667, 670, 673, 676, 679, 682, 685, 
	688, 691, 694, 697, 700, 703, 706, 709, 
	712, 715, 718, 721, 723, 725, 727, 729, 
	731, 733, 735, 737, 739, 741, 743, 745, 
	747, 749, 751, 753, 755, 770, 773, 776, 
	779, 782, 785, 788, 791, 794, 797, 800, 
	803, 806, 809, 812, 815, 819, 837, 839, 
	841, 843, 845, 847, 849, 851, 853, 855, 
	857, 859, 861, 863, 865, 867, 869, 871, 
	873, 875, 879, 885, 889, 892, 898, 915, 
	918, 922, 925, 928, 931, 934, 937, 940, 
	943, 946, 949, 952, 955, 958, 961, 964, 
	967, 970, 973, 976, 979, 982, 985, 988, 
	991, 994, 997, 1000, 1003, 1006, 1009, 1012, 
	1015, 1018, 1021, 1025, 1028, 1033, 1036, 1039, 
	1042, 1045, 1048, 1051, 1054, 1057, 1060, 1063, 
	1066, 1069, 1072, 1075, 1078, 1081, 1084, 1087, 
	1090, 1093, 1096, 1099, 1102, 1105, 1108, 1111, 
	1114, 1117, 1120, 1123, 1126, 1129, 1132, 1135, 
	1138, 1140, 1142, 1144, 1146, 1148, 1151, 1154, 
	1157, 1160, 1163, 1167, 1170, 1174, 1177, 1180, 
	1183, 1186, 1189, 1192, 1195, 1198, 1201, 1204, 
	1207, 1210, 1213, 1216, 1219, 1222, 1225, 1228, 
	1231, 1234, 1237, 1240, 1243, 1246, 1249, 1252, 
	1255, 1258, 1261, 1264, 1267, 1270, 1274, 1292, 
	1294, 1296, 1298, 1300, 1302, 1305, 1308, 1311, 
	1314, 1317, 1320, 1323, 1326, 1329, 1332, 1335, 
	1338, 1341, 1344, 1347, 1350, 1353, 1356, 1359, 
	1362, 1365, 1368, 1371, 1374, 1377, 1380, 1383, 
	1386, 1389, 1392, 1396, 1399, 1403, 1406, 1409, 
	1412, 1415, 1418, 1421, 1424, 1427, 1430, 1433, 
	1436, 1439, 1442, 1445, 1448, 1451, 1454, 1457, 
	1460, 1463, 1466, 1469, 1472, 1475, 1478, 1481, 
	1484, 1487, 1490, 1493, 1496, 1498, 1500
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	1, 0, 2, 1, 3, 4, 5, 6, 
	7, 8, 9, 10, 11, 12, 13, 14, 
	15, 1, 0, 17, 0, 18, 0, 20, 
	21, 19, 23, 24, 22, 27, 26, 28, 
	26, 25, 31, 30, 32, 30, 29, 31, 
	30, 33, 30, 29, 31, 30, 34, 30, 
	29, 36, 35, 35, 0, 2, 37, 37, 
	0, 39, 40, 38, 2, 0, 41, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 55, 0, 57, 58, 56, 60, 
	61, 59, 0, 0, 0, 0, 62, 63, 
	64, 63, 63, 66, 65, 62, 2, 67, 
	7, 67, 0, 68, 69, 0, 57, 58, 
	70, 56, 60, 61, 71, 59, 60, 61, 
	72, 59, 73, 60, 61, 59, 74, 60, 
	61, 59, 60, 61, 55, 59, 75, 0, 
	76, 77, 0, 78, 0, 79, 0, 75, 
	0, 80, 0, 81, 0, 82, 0, 83, 
	0, 84, 0, 85, 0, 87, 86, 89, 
	88, 89, 90, 91, 92, 93, 91, 94, 
	95, 96, 97, 98, 99, 100, 90, 88, 
	89, 101, 88, 89, 102, 88, 89, 103, 
	88, 89, 104, 88, 89, 105, 88, 89, 
	106, 88, 89, 107, 88, 89, 108, 88, 
	89, 109, 88, 89, 110, 88, 89, 111, 
	88, 89, 112, 88, 89, 113, 88, 89, 
	114, 88, 89, 115, 88, 117, 116, 118, 
	119, 120, 121, 122, 123, 124, 125, 126, 
	127, 128, 129, 130, 116, 0, 131, 0, 
	132, 0, 133, 0, 134, 0, 135, 0, 
	136, 0, 137, 0, 138, 0, 139, 0, 
	140, 0, 141, 0, 142, 0, 143, 0, 
	144, 0, 145, 0, 146, 0, 147, 0, 
	148, 0, 150, 149, 152, 151, 152, 153, 
	154, 155, 156, 154, 157, 158, 159, 160, 
	161, 153, 151, 152, 162, 151, 152, 163, 
	151, 152, 164, 151, 152, 165, 151, 152, 
	166, 151, 152, 167, 151, 152, 168, 151, 
	152, 169, 151, 152, 170, 151, 152, 171, 
	151, 152, 172, 151, 152, 173, 151, 152, 
	174, 151, 152, 175, 151, 152, 176, 151, 
	152, 177, 178, 151, 117, 116, 118, 119, 
	120, 121, 122, 123, 124, 125, 126, 127, 
	128, 129, 179, 130, 116, 0, 180, 0, 
	181, 0, 182, 0, 183, 0, 184, 0, 
	185, 0, 138, 0, 186, 187, 188, 0, 
	189, 0, 190, 0, 191, 0, 192, 0, 
	193, 0, 194, 0, 195, 0, 196, 0, 
	197, 0, 199, 198, 201, 200, 201, 202, 
	203, 204, 203, 202, 200, 201, 205, 200, 
	206, 201, 200, 207, 201, 200, 201, 208, 
	200, 201, 209, 200, 201, 210, 200, 201, 
	211, 200, 201, 212, 200, 201, 213, 200, 
	201, 214, 200, 75, 0, 215, 216, 217, 
	0, 218, 0, 219, 0, 220, 0, 221, 
	0, 222, 0, 223, 0, 224, 0, 225, 
	0, 227, 226, 229, 228, 229, 230, 231, 
	232, 231, 233, 234, 235, 236, 237, 230, 
	228, 229, 238, 228, 229, 239, 228, 229, 
	240, 228, 229, 241, 228, 229, 242, 228, 
	229, 243, 228, 229, 244, 228, 229, 245, 
	228, 229, 246, 228, 229, 247, 228, 229, 
	248, 228, 229, 249, 228, 229, 250, 228, 
	229, 251, 228, 229, 252, 228, 229, 253, 
	228, 229, 254, 228, 229, 255, 228, 229, 
	256, 228, 229, 257, 228, 229, 258, 228, 
	259, 229, 228, 260, 229, 228, 261, 229, 
	228, 262, 229, 228, 229, 263, 228, 229, 
	264, 228, 229, 265, 228, 229, 266, 228, 
	229, 267, 228, 268, 229, 228, 269, 229, 
	228, 229, 270, 228, 271, 229, 228, 272, 
	229, 228, 273, 229, 228, 274, 229, 228, 
	229, 257, 228, 229, 275, 228, 229, 276, 
	228, 229, 277, 228, 229, 278, 228, 229, 
	279, 228, 229, 280, 228, 229, 266, 228, 
	281, 229, 282, 228, 283, 229, 228, 284, 
	229, 228, 285, 229, 228, 229, 286, 228, 
	229, 287, 228, 229, 288, 228, 229, 289, 
	228, 229, 257, 228, 290, 229, 291, 228, 
	292, 229, 228, 229, 293, 228, 229, 294, 
	228, 229, 295, 228, 229, 296, 228, 229, 
	297, 228, 229, 257, 228, 229, 298, 228, 
	229, 299, 228, 300, 229, 228, 257, 229, 
	228, 229, 301, 228, 302, 229, 228, 303, 
	229, 228, 229, 304, 228, 305, 229, 228, 
	306, 229, 228, 307, 229, 228, 257, 229, 
	228, 308, 0, 75, 0, 309, 0, 310, 
	0, 311, 0, 84, 0, 312, 0, 313, 
	0, 314, 0, 315, 0, 316, 0, 317, 
	0, 318, 0, 319, 0, 320, 0, 322, 
	321, 324, 323, 324, 325, 326, 327, 328, 
	326, 329, 330, 331, 332, 333, 334, 335, 
	325, 323, 324, 336, 323, 324, 337, 323, 
	324, 338, 323, 324, 339, 323, 324, 340, 
	323, 324, 341, 323, 324, 342, 323, 324, 
	343, 323, 324, 344, 323, 324, 345, 323, 
	324, 346, 323, 324, 347, 323, 324, 348, 
	323, 324, 349, 323, 324, 350, 323, 324, 
	351, 352, 323, 117, 116, 118, 119, 120, 
	121, 122, 123, 124, 125, 126, 127, 128, 
	129, 353, 130, 116, 0, 354, 0, 355, 
	0, 356, 0, 357, 0, 358, 0, 359, 
	0, 360, 0, 361, 0, 362, 0, 363, 
	0, 364, 0, 365, 0, 366, 0, 75, 
	0, 367, 0, 368, 0, 369, 0, 370, 
	0, 350, 0, 371, 372, 371, 0, 375, 
	374, 376, 377, 374, 373, 0, 379, 380, 
	378, 0, 379, 378, 375, 381, 379, 380, 
	381, 378, 375, 382, 383, 384, 385, 386, 
	387, 388, 389, 390, 391, 392, 393, 394, 
	395, 382, 0, 324, 396, 323, 324, 397, 
	398, 323, 324, 399, 323, 400, 324, 323, 
	396, 324, 323, 324, 401, 323, 324, 402, 
	323, 324, 403, 323, 324, 404, 323, 324, 
	405, 323, 324, 350, 323, 406, 324, 323, 
	407, 324, 323, 408, 324, 323, 409, 324, 
	323, 324, 410, 323, 324, 411, 323, 324, 
	412, 323, 324, 413, 323, 324, 414, 323, 
	415, 324, 323, 416, 324, 323, 324, 417, 
	323, 418, 324, 323, 419, 324, 323, 420, 
	324, 323, 421, 324, 323, 324, 405, 323, 
	324, 422, 323, 324, 423, 323, 324, 424, 
	323, 324, 425, 323, 324, 426, 323, 324, 
	427, 323, 324, 413, 323, 324, 428, 429, 
	323, 324, 396, 323, 430, 324, 431, 432, 
	323, 433, 324, 323, 324, 434, 323, 324, 
	435, 323, 324, 436, 323, 324, 437, 323, 
	324, 438, 323, 324, 405, 323, 324, 439, 
	323, 324, 396, 323, 324, 440, 323, 324, 
	441, 323, 442, 324, 323, 405, 324, 323, 
	324, 443, 323, 444, 324, 323, 445, 324, 
	323, 324, 446, 323, 447, 324, 323, 448, 
	324, 323, 449, 324, 323, 405, 324, 323, 
	324, 450, 323, 324, 451, 323, 324, 452, 
	323, 453, 324, 323, 454, 324, 323, 324, 
	455, 323, 324, 456, 323, 324, 457, 323, 
	324, 458, 323, 324, 459, 323, 324, 460, 
	323, 324, 461, 323, 324, 462, 323, 324, 
	396, 323, 463, 0, 464, 0, 465, 0, 
	466, 0, 176, 0, 152, 467, 151, 152, 
	468, 151, 152, 469, 151, 470, 152, 151, 
	467, 152, 151, 152, 471, 472, 151, 152, 
	467, 151, 473, 152, 474, 151, 475, 152, 
	151, 152, 476, 151, 152, 477, 151, 152, 
	478, 151, 152, 479, 151, 152, 480, 151, 
	152, 481, 151, 152, 176, 151, 152, 482, 
	151, 152, 467, 151, 152, 483, 151, 484, 
	152, 151, 485, 152, 151, 152, 486, 151, 
	487, 152, 151, 488, 152, 151, 489, 152, 
	151, 481, 152, 151, 152, 490, 151, 152, 
	491, 151, 152, 492, 151, 493, 152, 151, 
	494, 152, 151, 152, 495, 151, 152, 496, 
	151, 152, 497, 151, 152, 498, 151, 152, 
	499, 151, 152, 500, 151, 152, 501, 151, 
	152, 502, 151, 152, 467, 151, 89, 503, 
	504, 88, 117, 116, 118, 119, 120, 121, 
	122, 123, 124, 125, 126, 127, 128, 129, 
	505, 130, 116, 0, 506, 0, 507, 0, 
	508, 0, 509, 0, 115, 0, 89, 510, 
	88, 89, 511, 88, 89, 512, 88, 513, 
	89, 88, 510, 89, 88, 514, 89, 88, 
	515, 89, 88, 516, 89, 88, 517, 89, 
	88, 89, 518, 88, 89, 519, 88, 89, 
	520, 88, 89, 521, 88, 89, 522, 88, 
	523, 89, 88, 524, 89, 88, 89, 525, 
	88, 526, 89, 88, 527, 89, 88, 528, 
	89, 88, 529, 89, 88, 89, 530, 88, 
	89, 115, 88, 89, 531, 88, 89, 532, 
	88, 89, 533, 88, 89, 534, 88, 89, 
	535, 88, 89, 536, 88, 89, 521, 88, 
	89, 537, 538, 88, 89, 510, 88, 539, 
	89, 540, 88, 541, 89, 88, 89, 542, 
	88, 89, 543, 88, 89, 544, 88, 89, 
	545, 88, 89, 546, 88, 89, 530, 88, 
	89, 547, 88, 89, 510, 88, 89, 548, 
	88, 549, 89, 88, 550, 89, 88, 89, 
	551, 88, 552, 89, 88, 553, 89, 88, 
	554, 89, 88, 530, 89, 88, 89, 555, 
	88, 89, 556, 88, 89, 557, 88, 558, 
	89, 88, 559, 89, 88, 89, 560, 88, 
	89, 561, 88, 89, 562, 88, 89, 563, 
	88, 89, 564, 88, 89, 565, 88, 89, 
	566, 88, 89, 567, 88, 89, 510, 88, 
	568, 0, 1, 0, 569, 0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 43, 72, 110, 117, 233, 262, 281, 
	476, 4, 5, 6, 7, 6, 6, 7, 
	6, 8, 8, 8, 9, 8, 8, 8, 
	9, 10, 11, 12, 2, 12, 13, 2, 
	14, 16, 17, 18, 19, 20, 21, 22, 
	23, 24, 25, 26, 27, 28, 478, 30, 
	31, 2, 14, 31, 2, 14, 33, 34, 
	2, 33, 32, 34, 36, 42, 37, 38, 
	39, 40, 41, 29, 44, 47, 45, 46, 
	48, 49, 50, 51, 52, 53, 54, 55, 
	54, 55, 55, 2, 56, 70, 405, 413, 
	417, 435, 442, 454, 462, 57, 58, 59, 
	60, 61, 62, 63, 64, 65, 66, 67, 
	68, 69, 2, 71, 2, 2, 3, 13, 
	15, 29, 32, 35, 43, 72, 110, 117, 
	233, 262, 281, 73, 74, 75, 76, 77, 
	78, 79, 80, 81, 82, 83, 84, 85, 
	86, 87, 88, 89, 90, 91, 92, 91, 
	92, 92, 2, 93, 107, 108, 366, 370, 
	383, 391, 94, 95, 96, 97, 98, 99, 
	100, 101, 102, 103, 104, 105, 106, 2, 
	71, 109, 365, 360, 111, 112, 113, 114, 
	115, 116, 118, 140, 141, 119, 120, 121, 
	122, 123, 124, 125, 126, 127, 128, 129, 
	128, 129, 129, 2, 130, 131, 132, 133, 
	134, 135, 136, 137, 138, 139, 71, 142, 
	227, 229, 143, 144, 145, 146, 147, 148, 
	149, 150, 151, 152, 151, 152, 152, 2, 
	153, 167, 174, 191, 198, 219, 154, 155, 
	156, 157, 158, 159, 160, 161, 162, 163, 
	164, 165, 166, 2, 168, 169, 170, 171, 
	172, 173, 71, 175, 176, 177, 178, 179, 
	180, 181, 182, 183, 184, 185, 186, 187, 
	188, 189, 190, 192, 193, 194, 195, 196, 
	197, 199, 207, 200, 201, 202, 203, 204, 
	205, 206, 208, 215, 209, 210, 211, 212, 
	213, 214, 216, 217, 218, 220, 221, 222, 
	223, 224, 225, 226, 228, 230, 231, 232, 
	234, 235, 236, 237, 238, 239, 240, 241, 
	242, 243, 244, 243, 244, 244, 2, 245, 
	259, 260, 288, 298, 315, 322, 338, 346, 
	246, 247, 248, 249, 250, 251, 252, 253, 
	254, 255, 256, 257, 258, 2, 71, 261, 
	287, 276, 263, 264, 265, 266, 267, 268, 
	269, 270, 271, 272, 273, 274, 275, 277, 
	278, 279, 280, 281, 282, 283, 285, 286, 
	284, 282, 283, 284, 282, 285, 286, 3, 
	13, 15, 29, 32, 35, 43, 72, 110, 
	117, 233, 262, 281, 259, 289, 292, 290, 
	291, 293, 294, 295, 296, 297, 299, 300, 
	301, 302, 303, 304, 305, 306, 307, 308, 
	309, 310, 311, 312, 313, 314, 316, 317, 
	318, 319, 320, 321, 323, 324, 325, 332, 
	334, 326, 327, 328, 329, 330, 331, 333, 
	335, 336, 337, 339, 340, 341, 342, 343, 
	344, 345, 347, 348, 349, 350, 351, 352, 
	353, 354, 355, 356, 357, 358, 359, 361, 
	362, 363, 364, 107, 367, 368, 369, 371, 
	372, 373, 381, 374, 375, 376, 377, 378, 
	379, 380, 382, 384, 385, 386, 387, 388, 
	389, 390, 392, 393, 394, 395, 396, 397, 
	398, 399, 400, 401, 402, 403, 404, 406, 
	412, 407, 408, 409, 410, 411, 70, 414, 
	415, 416, 418, 419, 420, 421, 422, 423, 
	424, 425, 426, 427, 428, 429, 430, 431, 
	432, 433, 434, 436, 437, 438, 439, 440, 
	441, 443, 444, 445, 452, 446, 447, 448, 
	449, 450, 451, 453, 455, 456, 457, 458, 
	459, 460, 461, 463, 464, 465, 466, 467, 
	468, 469, 470, 471, 472, 473, 474, 475, 
	477, 0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 35, 
	0, 0, 0, 7, 139, 48, 0, 102, 
	9, 5, 45, 134, 45, 0, 33, 122, 
	33, 33, 0, 11, 106, 0, 0, 114, 
	25, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 149, 126, 0, 110, 23, 0, 27, 
	118, 27, 51, 0, 0, 0, 57, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 0, 72, 33, 84, 84, 84, 
	84, 84, 84, 84, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 15, 15, 31, 130, 60, 57, 
	31, 63, 57, 63, 63, 63, 63, 63, 
	63, 63, 66, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 0, 78, 33, 84, 84, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 19, 
	19, 19, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 0, 81, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 21, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 144, 0, 54, 0, 69, 
	33, 84, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 13, 0, 0, 0, 0, 
	0, 0, 13, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 144, 0, 54, 0, 75, 33, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 17, 17, 17, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 37, 37, 54, 
	37, 87, 0, 0, 39, 0, 0, 93, 
	90, 41, 96, 90, 96, 96, 96, 96, 
	96, 96, 96, 99, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 15, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 478;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/cs.js.rl" */

/* line 130 "ragel/i18n/cs.js.rl" */

/* line 131 "ragel/i18n/cs.js.rl" */

/* line 132 "ragel/i18n/cs.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 871 "js/lib/gherkin/lexer/cs.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/cs.js.rl" */
  
/* line 878 "js/lib/gherkin/lexer/cs.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/cs.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/cs.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/cs.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/cs.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/cs.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/cs.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/cs.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/cs.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/cs.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/cs.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/cs.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/cs.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/cs.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/cs.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/cs.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/cs.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/cs.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/cs.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/cs.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/cs.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/cs.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/cs.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/cs.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/cs.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1105 "js/lib/gherkin/lexer/cs.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/cs.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1144 "js/lib/gherkin/lexer/cs.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/cs.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/cs', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/cs', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();
