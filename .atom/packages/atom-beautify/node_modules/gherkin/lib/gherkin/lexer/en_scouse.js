
/* line 1 "ragel/i18n/en_scouse.js.rl" */
;(function() {


/* line 126 "ragel/i18n/en_scouse.js.rl" */



/* line 11 "js/lib/gherkin/lexer/en_scouse.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 20, 39, 40, 41, 43, 45, 
	50, 55, 60, 65, 69, 73, 75, 76, 
	77, 78, 79, 80, 81, 82, 83, 84, 
	85, 86, 87, 88, 89, 90, 91, 93, 
	95, 100, 107, 112, 113, 114, 115, 118, 
	119, 120, 121, 122, 123, 124, 125, 126, 
	127, 128, 129, 130, 131, 132, 133, 134, 
	135, 136, 137, 138, 139, 140, 141, 142, 
	143, 144, 145, 146, 147, 148, 149, 150, 
	151, 152, 153, 169, 171, 173, 175, 177, 
	179, 181, 183, 185, 187, 189, 191, 193, 
	195, 197, 199, 218, 219, 220, 221, 222, 
	223, 224, 225, 226, 227, 228, 235, 237, 
	239, 241, 243, 245, 247, 249, 250, 251, 
	252, 253, 254, 255, 256, 257, 258, 270, 
	272, 274, 276, 278, 280, 282, 284, 286, 
	288, 290, 292, 294, 296, 298, 300, 302, 
	304, 306, 308, 310, 312, 314, 316, 318, 
	320, 322, 324, 326, 328, 330, 332, 334, 
	336, 338, 340, 342, 344, 346, 348, 350, 
	352, 354, 356, 358, 360, 362, 364, 366, 
	368, 370, 372, 374, 376, 378, 380, 382, 
	384, 386, 388, 390, 392, 394, 396, 398, 
	400, 402, 404, 406, 408, 410, 412, 414, 
	416, 417, 418, 419, 420, 421, 422, 423, 
	424, 425, 426, 427, 428, 429, 430, 431, 
	432, 433, 434, 435, 436, 437, 438, 439, 
	455, 457, 459, 461, 463, 465, 467, 469, 
	471, 473, 475, 477, 479, 481, 483, 485, 
	487, 489, 491, 495, 497, 499, 501, 503, 
	505, 507, 509, 511, 513, 515, 517, 519, 
	521, 523, 525, 527, 529, 531, 533, 535, 
	537, 539, 541, 543, 545, 547, 549, 551, 
	553, 555, 557, 559, 561, 563, 565, 567, 
	569, 571, 573, 575, 577, 579, 581, 583, 
	585, 587, 589, 591, 593, 595, 597, 599, 
	601, 603, 605, 607, 609, 611, 613, 616, 
	618, 620, 622, 624, 626, 628, 630, 632, 
	634, 636, 638, 640, 642, 644, 646, 648, 
	650, 652, 655, 657, 659, 661, 663, 665, 
	667, 669, 671, 673, 675, 677, 679, 681, 
	683, 685, 687, 689, 691, 693, 695, 697, 
	698, 699, 700, 701, 702, 703, 704, 705, 
	706, 707, 708, 709, 710, 711, 727, 729, 
	731, 733, 735, 737, 739, 741, 743, 745, 
	747, 749, 751, 753, 755, 757, 759, 761, 
	763, 766, 768, 770, 772, 774, 776, 778, 
	780, 782, 784, 786, 788, 790, 792, 794, 
	796, 798, 800, 802, 804, 806, 808, 810, 
	812, 814, 816, 818, 820, 822, 824, 826, 
	828, 830, 832, 834, 836, 838, 840, 842, 
	844, 846, 848, 850, 852, 854, 856, 858, 
	860, 862, 864, 866, 869, 871, 873, 875, 
	877, 879, 881, 883, 885, 887, 889, 891, 
	893, 895, 897, 899, 901, 903, 905, 907, 
	909, 910, 911, 912, 913, 914, 915, 916, 
	917, 918, 919, 921, 922, 923, 924, 925, 
	926, 927, 928, 929, 930, 931, 932, 933, 
	934, 935, 936, 937, 938, 939, 940, 941, 
	945, 951, 954, 956, 962, 981, 983, 985, 
	987, 990, 992, 994, 996, 998, 1000, 1002, 
	1004, 1006, 1008, 1010, 1012, 1014, 1016, 1018, 
	1020, 1022, 1024, 1026, 1028, 1030, 1032, 1034, 
	1036, 1038, 1040, 1042, 1044, 1046, 1048, 1050, 
	1052, 1054, 1056, 1058, 1060, 1062, 1064, 1066, 
	1068, 1070, 1073, 1075, 1077, 1079, 1081, 1083, 
	1085, 1087, 1089, 1091, 1093, 1095, 1097, 1099, 
	1101, 1103, 1105, 1107, 1109, 1112, 1114, 1116, 
	1118, 1120, 1122, 1124, 1126, 1128, 1130, 1132, 
	1134, 1136, 1138, 1140, 1142, 1144, 1146, 1148, 
	1150, 1152, 1153, 1154
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	66, 68, 69, 70, 71, 84, 87, 89, 
	124, 239, 9, 13, 10, 32, 34, 35, 
	37, 42, 64, 65, 66, 68, 69, 70, 
	71, 84, 87, 89, 124, 9, 13, 34, 
	34, 10, 13, 10, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 9, 13, 10, 32, 9, 
	13, 10, 13, 10, 95, 70, 69, 65, 
	84, 85, 82, 69, 95, 69, 78, 68, 
	95, 37, 32, 10, 13, 10, 13, 13, 
	32, 64, 9, 10, 9, 10, 13, 32, 
	64, 11, 12, 10, 32, 64, 9, 13, 
	110, 117, 104, 101, 105, 117, 110, 32, 
	121, 111, 117, 115, 101, 32, 103, 111, 
	116, 116, 97, 115, 32, 105, 115, 32, 
	119, 104, 97, 116, 32, 119, 101, 110, 
	116, 32, 100, 111, 119, 110, 58, 10, 
	10, 10, 32, 35, 37, 42, 64, 65, 
	66, 68, 70, 71, 84, 87, 89, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 32, 10, 
	32, 34, 35, 37, 42, 64, 65, 66, 
	68, 69, 70, 71, 84, 87, 89, 124, 
	9, 13, 120, 97, 109, 112, 108, 101, 
	115, 58, 10, 10, 10, 32, 35, 70, 
	124, 9, 13, 10, 101, 10, 97, 10, 
	116, 10, 117, 10, 114, 10, 101, 10, 
	58, 101, 97, 116, 117, 114, 101, 58, 
	10, 10, 10, 32, 35, 37, 64, 68, 
	69, 70, 84, 87, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 105, 10, 115, 10, 32, 
	10, 105, 10, 115, 10, 32, 10, 119, 
	10, 104, 10, 97, 10, 116, 10, 32, 
	10, 119, 10, 101, 10, 110, 10, 116, 
	10, 32, 10, 100, 10, 111, 10, 119, 
	10, 110, 10, 58, 10, 120, 10, 97, 
	10, 109, 10, 112, 10, 108, 10, 101, 
	10, 115, 10, 101, 10, 97, 10, 116, 
	10, 117, 10, 114, 10, 101, 10, 104, 
	10, 101, 10, 32, 10, 116, 10, 104, 
	10, 105, 10, 110, 10, 103, 10, 32, 
	10, 111, 10, 102, 10, 32, 10, 105, 
	10, 116, 10, 32, 10, 105, 10, 104, 
	10, 97, 10, 114, 10, 114, 10, 105, 
	10, 109, 10, 101, 10, 97, 10, 110, 
	105, 118, 117, 104, 101, 32, 116, 104, 
	105, 110, 103, 32, 111, 102, 32, 105, 
	116, 32, 105, 115, 58, 10, 10, 10, 
	32, 35, 37, 42, 64, 65, 66, 68, 
	70, 71, 84, 87, 89, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, 10, 110, 10, 
	117, 10, 104, 10, 101, 105, 117, 10, 
	110, 10, 32, 10, 121, 10, 111, 10, 
	117, 10, 115, 10, 101, 10, 32, 10, 
	103, 10, 111, 10, 116, 10, 116, 10, 
	97, 10, 115, 10, 32, 10, 105, 10, 
	115, 10, 32, 10, 119, 10, 104, 10, 
	97, 10, 116, 10, 32, 10, 119, 10, 
	101, 10, 110, 10, 116, 10, 32, 10, 
	100, 10, 111, 10, 119, 10, 110, 10, 
	58, 10, 101, 10, 97, 10, 116, 10, 
	117, 10, 114, 10, 101, 10, 105, 10, 
	118, 10, 117, 10, 104, 10, 101, 10, 
	32, 10, 116, 10, 104, 10, 105, 10, 
	110, 10, 103, 10, 32, 10, 111, 10, 
	102, 10, 32, 10, 105, 10, 116, 10, 
	32, 10, 105, 10, 115, 10, 104, 117, 
	10, 97, 10, 114, 10, 114, 10, 105, 
	10, 109, 10, 101, 10, 97, 10, 110, 
	10, 111, 10, 117, 10, 115, 10, 101, 
	10, 32, 10, 107, 10, 110, 10, 111, 
	10, 119, 10, 32, 10, 108, 119, 10, 
	105, 10, 107, 10, 101, 10, 32, 10, 
	119, 10, 104, 10, 101, 10, 104, 10, 
	101, 10, 110, 10, 32, 10, 121, 10, 
	111, 10, 117, 10, 115, 10, 101, 10, 
	32, 10, 103, 10, 111, 10, 116, 104, 
	117, 97, 114, 114, 105, 109, 101, 97, 
	110, 32, 105, 115, 58, 10, 10, 10, 
	32, 35, 37, 42, 64, 65, 66, 68, 
	70, 71, 84, 87, 89, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, 10, 110, 10, 
	117, 10, 104, 10, 101, 117, 10, 110, 
	10, 32, 10, 121, 10, 111, 10, 117, 
	10, 115, 10, 101, 10, 32, 10, 103, 
	10, 111, 10, 116, 10, 116, 10, 97, 
	10, 101, 10, 97, 10, 116, 10, 117, 
	10, 114, 10, 101, 10, 58, 10, 105, 
	10, 118, 10, 117, 10, 104, 10, 101, 
	10, 32, 10, 116, 10, 104, 10, 105, 
	10, 110, 10, 103, 10, 32, 10, 111, 
	10, 102, 10, 32, 10, 105, 10, 116, 
	10, 32, 10, 105, 10, 115, 10, 111, 
	10, 117, 10, 115, 10, 101, 10, 32, 
	10, 107, 10, 110, 10, 111, 10, 119, 
	10, 32, 10, 108, 119, 10, 105, 10, 
	107, 10, 101, 10, 32, 10, 119, 10, 
	104, 10, 101, 10, 104, 10, 101, 10, 
	110, 10, 32, 10, 121, 10, 111, 10, 
	117, 10, 115, 10, 101, 10, 32, 10, 
	103, 10, 111, 10, 116, 111, 117, 115, 
	101, 32, 107, 110, 111, 119, 32, 108, 
	119, 105, 107, 101, 32, 119, 104, 101, 
	104, 101, 110, 32, 121, 111, 117, 115, 
	101, 32, 103, 111, 116, 32, 124, 9, 
	13, 10, 32, 92, 124, 9, 13, 10, 
	92, 124, 10, 92, 10, 32, 92, 124, 
	9, 13, 10, 32, 34, 35, 37, 42, 
	64, 65, 66, 68, 69, 70, 71, 84, 
	87, 89, 124, 9, 13, 10, 110, 10, 
	117, 10, 104, 10, 101, 117, 10, 110, 
	10, 32, 10, 121, 10, 111, 10, 117, 
	10, 115, 10, 101, 10, 32, 10, 103, 
	10, 111, 10, 116, 10, 116, 10, 97, 
	10, 101, 10, 97, 10, 116, 10, 117, 
	10, 114, 10, 101, 10, 58, 10, 105, 
	10, 118, 10, 117, 10, 104, 10, 101, 
	10, 32, 10, 116, 10, 104, 10, 105, 
	10, 110, 10, 103, 10, 32, 10, 111, 
	10, 102, 10, 32, 10, 105, 10, 116, 
	10, 32, 10, 105, 10, 115, 10, 104, 
	117, 10, 97, 10, 114, 10, 114, 10, 
	105, 10, 109, 10, 101, 10, 97, 10, 
	110, 10, 111, 10, 117, 10, 115, 10, 
	101, 10, 32, 10, 107, 10, 110, 10, 
	111, 10, 119, 10, 32, 10, 108, 119, 
	10, 105, 10, 107, 10, 101, 10, 32, 
	10, 119, 10, 104, 10, 101, 10, 104, 
	10, 101, 10, 110, 10, 32, 10, 121, 
	10, 111, 10, 117, 10, 115, 10, 101, 
	10, 32, 10, 103, 10, 111, 10, 116, 
	187, 191, 0
];

var _lexer_single_lengths = [
	0, 18, 17, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 1, 1, 1, 3, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 14, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 17, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 5, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 10, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 14, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 4, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 14, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	4, 3, 2, 4, 17, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 0, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 20, 39, 41, 43, 46, 49, 
	54, 59, 64, 69, 73, 77, 80, 82, 
	84, 86, 88, 90, 92, 94, 96, 98, 
	100, 102, 104, 106, 108, 110, 112, 115, 
	118, 123, 130, 135, 137, 139, 141, 145, 
	147, 149, 151, 153, 155, 157, 159, 161, 
	163, 165, 167, 169, 171, 173, 175, 177, 
	179, 181, 183, 185, 187, 189, 191, 193, 
	195, 197, 199, 201, 203, 205, 207, 209, 
	211, 213, 215, 231, 234, 237, 240, 243, 
	246, 249, 252, 255, 258, 261, 264, 267, 
	270, 273, 276, 295, 297, 299, 301, 303, 
	305, 307, 309, 311, 313, 315, 322, 325, 
	328, 331, 334, 337, 340, 343, 345, 347, 
	349, 351, 353, 355, 357, 359, 361, 373, 
	376, 379, 382, 385, 388, 391, 394, 397, 
	400, 403, 406, 409, 412, 415, 418, 421, 
	424, 427, 430, 433, 436, 439, 442, 445, 
	448, 451, 454, 457, 460, 463, 466, 469, 
	472, 475, 478, 481, 484, 487, 490, 493, 
	496, 499, 502, 505, 508, 511, 514, 517, 
	520, 523, 526, 529, 532, 535, 538, 541, 
	544, 547, 550, 553, 556, 559, 562, 565, 
	568, 571, 574, 577, 580, 583, 586, 589, 
	592, 594, 596, 598, 600, 602, 604, 606, 
	608, 610, 612, 614, 616, 618, 620, 622, 
	624, 626, 628, 630, 632, 634, 636, 638, 
	654, 657, 660, 663, 666, 669, 672, 675, 
	678, 681, 684, 687, 690, 693, 696, 699, 
	702, 705, 708, 713, 716, 719, 722, 725, 
	728, 731, 734, 737, 740, 743, 746, 749, 
	752, 755, 758, 761, 764, 767, 770, 773, 
	776, 779, 782, 785, 788, 791, 794, 797, 
	800, 803, 806, 809, 812, 815, 818, 821, 
	824, 827, 830, 833, 836, 839, 842, 845, 
	848, 851, 854, 857, 860, 863, 866, 869, 
	872, 875, 878, 881, 884, 887, 890, 894, 
	897, 900, 903, 906, 909, 912, 915, 918, 
	921, 924, 927, 930, 933, 936, 939, 942, 
	945, 948, 952, 955, 958, 961, 964, 967, 
	970, 973, 976, 979, 982, 985, 988, 991, 
	994, 997, 1000, 1003, 1006, 1009, 1012, 1015, 
	1017, 1019, 1021, 1023, 1025, 1027, 1029, 1031, 
	1033, 1035, 1037, 1039, 1041, 1043, 1059, 1062, 
	1065, 1068, 1071, 1074, 1077, 1080, 1083, 1086, 
	1089, 1092, 1095, 1098, 1101, 1104, 1107, 1110, 
	1113, 1117, 1120, 1123, 1126, 1129, 1132, 1135, 
	1138, 1141, 1144, 1147, 1150, 1153, 1156, 1159, 
	1162, 1165, 1168, 1171, 1174, 1177, 1180, 1183, 
	1186, 1189, 1192, 1195, 1198, 1201, 1204, 1207, 
	1210, 1213, 1216, 1219, 1222, 1225, 1228, 1231, 
	1234, 1237, 1240, 1243, 1246, 1249, 1252, 1255, 
	1258, 1261, 1264, 1267, 1271, 1274, 1277, 1280, 
	1283, 1286, 1289, 1292, 1295, 1298, 1301, 1304, 
	1307, 1310, 1313, 1316, 1319, 1322, 1325, 1328, 
	1331, 1333, 1335, 1337, 1339, 1341, 1343, 1345, 
	1347, 1349, 1351, 1354, 1356, 1358, 1360, 1362, 
	1364, 1366, 1368, 1370, 1372, 1374, 1376, 1378, 
	1380, 1382, 1384, 1386, 1388, 1390, 1392, 1394, 
	1398, 1404, 1408, 1411, 1417, 1436, 1439, 1442, 
	1445, 1449, 1452, 1455, 1458, 1461, 1464, 1467, 
	1470, 1473, 1476, 1479, 1482, 1485, 1488, 1491, 
	1494, 1497, 1500, 1503, 1506, 1509, 1512, 1515, 
	1518, 1521, 1524, 1527, 1530, 1533, 1536, 1539, 
	1542, 1545, 1548, 1551, 1554, 1557, 1560, 1563, 
	1566, 1569, 1573, 1576, 1579, 1582, 1585, 1588, 
	1591, 1594, 1597, 1600, 1603, 1606, 1609, 1612, 
	1615, 1618, 1621, 1624, 1627, 1631, 1634, 1637, 
	1640, 1643, 1646, 1649, 1652, 1655, 1658, 1661, 
	1664, 1667, 1670, 1673, 1676, 1679, 1682, 1685, 
	1688, 1691, 1693, 1695
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 18, 1, 0, 2, 1, 3, 4, 
	5, 6, 7, 8, 9, 10, 11, 12, 
	13, 14, 15, 16, 17, 1, 0, 19, 
	0, 20, 0, 22, 23, 21, 25, 26, 
	24, 29, 28, 30, 28, 27, 33, 32, 
	34, 32, 31, 33, 32, 35, 32, 31, 
	33, 32, 36, 32, 31, 38, 37, 37, 
	0, 2, 39, 39, 0, 41, 42, 40, 
	2, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 55, 0, 56, 0, 57, 0, 
	59, 60, 58, 62, 63, 61, 0, 0, 
	0, 0, 64, 65, 66, 65, 65, 68, 
	67, 64, 2, 69, 7, 69, 0, 70, 
	0, 71, 0, 70, 0, 72, 73, 74, 
	0, 75, 0, 76, 0, 77, 0, 78, 
	0, 79, 0, 80, 0, 81, 0, 82, 
	0, 83, 0, 84, 0, 85, 0, 86, 
	0, 70, 0, 87, 0, 88, 0, 89, 
	0, 90, 0, 91, 0, 92, 0, 93, 
	0, 94, 0, 95, 0, 96, 0, 97, 
	0, 98, 0, 99, 0, 100, 0, 101, 
	0, 102, 0, 103, 0, 104, 0, 105, 
	0, 106, 0, 108, 107, 110, 109, 110, 
	111, 112, 113, 114, 112, 115, 116, 117, 
	118, 119, 120, 121, 122, 111, 109, 110, 
	123, 109, 110, 124, 109, 110, 125, 109, 
	110, 126, 109, 110, 127, 109, 110, 128, 
	109, 110, 129, 109, 110, 130, 109, 110, 
	131, 109, 110, 132, 109, 110, 133, 109, 
	110, 134, 109, 110, 135, 109, 110, 136, 
	109, 110, 137, 109, 139, 138, 140, 141, 
	142, 143, 144, 145, 146, 147, 148, 149, 
	150, 151, 152, 153, 154, 138, 0, 155, 
	0, 156, 0, 157, 0, 158, 0, 159, 
	0, 160, 0, 161, 0, 162, 0, 164, 
	163, 166, 165, 166, 167, 168, 169, 168, 
	167, 165, 166, 170, 165, 166, 171, 165, 
	166, 172, 165, 166, 173, 165, 166, 174, 
	165, 166, 175, 165, 166, 176, 165, 177, 
	0, 178, 0, 179, 0, 180, 0, 181, 
	0, 182, 0, 183, 0, 185, 184, 187, 
	186, 187, 188, 189, 190, 189, 191, 192, 
	193, 194, 195, 188, 186, 187, 196, 186, 
	187, 197, 186, 187, 198, 186, 187, 199, 
	186, 187, 200, 186, 187, 201, 186, 187, 
	202, 186, 187, 203, 186, 187, 204, 186, 
	187, 205, 186, 187, 206, 186, 187, 207, 
	186, 187, 208, 186, 187, 209, 186, 187, 
	210, 186, 187, 211, 186, 187, 212, 186, 
	187, 213, 186, 187, 214, 186, 187, 215, 
	186, 187, 216, 186, 187, 217, 186, 187, 
	218, 186, 187, 219, 186, 187, 220, 186, 
	187, 221, 186, 187, 222, 186, 187, 223, 
	186, 187, 224, 186, 187, 225, 186, 187, 
	226, 186, 187, 227, 186, 187, 228, 186, 
	187, 229, 186, 187, 230, 186, 187, 231, 
	186, 187, 232, 186, 187, 233, 186, 187, 
	234, 186, 187, 235, 186, 187, 236, 186, 
	187, 229, 186, 187, 237, 186, 187, 238, 
	186, 187, 239, 186, 187, 240, 186, 187, 
	241, 186, 187, 229, 186, 187, 242, 186, 
	187, 243, 186, 187, 244, 186, 187, 245, 
	186, 187, 246, 186, 187, 247, 186, 187, 
	248, 186, 187, 249, 186, 187, 250, 186, 
	187, 251, 186, 187, 252, 186, 187, 253, 
	186, 187, 254, 186, 187, 255, 186, 187, 
	256, 186, 187, 236, 186, 187, 257, 186, 
	187, 258, 186, 187, 259, 186, 187, 260, 
	186, 187, 261, 186, 187, 262, 186, 187, 
	263, 186, 187, 264, 186, 187, 255, 186, 
	265, 0, 266, 0, 74, 0, 267, 0, 
	268, 0, 269, 0, 270, 0, 271, 0, 
	272, 0, 273, 0, 274, 0, 275, 0, 
	276, 0, 277, 0, 278, 0, 279, 0, 
	280, 0, 281, 0, 282, 0, 283, 0, 
	284, 0, 286, 285, 288, 287, 288, 289, 
	290, 291, 292, 290, 293, 294, 295, 296, 
	297, 298, 299, 300, 289, 287, 288, 301, 
	287, 288, 302, 287, 288, 303, 287, 288, 
	304, 287, 288, 305, 287, 288, 306, 287, 
	288, 307, 287, 288, 308, 287, 288, 309, 
	287, 288, 310, 287, 288, 311, 287, 288, 
	312, 287, 288, 313, 287, 288, 314, 287, 
	288, 315, 287, 288, 316, 287, 288, 317, 
	287, 288, 316, 287, 288, 318, 319, 320, 
	287, 288, 321, 287, 288, 322, 287, 288, 
	323, 287, 288, 324, 287, 288, 325, 287, 
	288, 326, 287, 288, 327, 287, 288, 328, 
	287, 288, 329, 287, 288, 330, 287, 288, 
	331, 287, 288, 332, 287, 288, 316, 287, 
	288, 333, 287, 288, 334, 287, 288, 335, 
	287, 288, 336, 287, 288, 337, 287, 288, 
	338, 287, 288, 339, 287, 288, 340, 287, 
	288, 341, 287, 288, 342, 287, 288, 343, 
	287, 288, 344, 287, 288, 345, 287, 288, 
	346, 287, 288, 347, 287, 288, 348, 287, 
	288, 349, 287, 288, 350, 287, 288, 351, 
	287, 288, 315, 287, 288, 352, 287, 288, 
	353, 287, 288, 354, 287, 288, 355, 287, 
	288, 356, 287, 288, 351, 287, 288, 357, 
	287, 288, 358, 287, 288, 320, 287, 288, 
	359, 287, 288, 360, 287, 288, 361, 287, 
	288, 362, 287, 288, 363, 287, 288, 364, 
	287, 288, 365, 287, 288, 366, 287, 288, 
	367, 287, 288, 368, 287, 288, 369, 287, 
	288, 370, 287, 288, 371, 287, 288, 372, 
	287, 288, 373, 287, 288, 374, 287, 288, 
	351, 287, 288, 375, 320, 287, 288, 376, 
	287, 288, 377, 287, 288, 378, 287, 288, 
	379, 287, 288, 380, 287, 288, 381, 287, 
	288, 382, 287, 288, 372, 287, 288, 383, 
	287, 288, 384, 287, 288, 385, 287, 288, 
	386, 287, 288, 387, 287, 288, 388, 287, 
	288, 389, 287, 288, 390, 287, 288, 391, 
	287, 288, 392, 287, 288, 393, 394, 287, 
	288, 395, 287, 288, 396, 287, 288, 397, 
	287, 288, 398, 287, 288, 399, 287, 288, 
	400, 287, 288, 320, 287, 288, 401, 287, 
	288, 402, 287, 288, 403, 287, 288, 404, 
	287, 288, 405, 287, 288, 406, 287, 288, 
	407, 287, 288, 408, 287, 288, 409, 287, 
	288, 410, 287, 288, 411, 287, 288, 412, 
	287, 288, 316, 287, 413, 74, 0, 414, 
	0, 415, 0, 416, 0, 417, 0, 418, 
	0, 419, 0, 420, 0, 421, 0, 422, 
	0, 423, 0, 424, 0, 425, 0, 427, 
	426, 429, 428, 429, 430, 431, 432, 433, 
	431, 434, 435, 436, 437, 438, 439, 440, 
	441, 430, 428, 429, 442, 428, 429, 443, 
	428, 429, 444, 428, 429, 445, 428, 429, 
	446, 428, 429, 447, 428, 429, 448, 428, 
	429, 449, 428, 429, 450, 428, 429, 451, 
	428, 429, 452, 428, 429, 453, 428, 429, 
	454, 428, 429, 455, 428, 429, 456, 428, 
	429, 457, 428, 429, 458, 428, 429, 457, 
	428, 429, 459, 460, 428, 429, 461, 428, 
	429, 462, 428, 429, 463, 428, 429, 464, 
	428, 429, 465, 428, 429, 466, 428, 429, 
	467, 428, 429, 468, 428, 429, 469, 428, 
	429, 470, 428, 429, 471, 428, 429, 472, 
	428, 429, 457, 428, 429, 473, 428, 429, 
	474, 428, 429, 475, 428, 429, 476, 428, 
	429, 477, 428, 429, 478, 428, 429, 456, 
	428, 429, 479, 428, 429, 480, 428, 429, 
	460, 428, 429, 481, 428, 429, 482, 428, 
	429, 483, 428, 429, 484, 428, 429, 485, 
	428, 429, 486, 428, 429, 487, 428, 429, 
	488, 428, 429, 489, 428, 429, 490, 428, 
	429, 491, 428, 429, 492, 428, 429, 493, 
	428, 429, 494, 428, 429, 495, 428, 429, 
	496, 428, 429, 478, 428, 429, 497, 428, 
	429, 498, 428, 429, 499, 428, 429, 500, 
	428, 429, 501, 428, 429, 502, 428, 429, 
	503, 428, 429, 504, 428, 429, 505, 428, 
	429, 506, 428, 429, 507, 508, 428, 429, 
	509, 428, 429, 510, 428, 429, 511, 428, 
	429, 512, 428, 429, 513, 428, 429, 514, 
	428, 429, 460, 428, 429, 515, 428, 429, 
	516, 428, 429, 517, 428, 429, 518, 428, 
	429, 519, 428, 429, 520, 428, 429, 521, 
	428, 429, 522, 428, 429, 523, 428, 429, 
	524, 428, 429, 525, 428, 429, 526, 428, 
	429, 457, 428, 527, 0, 528, 0, 529, 
	0, 530, 0, 531, 0, 532, 0, 533, 
	0, 534, 0, 535, 0, 536, 0, 537, 
	538, 0, 539, 0, 540, 0, 541, 0, 
	542, 0, 543, 0, 544, 0, 74, 0, 
	545, 0, 546, 0, 547, 0, 548, 0, 
	549, 0, 550, 0, 551, 0, 552, 0, 
	553, 0, 554, 0, 555, 0, 556, 0, 
	70, 0, 557, 558, 557, 0, 561, 560, 
	562, 563, 560, 559, 0, 565, 566, 564, 
	0, 565, 564, 561, 567, 565, 566, 567, 
	564, 561, 568, 569, 570, 571, 572, 573, 
	574, 575, 576, 577, 578, 579, 580, 581, 
	582, 583, 568, 0, 110, 584, 109, 110, 
	585, 109, 110, 584, 109, 110, 586, 587, 
	109, 110, 588, 109, 110, 589, 109, 110, 
	590, 109, 110, 591, 109, 110, 592, 109, 
	110, 593, 109, 110, 594, 109, 110, 595, 
	109, 110, 596, 109, 110, 597, 109, 110, 
	598, 109, 110, 599, 109, 110, 584, 109, 
	110, 600, 109, 110, 601, 109, 110, 602, 
	109, 110, 603, 109, 110, 604, 109, 110, 
	605, 109, 110, 137, 109, 110, 606, 109, 
	110, 607, 109, 110, 587, 109, 110, 608, 
	109, 110, 609, 109, 110, 610, 109, 110, 
	611, 109, 110, 612, 109, 110, 613, 109, 
	110, 614, 109, 110, 615, 109, 110, 616, 
	109, 110, 617, 109, 110, 618, 109, 110, 
	619, 109, 110, 620, 109, 110, 621, 109, 
	110, 622, 109, 110, 623, 109, 110, 605, 
	109, 110, 624, 587, 109, 110, 625, 109, 
	110, 626, 109, 110, 627, 109, 110, 628, 
	109, 110, 629, 109, 110, 630, 109, 110, 
	631, 109, 110, 621, 109, 110, 632, 109, 
	110, 633, 109, 110, 634, 109, 110, 635, 
	109, 110, 636, 109, 110, 637, 109, 110, 
	638, 109, 110, 639, 109, 110, 640, 109, 
	110, 641, 109, 110, 642, 643, 109, 110, 
	644, 109, 110, 645, 109, 110, 646, 109, 
	110, 647, 109, 110, 648, 109, 110, 649, 
	109, 110, 587, 109, 110, 650, 109, 110, 
	651, 109, 110, 652, 109, 110, 653, 109, 
	110, 654, 109, 110, 655, 109, 110, 656, 
	109, 110, 657, 109, 110, 658, 109, 110, 
	659, 109, 110, 660, 109, 110, 661, 109, 
	110, 584, 109, 662, 0, 1, 0, 663, 
	0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 36, 38, 91, 109, 192, 195, 334, 
	440, 471, 561, 4, 5, 6, 7, 6, 
	6, 7, 6, 8, 8, 8, 9, 8, 
	8, 8, 9, 10, 11, 12, 2, 12, 
	13, 2, 14, 16, 17, 18, 19, 20, 
	21, 22, 23, 24, 25, 26, 27, 28, 
	563, 30, 31, 2, 14, 31, 2, 14, 
	33, 34, 2, 33, 32, 34, 29, 37, 
	39, 52, 35, 40, 41, 42, 43, 44, 
	45, 46, 47, 48, 49, 50, 51, 53, 
	54, 55, 56, 57, 58, 59, 60, 61, 
	62, 63, 64, 65, 66, 67, 68, 69, 
	70, 71, 72, 73, 74, 73, 74, 74, 
	2, 75, 89, 477, 478, 480, 494, 501, 
	504, 521, 530, 76, 77, 78, 79, 80, 
	81, 82, 83, 84, 85, 86, 87, 88, 
	2, 90, 2, 2, 3, 13, 15, 29, 
	32, 35, 36, 38, 91, 109, 192, 195, 
	334, 440, 471, 92, 93, 94, 95, 96, 
	97, 98, 99, 100, 101, 100, 101, 101, 
	2, 102, 103, 104, 105, 106, 107, 108, 
	90, 110, 111, 112, 113, 114, 115, 116, 
	117, 118, 117, 118, 118, 2, 119, 133, 
	154, 161, 167, 183, 120, 121, 122, 123, 
	124, 125, 126, 127, 128, 129, 130, 131, 
	132, 2, 134, 135, 136, 137, 138, 139, 
	140, 141, 142, 143, 144, 145, 146, 147, 
	148, 149, 150, 151, 152, 153, 90, 155, 
	156, 157, 158, 159, 160, 162, 163, 164, 
	165, 166, 168, 169, 170, 171, 172, 173, 
	174, 175, 176, 177, 178, 179, 180, 181, 
	182, 184, 185, 186, 187, 188, 189, 190, 
	191, 193, 194, 196, 197, 198, 199, 200, 
	201, 202, 203, 204, 205, 206, 207, 208, 
	209, 210, 211, 212, 213, 214, 215, 214, 
	215, 215, 2, 216, 230, 231, 232, 234, 
	268, 274, 277, 294, 303, 217, 218, 219, 
	220, 221, 222, 223, 224, 225, 226, 227, 
	228, 229, 2, 90, 230, 233, 235, 248, 
	231, 236, 237, 238, 239, 240, 241, 242, 
	243, 244, 245, 246, 247, 249, 250, 251, 
	252, 253, 254, 255, 256, 257, 258, 259, 
	260, 261, 262, 263, 264, 265, 266, 267, 
	269, 270, 271, 272, 273, 275, 276, 278, 
	279, 280, 281, 282, 283, 284, 285, 286, 
	287, 288, 289, 290, 291, 292, 293, 295, 
	296, 297, 298, 299, 300, 301, 302, 304, 
	305, 306, 307, 308, 309, 310, 311, 312, 
	313, 314, 321, 315, 316, 317, 318, 319, 
	320, 322, 323, 324, 325, 326, 327, 328, 
	329, 330, 331, 332, 333, 335, 336, 337, 
	338, 339, 340, 341, 342, 343, 344, 345, 
	346, 347, 348, 349, 348, 349, 349, 2, 
	350, 364, 365, 366, 368, 382, 389, 392, 
	391, 409, 351, 352, 353, 354, 355, 356, 
	357, 358, 359, 360, 361, 362, 363, 2, 
	90, 364, 367, 369, 365, 370, 371, 372, 
	373, 374, 375, 376, 377, 378, 379, 380, 
	381, 383, 384, 385, 386, 387, 388, 390, 
	391, 393, 394, 395, 396, 397, 398, 399, 
	400, 401, 402, 403, 404, 405, 406, 407, 
	408, 410, 411, 412, 413, 414, 415, 416, 
	417, 418, 419, 420, 427, 421, 422, 423, 
	424, 425, 426, 428, 429, 430, 431, 432, 
	433, 434, 435, 436, 437, 438, 439, 441, 
	442, 443, 444, 445, 446, 447, 448, 449, 
	450, 451, 458, 452, 453, 454, 455, 456, 
	457, 459, 460, 461, 462, 463, 464, 465, 
	466, 467, 468, 469, 470, 471, 472, 473, 
	475, 476, 474, 472, 473, 474, 472, 475, 
	476, 3, 13, 15, 29, 32, 35, 36, 
	38, 91, 109, 192, 195, 334, 440, 471, 
	89, 479, 481, 477, 482, 483, 484, 485, 
	486, 487, 488, 489, 490, 491, 492, 493, 
	495, 496, 497, 498, 499, 500, 502, 503, 
	505, 506, 507, 508, 509, 510, 511, 512, 
	513, 514, 515, 516, 517, 518, 519, 520, 
	522, 523, 524, 525, 526, 527, 528, 529, 
	531, 532, 533, 534, 535, 536, 537, 538, 
	539, 540, 541, 548, 542, 543, 544, 545, 
	546, 547, 549, 550, 551, 552, 553, 554, 
	555, 556, 557, 558, 559, 560, 562, 0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 35, 0, 0, 0, 7, 139, 48, 
	0, 102, 9, 5, 45, 134, 45, 0, 
	33, 122, 33, 33, 0, 11, 106, 0, 
	0, 114, 25, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 149, 126, 0, 110, 23, 
	0, 27, 118, 27, 51, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 0, 
	72, 33, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	15, 15, 31, 130, 60, 57, 31, 63, 
	57, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 66, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 0, 
	81, 84, 0, 0, 0, 0, 0, 0, 
	21, 0, 0, 0, 0, 0, 0, 0, 
	57, 144, 0, 54, 0, 69, 33, 84, 
	84, 84, 84, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 13, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 0, 75, 33, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 17, 17, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 144, 0, 54, 0, 78, 
	33, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 19, 
	19, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 37, 
	37, 54, 37, 87, 0, 0, 39, 0, 
	0, 93, 90, 41, 96, 90, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 99, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 563;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/en_scouse.js.rl" */

/* line 130 "ragel/i18n/en_scouse.js.rl" */

/* line 131 "ragel/i18n/en_scouse.js.rl" */

/* line 132 "ragel/i18n/en_scouse.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 987 "js/lib/gherkin/lexer/en_scouse.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/en_scouse.js.rl" */
  
/* line 994 "js/lib/gherkin/lexer/en_scouse.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/en_scouse.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/en_scouse.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/en_scouse.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/en_scouse.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/en_scouse.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/en_scouse.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/en_scouse.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/en_scouse.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/en_scouse.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/en_scouse.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/en_scouse.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/en_scouse.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/en_scouse.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/en_scouse.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/en_scouse.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/en_scouse.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/en_scouse.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/en_scouse.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/en_scouse.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/en_scouse.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/en_scouse.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/en_scouse.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/en_scouse.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/en_scouse.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1221 "js/lib/gherkin/lexer/en_scouse.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/en_scouse.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1260 "js/lib/gherkin/lexer/en_scouse.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/en_scouse.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/en_scouse', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/en_scouse', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();
