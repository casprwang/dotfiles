
/* line 1 "ragel/i18n/cy_gb.js.rl" */
;(function() {


/* line 126 "ragel/i18n/cy_gb.js.rl" */



/* line 11 "js/lib/gherkin/lexer/cy_gb.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 18, 35, 36, 37, 39, 41, 
	46, 51, 56, 61, 65, 69, 71, 72, 
	73, 74, 75, 76, 77, 78, 79, 80, 
	81, 82, 83, 84, 85, 86, 87, 89, 
	91, 96, 103, 108, 111, 112, 113, 114, 
	115, 116, 117, 118, 119, 120, 121, 122, 
	123, 124, 125, 126, 127, 128, 139, 141, 
	143, 145, 147, 149, 151, 153, 155, 157, 
	159, 161, 163, 165, 167, 169, 171, 173, 
	175, 177, 179, 196, 197, 198, 199, 200, 
	201, 202, 203, 204, 205, 218, 220, 222, 
	224, 226, 228, 230, 232, 234, 236, 238, 
	240, 242, 244, 246, 248, 252, 254, 256, 
	258, 260, 262, 264, 266, 268, 270, 272, 
	274, 276, 278, 280, 282, 284, 286, 288, 
	290, 292, 294, 296, 298, 300, 302, 304, 
	307, 309, 311, 313, 315, 317, 319, 321, 
	323, 325, 327, 329, 330, 331, 332, 333, 
	334, 335, 336, 337, 338, 339, 340, 341, 
	342, 343, 344, 351, 353, 355, 357, 359, 
	361, 363, 364, 365, 366, 367, 368, 369, 
	370, 371, 372, 373, 374, 376, 377, 378, 
	379, 380, 381, 382, 383, 384, 385, 386, 
	387, 388, 389, 402, 404, 406, 408, 410, 
	412, 414, 416, 418, 420, 422, 424, 426, 
	428, 430, 432, 436, 438, 440, 442, 444, 
	446, 448, 450, 452, 454, 456, 458, 460, 
	462, 464, 466, 468, 470, 472, 474, 476, 
	478, 480, 482, 484, 486, 488, 490, 491, 
	492, 506, 508, 510, 512, 514, 516, 518, 
	520, 522, 524, 526, 528, 530, 532, 534, 
	536, 540, 542, 544, 546, 548, 550, 552, 
	554, 556, 558, 560, 562, 564, 566, 568, 
	570, 572, 574, 576, 578, 580, 582, 584, 
	586, 588, 590, 592, 594, 596, 598, 600, 
	602, 604, 607, 609, 611, 613, 615, 617, 
	619, 621, 623, 625, 627, 629, 630, 634, 
	640, 643, 645, 651, 668, 670, 672, 674, 
	676, 678, 680, 682, 684, 686, 688, 690, 
	692, 694, 696, 698, 700, 702, 704, 706, 
	708, 710, 712, 714, 716, 718, 721, 723, 
	725, 727, 729, 731, 733, 735, 737, 739, 
	741, 742, 743
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	67, 69, 79, 80, 83, 89, 124, 239, 
	9, 13, 10, 32, 34, 35, 37, 42, 
	64, 65, 67, 69, 79, 80, 83, 89, 
	124, 9, 13, 34, 34, 10, 13, 10, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 9, 
	13, 10, 32, 9, 13, 10, 13, 10, 
	95, 70, 69, 65, 84, 85, 82, 69, 
	95, 69, 78, 68, 95, 37, 32, 10, 
	13, 10, 13, 13, 32, 64, 9, 10, 
	9, 10, 13, 32, 64, 11, 12, 10, 
	32, 64, 9, 13, 32, 110, 114, 114, 
	104, 101, 103, 101, 100, 105, 103, 32, 
	97, 119, 101, 100, 100, 58, 10, 10, 
	10, 32, 35, 37, 64, 65, 67, 69, 
	83, 9, 13, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	114, 10, 119, 10, 101, 10, 100, 10, 
	100, 10, 58, 10, 32, 34, 35, 37, 
	42, 64, 65, 67, 69, 79, 80, 83, 
	89, 124, 9, 13, 101, 102, 110, 100, 
	105, 114, 58, 10, 10, 10, 32, 35, 
	37, 42, 64, 65, 79, 80, 83, 89, 
	9, 13, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 32, 
	10, 32, 110, 114, 10, 114, 10, 104, 
	10, 101, 10, 103, 10, 101, 10, 100, 
	10, 105, 10, 103, 10, 32, 10, 97, 
	10, 119, 10, 101, 10, 100, 10, 100, 
	10, 58, 10, 110, 10, 100, 10, 114, 
	10, 121, 10, 99, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 111, 
	10, 32, 58, 10, 65, 10, 109, 10, 
	108, 10, 105, 10, 110, 10, 101, 10, 
	108, 10, 108, 10, 111, 10, 108, 10, 
	110, 110, 103, 104, 114, 101, 105, 102, 
	102, 116, 105, 97, 117, 58, 10, 10, 
	10, 32, 35, 65, 124, 9, 13, 10, 
	114, 10, 119, 10, 101, 10, 100, 10, 
	100, 10, 58, 110, 100, 114, 121, 99, 
	101, 110, 97, 114, 105, 111, 32, 58, 
	65, 109, 108, 105, 110, 101, 108, 108, 
	111, 108, 58, 10, 10, 10, 32, 35, 
	37, 42, 64, 65, 79, 80, 83, 89, 
	9, 13, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 32, 
	10, 32, 110, 114, 10, 114, 10, 104, 
	10, 101, 10, 103, 10, 101, 10, 100, 
	10, 105, 10, 103, 10, 32, 10, 97, 
	10, 119, 10, 101, 10, 100, 10, 100, 
	10, 58, 10, 110, 10, 100, 10, 114, 
	10, 121, 10, 99, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 111, 
	10, 110, 10, 10, 10, 32, 35, 37, 
	42, 64, 65, 67, 79, 80, 83, 89, 
	9, 13, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 32, 
	10, 32, 110, 114, 10, 114, 10, 104, 
	10, 101, 10, 103, 10, 101, 10, 100, 
	10, 105, 10, 103, 10, 32, 10, 97, 
	10, 119, 10, 101, 10, 100, 10, 100, 
	10, 58, 10, 101, 10, 102, 10, 110, 
	10, 100, 10, 105, 10, 114, 10, 110, 
	10, 100, 10, 114, 10, 121, 10, 99, 
	10, 101, 10, 110, 10, 97, 10, 114, 
	10, 105, 10, 111, 10, 32, 58, 10, 
	65, 10, 109, 10, 108, 10, 105, 10, 
	110, 10, 101, 10, 108, 10, 108, 10, 
	111, 10, 108, 10, 110, 110, 32, 124, 
	9, 13, 10, 32, 92, 124, 9, 13, 
	10, 92, 124, 10, 92, 10, 32, 92, 
	124, 9, 13, 10, 32, 34, 35, 37, 
	42, 64, 65, 67, 69, 79, 80, 83, 
	89, 124, 9, 13, 10, 101, 10, 102, 
	10, 110, 10, 100, 10, 105, 10, 114, 
	10, 110, 10, 103, 10, 104, 10, 114, 
	10, 101, 10, 105, 10, 102, 10, 102, 
	10, 116, 10, 105, 10, 97, 10, 117, 
	10, 99, 10, 101, 10, 110, 10, 97, 
	10, 114, 10, 105, 10, 111, 10, 32, 
	58, 10, 65, 10, 109, 10, 108, 10, 
	105, 10, 110, 10, 101, 10, 108, 10, 
	108, 10, 111, 10, 108, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 16, 15, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 3, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 9, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 15, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 11, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 4, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 5, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 11, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 4, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	12, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	4, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 2, 4, 
	3, 2, 4, 15, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	0, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 18, 35, 37, 39, 42, 45, 
	50, 55, 60, 65, 69, 73, 76, 78, 
	80, 82, 84, 86, 88, 90, 92, 94, 
	96, 98, 100, 102, 104, 106, 108, 111, 
	114, 119, 126, 131, 135, 137, 139, 141, 
	143, 145, 147, 149, 151, 153, 155, 157, 
	159, 161, 163, 165, 167, 169, 180, 183, 
	186, 189, 192, 195, 198, 201, 204, 207, 
	210, 213, 216, 219, 222, 225, 228, 231, 
	234, 237, 240, 257, 259, 261, 263, 265, 
	267, 269, 271, 273, 275, 288, 291, 294, 
	297, 300, 303, 306, 309, 312, 315, 318, 
	321, 324, 327, 330, 333, 338, 341, 344, 
	347, 350, 353, 356, 359, 362, 365, 368, 
	371, 374, 377, 380, 383, 386, 389, 392, 
	395, 398, 401, 404, 407, 410, 413, 416, 
	420, 423, 426, 429, 432, 435, 438, 441, 
	444, 447, 450, 453, 455, 457, 459, 461, 
	463, 465, 467, 469, 471, 473, 475, 477, 
	479, 481, 483, 490, 493, 496, 499, 502, 
	505, 508, 510, 512, 514, 516, 518, 520, 
	522, 524, 526, 528, 530, 533, 535, 537, 
	539, 541, 543, 545, 547, 549, 551, 553, 
	555, 557, 559, 572, 575, 578, 581, 584, 
	587, 590, 593, 596, 599, 602, 605, 608, 
	611, 614, 617, 622, 625, 628, 631, 634, 
	637, 640, 643, 646, 649, 652, 655, 658, 
	661, 664, 667, 670, 673, 676, 679, 682, 
	685, 688, 691, 694, 697, 700, 703, 705, 
	707, 721, 724, 727, 730, 733, 736, 739, 
	742, 745, 748, 751, 754, 757, 760, 763, 
	766, 771, 774, 777, 780, 783, 786, 789, 
	792, 795, 798, 801, 804, 807, 810, 813, 
	816, 819, 822, 825, 828, 831, 834, 837, 
	840, 843, 846, 849, 852, 855, 858, 861, 
	864, 867, 871, 874, 877, 880, 883, 886, 
	889, 892, 895, 898, 901, 904, 906, 910, 
	916, 920, 923, 929, 946, 949, 952, 955, 
	958, 961, 964, 967, 970, 973, 976, 979, 
	982, 985, 988, 991, 994, 997, 1000, 1003, 
	1006, 1009, 1012, 1015, 1018, 1021, 1025, 1028, 
	1031, 1034, 1037, 1040, 1043, 1046, 1049, 1052, 
	1055, 1057, 1059
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	1, 0, 2, 1, 3, 4, 5, 6, 
	7, 8, 9, 10, 11, 12, 13, 14, 
	15, 1, 0, 17, 0, 18, 0, 20, 
	21, 19, 23, 24, 22, 27, 26, 28, 
	26, 25, 31, 30, 32, 30, 29, 31, 
	30, 33, 30, 29, 31, 30, 34, 30, 
	29, 36, 35, 35, 0, 2, 37, 37, 
	0, 39, 40, 38, 2, 0, 41, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 55, 0, 57, 58, 56, 60, 
	61, 59, 0, 0, 0, 0, 62, 63, 
	64, 63, 63, 66, 65, 62, 2, 67, 
	7, 67, 0, 55, 68, 69, 0, 70, 
	0, 71, 0, 72, 0, 73, 0, 74, 
	0, 75, 0, 76, 0, 77, 0, 78, 
	0, 79, 0, 80, 0, 81, 0, 82, 
	0, 83, 0, 84, 0, 86, 85, 88, 
	87, 88, 89, 90, 91, 90, 92, 93, 
	94, 95, 89, 87, 88, 96, 87, 88, 
	97, 87, 88, 98, 87, 88, 99, 87, 
	88, 100, 87, 88, 101, 87, 88, 102, 
	87, 88, 103, 87, 88, 104, 87, 88, 
	105, 87, 88, 106, 87, 88, 107, 87, 
	88, 108, 87, 88, 109, 87, 88, 110, 
	87, 88, 111, 87, 88, 112, 87, 88, 
	113, 87, 88, 114, 87, 88, 115, 87, 
	117, 116, 118, 119, 120, 121, 122, 123, 
	124, 125, 126, 127, 128, 129, 130, 116, 
	0, 131, 0, 132, 0, 133, 0, 134, 
	0, 135, 0, 136, 0, 137, 0, 139, 
	138, 141, 140, 141, 142, 143, 144, 145, 
	143, 146, 147, 148, 149, 150, 142, 140, 
	141, 151, 140, 141, 152, 140, 141, 153, 
	140, 141, 154, 140, 141, 155, 140, 141, 
	156, 140, 141, 157, 140, 141, 158, 140, 
	141, 159, 140, 141, 160, 140, 141, 161, 
	140, 141, 162, 140, 141, 163, 140, 141, 
	164, 140, 141, 165, 140, 141, 165, 166, 
	167, 140, 141, 168, 140, 141, 169, 140, 
	141, 170, 140, 141, 171, 140, 141, 172, 
	140, 141, 173, 140, 141, 174, 140, 141, 
	175, 140, 141, 176, 140, 141, 177, 140, 
	141, 178, 140, 141, 179, 140, 141, 180, 
	140, 141, 181, 140, 141, 165, 140, 141, 
	182, 140, 141, 177, 140, 141, 183, 140, 
	141, 182, 140, 141, 184, 140, 141, 185, 
	140, 141, 186, 140, 141, 187, 140, 141, 
	188, 140, 141, 189, 140, 141, 190, 140, 
	141, 191, 165, 140, 141, 192, 140, 141, 
	193, 140, 141, 194, 140, 141, 195, 140, 
	141, 196, 140, 141, 197, 140, 141, 198, 
	140, 141, 199, 140, 141, 200, 140, 141, 
	181, 140, 141, 176, 140, 201, 0, 202, 
	0, 203, 0, 204, 0, 205, 0, 206, 
	0, 207, 0, 208, 0, 209, 0, 210, 
	0, 211, 0, 212, 0, 213, 0, 215, 
	214, 217, 216, 217, 218, 219, 220, 219, 
	218, 216, 217, 221, 216, 217, 222, 216, 
	217, 223, 216, 217, 224, 216, 217, 225, 
	216, 217, 226, 216, 227, 0, 79, 0, 
	228, 0, 227, 0, 229, 0, 230, 0, 
	231, 0, 232, 0, 233, 0, 234, 0, 
	235, 0, 236, 237, 0, 238, 0, 239, 
	0, 240, 0, 241, 0, 242, 0, 243, 
	0, 244, 0, 245, 0, 246, 0, 247, 
	0, 248, 0, 250, 249, 252, 251, 252, 
	253, 254, 255, 256, 254, 257, 258, 259, 
	260, 261, 253, 251, 252, 262, 251, 252, 
	263, 251, 252, 264, 251, 252, 265, 251, 
	252, 266, 251, 252, 267, 251, 252, 268, 
	251, 252, 269, 251, 252, 270, 251, 252, 
	271, 251, 252, 272, 251, 252, 273, 251, 
	252, 274, 251, 252, 275, 251, 252, 276, 
	251, 252, 276, 277, 278, 251, 252, 279, 
	251, 252, 280, 251, 252, 281, 251, 252, 
	282, 251, 252, 283, 251, 252, 284, 251, 
	252, 285, 251, 252, 286, 251, 252, 287, 
	251, 252, 288, 251, 252, 289, 251, 252, 
	290, 251, 252, 291, 251, 252, 292, 251, 
	252, 276, 251, 252, 293, 251, 252, 288, 
	251, 252, 294, 251, 252, 293, 251, 252, 
	295, 251, 252, 296, 251, 252, 297, 251, 
	252, 298, 251, 252, 299, 251, 252, 300, 
	251, 252, 292, 251, 252, 287, 251, 302, 
	301, 304, 303, 304, 305, 306, 307, 308, 
	306, 309, 310, 311, 312, 313, 314, 305, 
	303, 304, 315, 303, 304, 316, 303, 304, 
	317, 303, 304, 318, 303, 304, 319, 303, 
	304, 320, 303, 304, 321, 303, 304, 322, 
	303, 304, 323, 303, 304, 324, 303, 304, 
	325, 303, 304, 326, 303, 304, 327, 303, 
	304, 328, 303, 304, 329, 303, 304, 329, 
	330, 331, 303, 304, 332, 303, 304, 333, 
	303, 304, 334, 303, 304, 335, 303, 304, 
	336, 303, 304, 337, 303, 304, 338, 303, 
	304, 339, 303, 304, 340, 303, 304, 341, 
	303, 304, 342, 303, 304, 343, 303, 304, 
	344, 303, 304, 345, 303, 304, 329, 303, 
	304, 346, 303, 304, 347, 303, 304, 348, 
	303, 304, 349, 303, 304, 350, 303, 304, 
	345, 303, 304, 351, 303, 304, 341, 303, 
	304, 352, 303, 304, 351, 303, 304, 353, 
	303, 304, 354, 303, 304, 355, 303, 304, 
	356, 303, 304, 357, 303, 304, 358, 303, 
	304, 359, 303, 304, 360, 329, 303, 304, 
	361, 303, 304, 362, 303, 304, 363, 303, 
	304, 364, 303, 304, 365, 303, 304, 366, 
	303, 304, 367, 303, 304, 368, 303, 304, 
	369, 303, 304, 345, 303, 304, 340, 303, 
	78, 0, 370, 371, 370, 0, 374, 373, 
	375, 376, 373, 372, 0, 378, 379, 377, 
	0, 378, 377, 374, 380, 378, 379, 380, 
	377, 374, 381, 382, 383, 384, 385, 386, 
	387, 388, 389, 390, 391, 392, 393, 394, 
	381, 0, 88, 395, 87, 88, 396, 87, 
	88, 397, 87, 88, 398, 87, 88, 399, 
	87, 88, 114, 87, 88, 400, 87, 88, 
	401, 87, 88, 402, 87, 88, 403, 87, 
	88, 404, 87, 88, 405, 87, 88, 406, 
	87, 88, 407, 87, 88, 408, 87, 88, 
	409, 87, 88, 410, 87, 88, 114, 87, 
	88, 411, 87, 88, 412, 87, 88, 413, 
	87, 88, 414, 87, 88, 415, 87, 88, 
	416, 87, 88, 417, 87, 88, 418, 115, 
	87, 88, 419, 87, 88, 420, 87, 88, 
	421, 87, 88, 422, 87, 88, 423, 87, 
	88, 424, 87, 88, 425, 87, 88, 426, 
	87, 88, 427, 87, 88, 114, 87, 428, 
	0, 1, 0, 429, 0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 75, 139, 161, 163, 165, 293, 294, 
	336, 4, 5, 6, 7, 6, 6, 7, 
	6, 8, 8, 8, 9, 8, 8, 8, 
	9, 10, 11, 12, 2, 12, 13, 2, 
	14, 16, 17, 18, 19, 20, 21, 22, 
	23, 24, 25, 26, 27, 28, 338, 30, 
	31, 2, 14, 31, 2, 14, 33, 34, 
	2, 33, 32, 34, 36, 46, 37, 38, 
	39, 40, 41, 42, 43, 44, 45, 29, 
	47, 48, 49, 50, 51, 52, 53, 52, 
	53, 53, 2, 54, 68, 300, 306, 318, 
	55, 56, 57, 58, 59, 60, 61, 62, 
	63, 64, 65, 66, 67, 2, 69, 70, 
	71, 72, 73, 74, 2, 2, 3, 13, 
	15, 29, 32, 35, 75, 139, 161, 163, 
	165, 293, 294, 76, 77, 78, 79, 80, 
	81, 82, 83, 84, 83, 84, 84, 2, 
	85, 99, 100, 116, 118, 120, 138, 86, 
	87, 88, 89, 90, 91, 92, 93, 94, 
	95, 96, 97, 98, 2, 74, 101, 111, 
	102, 103, 104, 105, 106, 107, 108, 109, 
	110, 99, 112, 113, 114, 115, 117, 119, 
	121, 122, 123, 124, 125, 126, 127, 128, 
	129, 130, 131, 132, 133, 134, 135, 136, 
	137, 140, 141, 142, 143, 144, 145, 146, 
	147, 148, 149, 150, 151, 152, 153, 154, 
	153, 154, 154, 2, 155, 156, 157, 158, 
	159, 160, 74, 162, 164, 166, 167, 168, 
	169, 170, 171, 172, 173, 230, 174, 175, 
	176, 177, 178, 179, 180, 181, 182, 183, 
	184, 185, 186, 185, 186, 186, 2, 187, 
	201, 202, 218, 220, 222, 229, 188, 189, 
	190, 191, 192, 193, 194, 195, 196, 197, 
	198, 199, 200, 2, 74, 203, 213, 204, 
	205, 206, 207, 208, 209, 210, 211, 212, 
	201, 214, 215, 216, 217, 219, 221, 223, 
	224, 225, 226, 227, 228, 231, 232, 231, 
	232, 232, 2, 233, 247, 248, 264, 270, 
	272, 274, 292, 234, 235, 236, 237, 238, 
	239, 240, 241, 242, 243, 244, 245, 246, 
	2, 74, 249, 259, 250, 251, 252, 253, 
	254, 255, 256, 257, 258, 247, 260, 261, 
	262, 263, 265, 266, 267, 268, 269, 271, 
	273, 275, 276, 277, 278, 279, 280, 281, 
	282, 283, 284, 285, 286, 287, 288, 289, 
	290, 291, 294, 295, 296, 298, 299, 297, 
	295, 296, 297, 295, 298, 299, 3, 13, 
	15, 29, 32, 35, 75, 139, 161, 163, 
	165, 293, 294, 301, 302, 303, 304, 305, 
	307, 308, 309, 310, 311, 312, 313, 314, 
	315, 316, 317, 319, 320, 321, 322, 323, 
	324, 325, 326, 327, 328, 329, 330, 331, 
	332, 333, 334, 335, 337, 0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 35, 
	0, 0, 0, 7, 139, 48, 0, 102, 
	9, 5, 45, 134, 45, 0, 33, 122, 
	33, 33, 0, 11, 106, 0, 0, 114, 
	25, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 149, 126, 0, 110, 23, 0, 27, 
	118, 27, 51, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 0, 69, 33, 84, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 13, 0, 0, 
	0, 0, 0, 13, 31, 130, 60, 57, 
	31, 63, 57, 63, 63, 63, 63, 63, 
	63, 63, 66, 0, 0, 0, 0, 0, 
	0, 0, 57, 144, 0, 54, 0, 72, 
	33, 84, 84, 84, 84, 84, 84, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 15, 15, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 0, 81, 84, 0, 0, 0, 
	0, 0, 21, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 144, 0, 54, 0, 78, 33, 
	84, 84, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 19, 19, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 0, 75, 33, 84, 84, 84, 84, 
	84, 84, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	17, 17, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 37, 37, 54, 37, 
	87, 0, 0, 39, 0, 0, 93, 90, 
	41, 96, 90, 96, 96, 96, 96, 96, 
	96, 96, 99, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 338;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/cy_gb.js.rl" */

/* line 130 "ragel/i18n/cy_gb.js.rl" */

/* line 131 "ragel/i18n/cy_gb.js.rl" */

/* line 132 "ragel/i18n/cy_gb.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 657 "js/lib/gherkin/lexer/cy_gb.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/cy_gb.js.rl" */
  
/* line 664 "js/lib/gherkin/lexer/cy_gb.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/cy_gb.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/cy_gb.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/cy_gb.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/cy_gb.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/cy_gb.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/cy_gb.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/cy_gb.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/cy_gb.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/cy_gb.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/cy_gb.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/cy_gb.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/cy_gb.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/cy_gb.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/cy_gb.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/cy_gb.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/cy_gb.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/cy_gb.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/cy_gb.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/cy_gb.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/cy_gb.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/cy_gb.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/cy_gb.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/cy_gb.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/cy_gb.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 891 "js/lib/gherkin/lexer/cy_gb.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/cy_gb.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 930 "js/lib/gherkin/lexer/cy_gb.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/cy_gb.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/cy_gb', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/cy_gb', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();
