
/* line 1 "ragel/i18n/sr_latn.js.rl" */
;(function() {


/* line 126 "ragel/i18n/sr_latn.js.rl" */



/* line 11 "js/lib/gherkin/lexer/sr_latn.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 20, 39, 40, 41, 43, 45, 
	50, 55, 60, 65, 69, 73, 75, 76, 
	77, 78, 79, 80, 81, 82, 83, 84, 
	85, 86, 87, 88, 89, 90, 91, 93, 
	95, 100, 107, 112, 113, 114, 115, 116, 
	117, 118, 119, 120, 121, 122, 123, 124, 
	125, 126, 127, 128, 129, 130, 143, 145, 
	147, 149, 151, 153, 155, 157, 159, 161, 
	163, 165, 167, 169, 171, 173, 175, 177, 
	179, 181, 183, 185, 187, 189, 191, 193, 
	195, 197, 199, 218, 220, 221, 223, 224, 
	226, 227, 228, 229, 230, 231, 232, 249, 
	251, 253, 255, 257, 259, 261, 263, 265, 
	267, 269, 271, 273, 275, 277, 279, 281, 
	283, 285, 287, 289, 291, 293, 295, 297, 
	299, 301, 303, 305, 307, 309, 311, 313, 
	315, 318, 320, 322, 324, 327, 329, 332, 
	334, 336, 338, 340, 342, 344, 346, 348, 
	350, 352, 354, 356, 358, 360, 362, 364, 
	366, 368, 370, 372, 375, 377, 379, 382, 
	384, 386, 387, 388, 389, 390, 391, 392, 
	393, 410, 412, 414, 416, 418, 420, 422, 
	424, 426, 428, 430, 432, 434, 436, 438, 
	440, 442, 444, 446, 448, 450, 452, 454, 
	456, 458, 460, 462, 464, 466, 468, 470, 
	472, 475, 477, 480, 482, 484, 486, 488, 
	490, 492, 494, 497, 499, 502, 504, 506, 
	508, 510, 512, 514, 516, 518, 520, 522, 
	524, 526, 530, 532, 534, 536, 538, 540, 
	542, 544, 546, 548, 550, 552, 554, 556, 
	558, 560, 562, 564, 566, 568, 570, 572, 
	574, 576, 578, 580, 583, 585, 587, 590, 
	592, 594, 595, 596, 597, 599, 600, 602, 
	603, 604, 606, 607, 608, 609, 610, 611, 
	612, 613, 615, 616, 617, 618, 619, 620, 
	621, 622, 623, 624, 626, 627, 628, 645, 
	647, 649, 651, 653, 655, 657, 659, 661, 
	663, 665, 667, 669, 671, 673, 675, 677, 
	679, 681, 683, 685, 687, 689, 691, 693, 
	695, 697, 699, 701, 703, 705, 707, 710, 
	712, 715, 717, 720, 722, 724, 726, 728, 
	730, 732, 734, 737, 739, 742, 744, 746, 
	749, 751, 753, 755, 757, 759, 761, 764, 
	766, 768, 770, 772, 774, 776, 778, 782, 
	784, 786, 788, 790, 792, 794, 796, 798, 
	800, 802, 804, 806, 808, 810, 812, 814, 
	816, 818, 820, 822, 824, 826, 828, 830, 
	832, 835, 837, 839, 842, 844, 846, 847, 
	848, 849, 858, 860, 862, 864, 866, 868, 
	870, 872, 874, 876, 878, 880, 882, 884, 
	886, 888, 890, 892, 895, 897, 899, 901, 
	903, 905, 907, 909, 912, 913, 914, 915, 
	916, 917, 919, 920, 921, 922, 923, 924, 
	925, 926, 927, 928, 929, 930, 931, 932, 
	933, 934, 935, 936, 937, 938, 939, 940, 
	941, 943, 944, 945, 947, 948, 949, 953, 
	959, 962, 964, 970, 989, 991, 993, 996, 
	998, 1000, 1002, 1004, 1006, 1008, 1010, 1013, 
	1015, 1017, 1020, 1022, 1024, 1026, 1028, 1030, 
	1032, 1035, 1037, 1039, 1041, 1043, 1045, 1047, 
	1049, 1052, 1056, 1058, 1060, 1062, 1064, 1066, 
	1069, 1071, 1073, 1075, 1077, 1079, 1081, 1083, 
	1085, 1087, 1089, 1091, 1093, 1095, 1097, 1099, 
	1101, 1103, 1105, 1107, 1108, 1109
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	70, 73, 75, 77, 79, 80, 83, 90, 
	124, 239, 9, 13, 10, 32, 34, 35, 
	37, 42, 64, 65, 70, 73, 75, 77, 
	79, 80, 83, 90, 124, 9, 13, 34, 
	34, 10, 13, 10, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 9, 13, 10, 32, 9, 
	13, 10, 13, 10, 95, 70, 69, 65, 
	84, 85, 82, 69, 95, 69, 78, 68, 
	95, 37, 32, 10, 13, 10, 13, 13, 
	32, 64, 9, 10, 9, 10, 13, 32, 
	64, 11, 12, 10, 32, 64, 9, 13, 
	108, 105, 117, 110, 107, 99, 105, 111, 
	110, 97, 108, 110, 111, 115, 116, 58, 
	10, 10, 10, 32, 35, 37, 64, 70, 
	75, 77, 79, 80, 83, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 117, 10, 110, 10, 
	107, 10, 99, 10, 105, 10, 111, 10, 
	110, 10, 97, 10, 108, 10, 110, 10, 
	111, 10, 115, 10, 116, 10, 58, 10, 
	32, 34, 35, 37, 42, 64, 65, 70, 
	73, 75, 77, 79, 80, 83, 90, 124, 
	9, 13, 97, 111, 100, 32, 97, 110, 
	99, 116, 101, 112, 116, 58, 10, 10, 
	10, 32, 35, 37, 42, 64, 65, 70, 
	73, 75, 77, 79, 80, 83, 90, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 32, 10, 
	108, 10, 105, 10, 117, 10, 110, 10, 
	107, 10, 99, 10, 105, 10, 111, 10, 
	110, 10, 97, 10, 108, 10, 110, 10, 
	111, 10, 115, 10, 116, 10, 58, 10, 
	97, 10, 100, 10, 32, 97, 10, 111, 
	10, 103, 10, 117, -60, 10, 99, -121, 
	10, 10, 110, 115, 10, 100, 10, 97, 
	10, 111, 10, 98, 10, 105, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 109, 
	10, 101, 10, 114, 10, 99, 10, 101, 
	10, 110, 10, 97, 10, 114, 10, 105, 
	10, 111, 10, 97, 10, 100, 116, 10, 
	97, 10, 116, 10, 101, 111, 10, 97, 
	10, 116, 101, 107, 115, 116, 58, 10, 
	10, 10, 32, 35, 37, 42, 64, 65, 
	70, 73, 75, 77, 79, 80, 83, 90, 
	9, 13, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 32, 
	10, 108, 10, 105, 10, 117, 10, 110, 
	10, 107, 10, 99, 10, 105, 10, 111, 
	10, 110, 10, 97, 10, 108, 10, 110, 
	10, 111, 10, 115, 10, 116, 10, 58, 
	10, 97, 111, 10, 100, 10, 32, 97, 
	10, 110, 10, 99, 10, 101, 10, 112, 
	10, 111, 10, 103, 10, 117, -60, 10, 
	99, -121, 10, 10, 110, 115, 10, 100, 
	10, 97, 10, 111, 10, 98, 10, 105, 
	10, 110, 10, 97, 10, 114, 10, 105, 
	10, 109, 10, 101, 10, 114, 10, 99, 
	107, 116, 10, 101, 10, 110, 10, 97, 
	10, 114, 10, 105, 10, 111, 10, 105, 
	10, 99, 10, 114, 10, 117, 10, 107, 
	10, 116, 10, 117, 10, 114, 10, 97, 
	10, 32, 10, 115, 10, 99, 10, 101, 
	10, 110, 10, 97, 10, 114, 10, 105, 
	10, 106, 10, 97, 10, 100, 116, 10, 
	97, 10, 116, 10, 101, 111, 10, 97, 
	10, 116, 111, 103, 117, -60, 99, -121, 
	110, 115, 100, 97, 110, 111, 111, 118, 
	97, 98, 105, 110, 97, 111, 114, 122, 
	97, 100, 105, 110, 105, 109, 101, 114, 
	58, 105, 10, 10, 10, 32, 35, 37, 
	42, 64, 65, 70, 73, 75, 77, 79, 
	80, 83, 90, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 32, 10, 108, 10, 105, 10, 
	117, 10, 110, 10, 107, 10, 99, 10, 
	105, 10, 111, 10, 110, 10, 97, 10, 
	108, 10, 110, 10, 111, 10, 115, 10, 
	116, 10, 58, 10, 97, 111, 10, 100, 
	10, 32, 97, 10, 110, 10, 99, 116, 
	10, 101, 10, 112, 10, 101, 10, 107, 
	10, 111, 10, 103, 10, 117, -60, 10, 
	99, -121, 10, 10, 110, 115, 10, 100, 
	10, 97, 10, 110, 111, 10, 111, 10, 
	118, 10, 97, 10, 98, 10, 105, 10, 
	110, 10, 111, 114, 10, 122, 10, 97, 
	10, 100, 10, 105, 10, 109, 10, 101, 
	10, 114, 10, 99, 107, 116, 10, 101, 
	10, 110, 10, 97, 10, 114, 10, 105, 
	10, 111, 10, 105, 10, 99, 10, 114, 
	10, 117, 10, 107, 10, 116, 10, 117, 
	10, 114, 10, 97, 10, 32, 10, 115, 
	10, 99, 10, 101, 10, 110, 10, 97, 
	10, 114, 10, 105, 10, 106, 10, 97, 
	10, 100, 116, 10, 97, 10, 116, 10, 
	101, 111, 10, 97, 10, 116, 58, 10, 
	10, 10, 32, 35, 70, 77, 79, 124, 
	9, 13, 10, 117, 10, 110, 10, 107, 
	10, 99, 10, 105, 10, 111, 10, 110, 
	10, 97, 10, 108, 10, 110, 10, 111, 
	10, 115, 10, 116, 10, 58, 10, 111, 
	10, 103, 10, 117, -60, 10, 99, -121, 
	10, 10, 115, 10, 111, 10, 98, 10, 
	105, 10, 110, 10, 97, 99, 107, 116, 
	101, 110, 97, 114, 105, 106, 111, 105, 
	58, 105, 99, 97, 114, 117, 107, 116, 
	117, 114, 97, 32, 115, 99, 101, 110, 
	97, 114, 105, 106, 97, 100, 116, 97, 
	116, 101, 111, 97, 116, 32, 124, 9, 
	13, 10, 32, 92, 124, 9, 13, 10, 
	92, 124, 10, 92, 10, 32, 92, 124, 
	9, 13, 10, 32, 34, 35, 37, 42, 
	64, 65, 70, 73, 75, 77, 79, 80, 
	83, 90, 124, 9, 13, 10, 111, 10, 
	110, 10, 99, 116, 10, 101, 10, 112, 
	10, 101, 10, 107, 10, 111, 10, 103, 
	10, 117, -60, 10, 99, -121, 10, 10, 
	115, 10, 110, 111, 10, 111, 10, 118, 
	10, 97, 10, 98, 10, 105, 10, 110, 
	10, 111, 114, 10, 122, 10, 97, 10, 
	100, 10, 105, 10, 109, 10, 101, 10, 
	114, 10, 58, 105, 10, 99, 107, 116, 
	10, 101, 10, 110, 10, 97, 10, 114, 
	10, 105, 10, 106, 111, 10, 105, 10, 
	105, 10, 99, 10, 114, 10, 117, 10, 
	107, 10, 116, 10, 117, 10, 114, 10, 
	97, 10, 32, 10, 115, 10, 99, 10, 
	101, 10, 110, 10, 97, 10, 114, 10, 
	105, 10, 106, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 18, 17, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 11, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 17, 2, 1, 2, 1, 2, 
	1, 1, 1, 1, 1, 1, 15, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 3, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 3, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	15, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 4, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 3, 2, 
	2, 1, 1, 1, 2, 1, 2, 1, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 15, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	3, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 3, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 4, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 3, 2, 2, 1, 1, 
	1, 7, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 3, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	2, 1, 1, 2, 1, 1, 2, 4, 
	3, 2, 4, 17, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	3, 4, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	0, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 20, 39, 41, 43, 46, 49, 
	54, 59, 64, 69, 73, 77, 80, 82, 
	84, 86, 88, 90, 92, 94, 96, 98, 
	100, 102, 104, 106, 108, 110, 112, 115, 
	118, 123, 130, 135, 137, 139, 141, 143, 
	145, 147, 149, 151, 153, 155, 157, 159, 
	161, 163, 165, 167, 169, 171, 184, 187, 
	190, 193, 196, 199, 202, 205, 208, 211, 
	214, 217, 220, 223, 226, 229, 232, 235, 
	238, 241, 244, 247, 250, 253, 256, 259, 
	262, 265, 268, 287, 290, 292, 295, 297, 
	300, 302, 304, 306, 308, 310, 312, 329, 
	332, 335, 338, 341, 344, 347, 350, 353, 
	356, 359, 362, 365, 368, 371, 374, 377, 
	380, 383, 386, 389, 392, 395, 398, 401, 
	404, 407, 410, 413, 416, 419, 422, 425, 
	428, 432, 435, 438, 441, 445, 448, 452, 
	455, 458, 461, 464, 467, 470, 473, 476, 
	479, 482, 485, 488, 491, 494, 497, 500, 
	503, 506, 509, 512, 516, 519, 522, 526, 
	529, 532, 534, 536, 538, 540, 542, 544, 
	546, 563, 566, 569, 572, 575, 578, 581, 
	584, 587, 590, 593, 596, 599, 602, 605, 
	608, 611, 614, 617, 620, 623, 626, 629, 
	632, 635, 638, 641, 644, 647, 650, 653, 
	656, 660, 663, 667, 670, 673, 676, 679, 
	682, 685, 688, 692, 695, 699, 702, 705, 
	708, 711, 714, 717, 720, 723, 726, 729, 
	732, 735, 740, 743, 746, 749, 752, 755, 
	758, 761, 764, 767, 770, 773, 776, 779, 
	782, 785, 788, 791, 794, 797, 800, 803, 
	806, 809, 812, 815, 819, 822, 825, 829, 
	832, 835, 837, 839, 841, 844, 846, 849, 
	851, 853, 856, 858, 860, 862, 864, 866, 
	868, 870, 873, 875, 877, 879, 881, 883, 
	885, 887, 889, 891, 894, 896, 898, 915, 
	918, 921, 924, 927, 930, 933, 936, 939, 
	942, 945, 948, 951, 954, 957, 960, 963, 
	966, 969, 972, 975, 978, 981, 984, 987, 
	990, 993, 996, 999, 1002, 1005, 1008, 1012, 
	1015, 1019, 1022, 1026, 1029, 1032, 1035, 1038, 
	1041, 1044, 1047, 1051, 1054, 1058, 1061, 1064, 
	1068, 1071, 1074, 1077, 1080, 1083, 1086, 1090, 
	1093, 1096, 1099, 1102, 1105, 1108, 1111, 1116, 
	1119, 1122, 1125, 1128, 1131, 1134, 1137, 1140, 
	1143, 1146, 1149, 1152, 1155, 1158, 1161, 1164, 
	1167, 1170, 1173, 1176, 1179, 1182, 1185, 1188, 
	1191, 1195, 1198, 1201, 1205, 1208, 1211, 1213, 
	1215, 1217, 1226, 1229, 1232, 1235, 1238, 1241, 
	1244, 1247, 1250, 1253, 1256, 1259, 1262, 1265, 
	1268, 1271, 1274, 1277, 1281, 1284, 1287, 1290, 
	1293, 1296, 1299, 1302, 1306, 1308, 1310, 1312, 
	1314, 1316, 1319, 1321, 1323, 1325, 1327, 1329, 
	1331, 1333, 1335, 1337, 1339, 1341, 1343, 1345, 
	1347, 1349, 1351, 1353, 1355, 1357, 1359, 1361, 
	1363, 1366, 1368, 1370, 1373, 1375, 1377, 1381, 
	1387, 1391, 1394, 1400, 1419, 1422, 1425, 1429, 
	1432, 1435, 1438, 1441, 1444, 1447, 1450, 1454, 
	1457, 1460, 1464, 1467, 1470, 1473, 1476, 1479, 
	1482, 1486, 1489, 1492, 1495, 1498, 1501, 1504, 
	1507, 1511, 1516, 1519, 1522, 1525, 1528, 1531, 
	1535, 1538, 1541, 1544, 1547, 1550, 1553, 1556, 
	1559, 1562, 1565, 1568, 1571, 1574, 1577, 1580, 
	1583, 1586, 1589, 1592, 1594, 1596
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 6, 10, 11, 12, 13, 14, 15, 
	16, 17, 1, 0, 2, 1, 3, 4, 
	5, 6, 7, 8, 9, 6, 10, 11, 
	12, 13, 14, 15, 16, 1, 0, 18, 
	0, 19, 0, 21, 22, 20, 24, 25, 
	23, 28, 27, 29, 27, 26, 32, 31, 
	33, 31, 30, 32, 31, 34, 31, 30, 
	32, 31, 35, 31, 30, 37, 36, 36, 
	0, 2, 38, 38, 0, 40, 41, 39, 
	2, 0, 42, 0, 43, 0, 44, 0, 
	45, 0, 46, 0, 47, 0, 48, 0, 
	49, 0, 50, 0, 51, 0, 52, 0, 
	53, 0, 54, 0, 55, 0, 56, 0, 
	58, 59, 57, 61, 62, 60, 0, 0, 
	0, 0, 63, 64, 65, 64, 64, 67, 
	66, 63, 2, 68, 7, 68, 0, 69, 
	0, 70, 0, 71, 0, 72, 0, 73, 
	0, 74, 0, 75, 0, 76, 0, 77, 
	0, 78, 0, 79, 0, 80, 0, 81, 
	0, 82, 0, 83, 0, 84, 0, 86, 
	85, 88, 87, 88, 89, 90, 91, 90, 
	92, 93, 94, 95, 96, 97, 89, 87, 
	88, 98, 87, 88, 99, 87, 88, 100, 
	87, 88, 101, 87, 88, 102, 87, 88, 
	103, 87, 88, 104, 87, 88, 105, 87, 
	88, 106, 87, 88, 107, 87, 88, 108, 
	87, 88, 109, 87, 88, 110, 87, 88, 
	111, 87, 88, 112, 87, 88, 113, 87, 
	88, 114, 87, 88, 115, 87, 88, 116, 
	87, 88, 117, 87, 88, 118, 87, 88, 
	119, 87, 88, 120, 87, 88, 121, 87, 
	88, 122, 87, 88, 123, 87, 88, 124, 
	87, 88, 125, 87, 127, 126, 128, 129, 
	130, 131, 132, 133, 134, 131, 135, 136, 
	137, 138, 139, 140, 141, 126, 0, 142, 
	143, 0, 144, 0, 56, 70, 0, 145, 
	0, 146, 147, 0, 148, 0, 149, 0, 
	150, 0, 151, 0, 153, 152, 155, 154, 
	155, 156, 157, 158, 159, 157, 160, 161, 
	159, 162, 163, 164, 165, 166, 167, 156, 
	154, 155, 168, 154, 155, 169, 154, 155, 
	170, 154, 155, 171, 154, 155, 172, 154, 
	155, 173, 154, 155, 174, 154, 155, 175, 
	154, 155, 176, 154, 155, 177, 154, 155, 
	178, 154, 155, 179, 154, 155, 180, 154, 
	155, 181, 154, 155, 182, 154, 155, 183, 
	154, 155, 184, 154, 155, 185, 154, 155, 
	186, 154, 155, 187, 154, 155, 188, 154, 
	155, 189, 154, 155, 190, 154, 155, 191, 
	154, 155, 192, 154, 155, 193, 154, 155, 
	194, 154, 155, 195, 154, 155, 196, 154, 
	155, 197, 154, 155, 182, 154, 155, 198, 
	154, 155, 199, 154, 155, 182, 184, 154, 
	155, 200, 154, 155, 201, 154, 155, 202, 
	154, 203, 155, 193, 154, 193, 155, 154, 
	155, 204, 205, 154, 155, 206, 154, 155, 
	184, 154, 155, 207, 154, 155, 208, 154, 
	155, 209, 154, 155, 210, 154, 155, 197, 
	154, 155, 211, 154, 155, 212, 154, 155, 
	213, 154, 155, 214, 154, 155, 197, 154, 
	155, 215, 154, 155, 216, 154, 155, 217, 
	154, 155, 218, 154, 155, 219, 154, 155, 
	220, 154, 155, 197, 154, 155, 221, 154, 
	155, 222, 223, 154, 155, 224, 154, 155, 
	225, 154, 155, 184, 184, 154, 155, 226, 
	154, 155, 183, 154, 227, 0, 228, 0, 
	229, 0, 230, 0, 231, 0, 233, 232, 
	235, 234, 235, 236, 237, 238, 239, 237, 
	240, 241, 239, 242, 243, 244, 245, 246, 
	247, 236, 234, 235, 248, 234, 235, 249, 
	234, 235, 250, 234, 235, 251, 234, 235, 
	252, 234, 235, 253, 234, 235, 254, 234, 
	235, 255, 234, 235, 256, 234, 235, 257, 
	234, 235, 258, 234, 235, 259, 234, 235, 
	260, 234, 235, 261, 234, 235, 262, 234, 
	235, 263, 234, 235, 264, 234, 235, 265, 
	234, 235, 266, 234, 235, 267, 234, 235, 
	268, 234, 235, 269, 234, 235, 270, 234, 
	235, 271, 234, 235, 272, 234, 235, 273, 
	234, 235, 274, 234, 235, 275, 234, 235, 
	276, 234, 235, 277, 234, 235, 262, 234, 
	235, 278, 279, 234, 235, 280, 234, 235, 
	262, 264, 234, 235, 281, 234, 235, 282, 
	234, 235, 283, 234, 235, 276, 234, 235, 
	284, 234, 235, 285, 234, 235, 286, 234, 
	287, 235, 273, 234, 273, 235, 234, 235, 
	288, 289, 234, 235, 290, 234, 235, 264, 
	234, 235, 291, 234, 235, 292, 234, 235, 
	293, 234, 235, 294, 234, 235, 277, 234, 
	235, 295, 234, 235, 296, 234, 235, 297, 
	234, 235, 298, 234, 235, 277, 234, 235, 
	299, 300, 301, 234, 235, 302, 234, 235, 
	303, 234, 235, 304, 234, 235, 305, 234, 
	235, 306, 234, 235, 277, 234, 235, 307, 
	234, 235, 294, 234, 235, 308, 234, 235, 
	309, 234, 235, 310, 234, 235, 311, 234, 
	235, 312, 234, 235, 313, 234, 235, 314, 
	234, 235, 315, 234, 235, 316, 234, 235, 
	317, 234, 235, 318, 234, 235, 319, 234, 
	235, 320, 234, 235, 321, 234, 235, 322, 
	234, 235, 294, 234, 235, 323, 234, 235, 
	324, 325, 234, 235, 326, 234, 235, 327, 
	234, 235, 264, 264, 234, 235, 328, 234, 
	235, 263, 234, 329, 0, 330, 0, 331, 
	0, 332, 79, 0, 79, 0, 333, 334, 
	0, 335, 0, 70, 0, 336, 337, 0, 
	338, 0, 339, 0, 230, 0, 340, 0, 
	341, 0, 342, 0, 83, 0, 343, 344, 
	0, 345, 0, 346, 0, 347, 0, 348, 
	0, 339, 0, 349, 0, 350, 0, 351, 
	0, 352, 0, 353, 354, 0, 356, 355, 
	358, 357, 358, 359, 360, 361, 362, 360, 
	363, 364, 362, 365, 366, 367, 368, 369, 
	370, 359, 357, 358, 371, 357, 358, 372, 
	357, 358, 373, 357, 358, 374, 357, 358, 
	375, 357, 358, 376, 357, 358, 377, 357, 
	358, 378, 357, 358, 379, 357, 358, 380, 
	357, 358, 381, 357, 358, 382, 357, 358, 
	383, 357, 358, 384, 357, 358, 385, 357, 
	358, 386, 357, 358, 387, 357, 358, 388, 
	357, 358, 389, 357, 358, 390, 357, 358, 
	391, 357, 358, 392, 357, 358, 393, 357, 
	358, 394, 357, 358, 395, 357, 358, 396, 
	357, 358, 397, 357, 358, 398, 357, 358, 
	399, 357, 358, 400, 357, 358, 385, 357, 
	358, 401, 402, 357, 358, 403, 357, 358, 
	385, 387, 357, 358, 404, 357, 358, 405, 
	406, 357, 358, 407, 357, 358, 399, 357, 
	358, 408, 357, 358, 398, 357, 358, 409, 
	357, 358, 410, 357, 358, 411, 357, 412, 
	358, 396, 357, 396, 358, 357, 358, 413, 
	414, 357, 358, 415, 357, 358, 387, 357, 
	358, 416, 417, 357, 358, 418, 357, 358, 
	419, 357, 358, 400, 357, 358, 420, 357, 
	358, 421, 357, 358, 419, 357, 358, 422, 
	423, 357, 358, 424, 357, 358, 425, 357, 
	358, 420, 357, 358, 426, 357, 358, 427, 
	357, 358, 428, 357, 358, 400, 357, 358, 
	429, 430, 431, 357, 358, 432, 357, 358, 
	433, 357, 358, 434, 357, 358, 435, 357, 
	358, 436, 357, 358, 400, 357, 358, 437, 
	357, 358, 419, 357, 358, 438, 357, 358, 
	439, 357, 358, 440, 357, 358, 441, 357, 
	358, 442, 357, 358, 443, 357, 358, 444, 
	357, 358, 445, 357, 358, 446, 357, 358, 
	447, 357, 358, 448, 357, 358, 449, 357, 
	358, 450, 357, 358, 451, 357, 358, 452, 
	357, 358, 419, 357, 358, 453, 357, 358, 
	454, 455, 357, 358, 456, 357, 358, 457, 
	357, 358, 387, 387, 357, 358, 458, 357, 
	358, 386, 357, 459, 0, 461, 460, 463, 
	462, 463, 464, 465, 466, 467, 468, 465, 
	464, 462, 463, 469, 462, 463, 470, 462, 
	463, 471, 462, 463, 472, 462, 463, 473, 
	462, 463, 474, 462, 463, 475, 462, 463, 
	476, 462, 463, 477, 462, 463, 478, 462, 
	463, 479, 462, 463, 480, 462, 463, 481, 
	462, 463, 482, 462, 463, 483, 462, 463, 
	484, 462, 463, 485, 462, 486, 463, 477, 
	462, 477, 463, 462, 463, 487, 462, 463, 
	488, 462, 463, 489, 462, 463, 490, 462, 
	463, 491, 462, 463, 481, 462, 492, 493, 
	494, 0, 495, 0, 496, 0, 497, 0, 
	498, 0, 499, 0, 500, 501, 0, 354, 
	0, 353, 0, 502, 0, 503, 0, 150, 
	0, 504, 0, 505, 0, 506, 0, 507, 
	0, 508, 0, 509, 0, 510, 0, 511, 
	0, 512, 0, 513, 0, 514, 0, 515, 
	0, 516, 0, 517, 0, 518, 0, 503, 
	0, 519, 0, 520, 521, 0, 522, 0, 
	523, 0, 70, 70, 0, 524, 0, 69, 
	0, 525, 526, 525, 0, 529, 528, 530, 
	531, 528, 527, 0, 533, 534, 532, 0, 
	533, 532, 529, 535, 533, 534, 535, 532, 
	529, 536, 537, 538, 539, 540, 541, 542, 
	543, 540, 544, 545, 546, 547, 548, 549, 
	550, 536, 0, 88, 551, 87, 88, 552, 
	87, 88, 553, 554, 87, 88, 555, 87, 
	88, 123, 87, 88, 556, 87, 88, 122, 
	87, 88, 557, 87, 88, 558, 87, 88, 
	559, 87, 560, 88, 120, 87, 120, 88, 
	87, 88, 561, 87, 88, 562, 563, 87, 
	88, 564, 87, 88, 565, 87, 88, 124, 
	87, 88, 566, 87, 88, 567, 87, 88, 
	565, 87, 88, 568, 569, 87, 88, 570, 
	87, 88, 571, 87, 88, 566, 87, 88, 
	572, 87, 88, 573, 87, 88, 574, 87, 
	88, 575, 87, 88, 125, 124, 87, 88, 
	576, 577, 578, 87, 88, 579, 87, 88, 
	580, 87, 88, 581, 87, 88, 582, 87, 
	88, 583, 87, 88, 584, 124, 87, 88, 
	124, 87, 88, 585, 87, 88, 565, 87, 
	88, 586, 87, 88, 587, 87, 88, 588, 
	87, 88, 589, 87, 88, 590, 87, 88, 
	591, 87, 88, 592, 87, 88, 593, 87, 
	88, 594, 87, 88, 595, 87, 88, 596, 
	87, 88, 597, 87, 88, 598, 87, 88, 
	599, 87, 88, 600, 87, 88, 565, 87, 
	601, 0, 1, 0, 602, 0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 37, 83, 257, 262, 273, 411, 439, 
	446, 507, 4, 5, 6, 7, 6, 6, 
	7, 6, 8, 8, 8, 9, 8, 8, 
	8, 9, 10, 11, 12, 2, 12, 13, 
	2, 14, 16, 17, 18, 19, 20, 21, 
	22, 23, 24, 25, 26, 27, 28, 509, 
	30, 31, 2, 14, 31, 2, 14, 33, 
	34, 2, 33, 32, 34, 36, 29, 38, 
	39, 40, 41, 42, 43, 44, 45, 46, 
	47, 48, 49, 50, 51, 52, 53, 52, 
	53, 53, 2, 54, 68, 452, 459, 464, 
	472, 481, 55, 56, 57, 58, 59, 60, 
	61, 62, 63, 64, 65, 66, 67, 2, 
	69, 70, 71, 72, 73, 74, 75, 76, 
	77, 78, 79, 80, 81, 82, 2, 2, 
	3, 13, 15, 29, 32, 35, 37, 83, 
	257, 262, 273, 411, 439, 446, 84, 86, 
	85, 87, 88, 161, 89, 90, 91, 92, 
	93, 94, 93, 94, 94, 2, 95, 109, 
	110, 112, 126, 129, 134, 142, 147, 154, 
	96, 97, 98, 99, 100, 101, 102, 103, 
	104, 105, 106, 107, 108, 2, 82, 111, 
	109, 113, 114, 115, 116, 117, 118, 119, 
	120, 121, 122, 123, 124, 125, 127, 128, 
	130, 131, 132, 133, 135, 137, 136, 138, 
	139, 140, 141, 143, 144, 145, 146, 148, 
	149, 150, 151, 152, 153, 155, 156, 159, 
	157, 158, 160, 162, 163, 164, 165, 166, 
	167, 168, 167, 168, 168, 2, 169, 183, 
	184, 186, 200, 207, 212, 220, 225, 250, 
	170, 171, 172, 173, 174, 175, 176, 177, 
	178, 179, 180, 181, 182, 2, 82, 185, 
	183, 187, 188, 189, 190, 191, 192, 193, 
	194, 195, 196, 197, 198, 199, 201, 203, 
	202, 204, 205, 206, 208, 209, 210, 211, 
	213, 215, 214, 216, 217, 218, 219, 221, 
	222, 223, 224, 226, 232, 234, 227, 228, 
	229, 230, 231, 233, 235, 236, 237, 238, 
	239, 240, 241, 242, 243, 244, 245, 246, 
	247, 248, 249, 251, 252, 255, 253, 254, 
	256, 258, 259, 260, 261, 263, 265, 264, 
	266, 269, 267, 268, 270, 271, 272, 274, 
	279, 275, 276, 277, 278, 280, 281, 282, 
	283, 284, 382, 285, 286, 285, 286, 286, 
	2, 287, 301, 302, 304, 318, 327, 332, 
	342, 350, 375, 288, 289, 290, 291, 292, 
	293, 294, 295, 296, 297, 298, 299, 300, 
	2, 82, 303, 301, 305, 306, 307, 308, 
	309, 310, 311, 312, 313, 314, 315, 316, 
	317, 319, 321, 320, 322, 323, 325, 324, 
	326, 328, 329, 330, 331, 333, 335, 334, 
	336, 339, 337, 338, 340, 341, 343, 346, 
	344, 345, 347, 348, 349, 351, 357, 359, 
	352, 353, 354, 355, 356, 358, 360, 361, 
	362, 363, 364, 365, 366, 367, 368, 369, 
	370, 371, 372, 373, 374, 376, 377, 380, 
	378, 379, 381, 383, 384, 385, 384, 385, 
	385, 2, 386, 400, 405, 387, 388, 389, 
	390, 391, 392, 393, 394, 395, 396, 397, 
	398, 399, 82, 401, 402, 403, 404, 406, 
	407, 408, 409, 410, 412, 420, 423, 413, 
	414, 415, 416, 417, 418, 419, 421, 422, 
	424, 425, 426, 427, 428, 429, 430, 431, 
	432, 433, 434, 435, 436, 437, 438, 440, 
	441, 444, 442, 443, 445, 446, 447, 448, 
	450, 451, 449, 447, 448, 449, 447, 450, 
	451, 3, 13, 15, 29, 32, 35, 37, 
	83, 257, 262, 273, 411, 439, 446, 453, 
	454, 455, 457, 456, 458, 460, 461, 462, 
	463, 465, 466, 469, 467, 468, 470, 471, 
	473, 476, 474, 475, 477, 478, 479, 480, 
	482, 489, 491, 483, 484, 485, 486, 487, 
	488, 490, 492, 493, 494, 495, 496, 497, 
	498, 499, 500, 501, 502, 503, 504, 505, 
	506, 508, 0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	35, 0, 0, 0, 7, 139, 48, 0, 
	102, 9, 5, 45, 134, 45, 0, 33, 
	122, 33, 33, 0, 11, 106, 0, 0, 
	114, 25, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 149, 126, 0, 110, 23, 0, 
	27, 118, 27, 51, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 0, 69, 33, 84, 84, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 13, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 13, 31, 130, 
	60, 57, 31, 63, 57, 63, 63, 63, 
	63, 63, 63, 63, 63, 66, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 144, 0, 54, 0, 78, 33, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 19, 19, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 144, 0, 54, 0, 72, 33, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 15, 15, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 0, 
	75, 33, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	17, 17, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	0, 81, 84, 84, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 21, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 37, 
	37, 54, 37, 87, 0, 0, 39, 0, 
	0, 93, 90, 41, 96, 90, 96, 96, 
	96, 96, 96, 96, 96, 96, 99, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 509;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/sr_latn.js.rl" */

/* line 130 "ragel/i18n/sr_latn.js.rl" */

/* line 131 "ragel/i18n/sr_latn.js.rl" */

/* line 132 "ragel/i18n/sr_latn.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 919 "js/lib/gherkin/lexer/sr_latn.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/sr_latn.js.rl" */
  
/* line 926 "js/lib/gherkin/lexer/sr_latn.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/sr_latn.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/sr_latn.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/sr_latn.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/sr_latn.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/sr_latn.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/sr_latn.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/sr_latn.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/sr_latn.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/sr_latn.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/sr_latn.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/sr_latn.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/sr_latn.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/sr_latn.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/sr_latn.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/sr_latn.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/sr_latn.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/sr_latn.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/sr_latn.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/sr_latn.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/sr_latn.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/sr_latn.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/sr_latn.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/sr_latn.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/sr_latn.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1153 "js/lib/gherkin/lexer/sr_latn.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/sr_latn.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1192 "js/lib/gherkin/lexer/sr_latn.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/sr_latn.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/sr_latn', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/sr_latn', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();
