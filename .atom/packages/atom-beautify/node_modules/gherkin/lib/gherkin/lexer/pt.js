
/* line 1 "ragel/i18n/pt.js.rl" */
;(function() {


/* line 126 "ragel/i18n/pt.js.rl" */



/* line 11 "js/lib/gherkin/lexer/pt.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 17, 33, 34, 35, 37, 39, 
	44, 49, 54, 59, 63, 67, 69, 70, 
	71, 72, 73, 74, 75, 76, 77, 78, 
	79, 80, 81, 82, 83, 84, 85, 87, 
	89, 94, 101, 106, 109, 110, 111, 112, 
	113, 114, 115, 117, 118, 119, 120, 121, 
	122, 123, 124, 125, 126, 137, 139, 141, 
	143, 145, 147, 149, 151, 153, 155, 157, 
	159, 161, 163, 165, 169, 171, 173, 175, 
	177, 179, 181, 184, 186, 188, 190, 192, 
	194, 196, 198, 214, 216, 217, 219, 221, 
	222, 223, 224, 225, 226, 228, 229, 230, 
	231, 232, 233, 234, 235, 236, 237, 238, 
	239, 240, 241, 242, 243, 244, 245, 246, 
	247, 261, 263, 265, 267, 269, 271, 273, 
	275, 277, 279, 281, 283, 285, 287, 289, 
	291, 294, 296, 298, 300, 302, 304, 306, 
	309, 311, 313, 315, 317, 319, 321, 323, 
	325, 328, 330, 332, 334, 336, 338, 340, 
	343, 346, 349, 351, 354, 356, 358, 360, 
	362, 364, 366, 368, 370, 372, 374, 376, 
	378, 380, 382, 384, 386, 388, 390, 392, 
	394, 396, 397, 398, 399, 400, 401, 402, 
	403, 404, 405, 406, 410, 411, 413, 414, 
	415, 416, 417, 418, 419, 420, 421, 422, 
	423, 424, 425, 426, 427, 429, 430, 431, 
	432, 433, 434, 435, 436, 437, 438, 446, 
	448, 450, 452, 454, 456, 458, 460, 463, 
	465, 467, 469, 471, 473, 475, 477, 479, 
	481, 483, 485, 487, 489, 491, 493, 495, 
	497, 499, 501, 503, 504, 505, 507, 508, 
	509, 510, 511, 512, 513, 514, 515, 516, 
	517, 518, 519, 520, 521, 535, 537, 539, 
	541, 543, 545, 547, 549, 551, 553, 555, 
	557, 559, 561, 563, 565, 568, 570, 572, 
	574, 576, 578, 580, 583, 585, 587, 589, 
	591, 593, 595, 597, 599, 602, 604, 606, 
	608, 610, 613, 615, 618, 621, 623, 625, 
	627, 629, 631, 634, 636, 638, 640, 642, 
	644, 646, 648, 650, 652, 654, 656, 658, 
	660, 662, 664, 666, 668, 670, 672, 674, 
	676, 678, 682, 684, 687, 689, 691, 693, 
	695, 697, 699, 701, 703, 705, 707, 709, 
	711, 713, 715, 717, 719, 721, 723, 725, 
	727, 729, 731, 733, 735, 737, 739, 741, 
	743, 745, 747, 749, 751, 752, 753, 754, 
	755, 756, 757, 761, 767, 770, 772, 778, 
	794, 796, 799, 801, 803, 805, 807, 811, 
	813, 815, 817, 819, 821, 823, 825, 827, 
	829, 831, 833, 835, 837, 839, 841, 843, 
	845, 847, 849, 852, 854, 856, 858, 860, 
	862, 864, 866, 868, 870, 872, 874, 876, 
	878, 880, 882, 884, 886, 888, 890, 892, 
	894, 896, 898, 900, 902, 905, 907, 909, 
	911, 913, 915, 917, 919, 921, 923, 925, 
	927, 929, 932, 934, 936, 938, 940, 942, 
	944, 946, 948, 951, 953, 955, 957, 959, 
	961, 963, 965, 967, 969, 971, 972, 974, 
	975, 976, 977, 978, 981, 982, 983, 984, 
	985, 986, 987, 988, 989, 990, 1004, 1006, 
	1008, 1010, 1012, 1014, 1016, 1018, 1020, 1022, 
	1024, 1026, 1028, 1030, 1032, 1034, 1038, 1040, 
	1042, 1044, 1046, 1048, 1050, 1053, 1055, 1057, 
	1059, 1061, 1063, 1065, 1067, 1069, 1072, 1074, 
	1076, 1078, 1080, 1083, 1085, 1087, 1089, 1091, 
	1093, 1095, 1097, 1099, 1101, 1103, 1105, 1107, 
	1109, 1112, 1114, 1117, 1120, 1122, 1124, 1126, 
	1128, 1130, 1133, 1135, 1137, 1139, 1141, 1143, 
	1145, 1147, 1149, 1151, 1153, 1155, 1157, 1159, 
	1161, 1163, 1165, 1167, 1169, 1171, 1173, 1175, 
	1177, 1179, 1181, 1183, 1187, 1189, 1192, 1194, 
	1196, 1198, 1200, 1202, 1204, 1206, 1208, 1210, 
	1212, 1214, 1216, 1218, 1220, 1223, 1225, 1227, 
	1230, 1232, 1234, 1236, 1238, 1240, 1242, 1244, 
	1246, 1248, 1250, 1252, 1254, 1256, 1258, 1260, 
	1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 67, 
	68, 69, 70, 77, 81, 124, 239, 9, 
	13, 10, 32, 34, 35, 37, 42, 64, 
	67, 68, 69, 70, 77, 81, 124, 9, 
	13, 34, 34, 10, 13, 10, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 9, 13, 10, 
	32, 9, 13, 10, 13, 10, 95, 70, 
	69, 65, 84, 85, 82, 69, 95, 69, 
	78, 68, 95, 37, 32, 10, 13, 10, 
	13, 13, 32, 64, 9, 10, 9, 10, 
	13, 32, 64, 11, 12, 10, 32, 64, 
	9, 13, 97, 101, 111, 114, 97, 99, 
	116, 101, 114, -61, 105, -83, 115, 116, 
	105, 99, 97, 58, 10, 10, 10, 32, 
	35, 37, 64, 67, 68, 69, 70, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 97, 101, 
	111, 10, 114, 10, 97, 10, 99, 10, 
	116, 10, 101, 10, 114, -61, 10, 105, 
	-83, 10, 10, 115, 10, 116, 10, 105, 
	10, 99, 10, 97, 10, 58, 10, 32, 
	34, 35, 37, 42, 64, 67, 68, 69, 
	70, 77, 81, 124, 9, 13, 97, 101, 
	100, 97, 111, 32, 115, 108, 105, 110, 
	101, 97, -61, 99, -89, -61, -93, 111, 
	32, 100, 111, 32, 67, 101, 110, -61, 
	-95, 114, 105, 111, 58, 10, 10, 10, 
	32, 35, 37, 42, 64, 67, 68, 69, 
	70, 77, 81, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 32, 10, 97, 101, 10, 114, 
	10, 97, 10, 99, 10, 116, 10, 101, 
	10, 114, -61, 10, 105, -83, 10, 10, 
	115, 10, 116, 10, 105, 10, 99, 10, 
	97, 10, 58, 10, 110, -61, 10, 97, 
	-95, 10, 10, 114, 10, 105, 10, 111, 
	10, 97, 10, 100, 10, 97, 111, 10, 
	32, 115, 10, 32, 110, 10, 116, -61, 
	10, 97, -93, 10, 10, 111, 10, 117, 
	10, 110, 10, 99, 10, 105, 10, 111, 
	10, 110, 10, 97, 10, 108, 10, 105, 
	10, 100, 10, 97, 10, 100, 10, 101, 
	10, 97, 10, 115, 10, 117, 10, 97, 
	10, 110, 10, 100, 97, 111, 32, 100, 
	111, 32, 67, 101, 110, 97, 32, 110, 
	115, 120, 116, -61, 97, -93, 111, 113, 
	117, 101, 109, 97, 32, 100, 111, 32, 
	67, 101, 110, -61, 97, 101, 109, 112, 
	108, 111, 115, 58, 10, 10, 10, 32, 
	35, 67, 70, 124, 9, 13, 10, 97, 
	10, 114, 10, 97, 10, 99, 10, 116, 
	10, 101, 10, 114, -61, 10, 105, -83, 
	10, 10, 115, 10, 116, 10, 105, 10, 
	99, 10, 97, 10, 58, 10, 117, 10, 
	110, 10, 99, 10, 105, 10, 111, 10, 
	110, 10, 97, 10, 108, 10, 105, 10, 
	100, 10, 97, 10, 100, 10, 101, 117, 
	110, 99, 100, 105, 111, 110, 97, 108, 
	105, 100, 97, 100, 101, 111, 58, 10, 
	10, 10, 32, 35, 37, 42, 64, 67, 
	68, 69, 70, 77, 81, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, 10, 97, 101, 
	10, 114, 10, 97, 10, 99, 10, 116, 
	10, 101, 10, 114, -61, 10, 105, -83, 
	10, 10, 115, 10, 116, 10, 105, 10, 
	99, 10, 97, 10, 58, 10, 110, -61, 
	10, 97, -95, 10, 10, 114, 10, 105, 
	10, 111, 10, 97, 101, 10, 100, 10, 
	97, 111, 10, 32, 115, 10, 108, 10, 
	105, 10, 110, 10, 101, 10, 97, -61, 
	10, 99, -89, 10, -61, 10, -93, 10, 
	10, 111, 10, 32, 10, 100, 10, 111, 
	10, 32, 10, 67, 10, 101, 10, 110, 
	-61, 10, 10, 97, 10, 111, 10, 32, 
	10, 100, 10, 111, 10, 32, 10, 67, 
	10, 101, 10, 110, 10, 97, 10, 32, 
	110, 115, 10, 116, -61, 10, 97, -93, 
	10, 10, 111, 10, 113, 10, 117, 10, 
	101, 10, 109, 10, 97, 10, 32, 10, 
	100, 10, 111, 10, 32, 10, 67, 10, 
	101, 10, 117, 10, 110, 10, 99, 10, 
	105, 10, 111, 10, 110, 10, 97, 10, 
	108, 10, 105, 10, 100, 10, 97, 10, 
	100, 10, 101, 10, 97, 10, 115, 10, 
	117, 10, 97, 10, 110, 10, 100, 97, 
	115, 117, 97, 110, 100, 32, 124, 9, 
	13, 10, 32, 92, 124, 9, 13, 10, 
	92, 124, 10, 92, 10, 32, 92, 124, 
	9, 13, 10, 32, 34, 35, 37, 42, 
	64, 67, 68, 69, 70, 77, 81, 124, 
	9, 13, 10, 110, -61, 10, 97, -95, 
	10, 10, 114, 10, 105, 10, 111, 10, 
	32, 58, 115, 10, 100, 10, 101, 10, 
	32, 10, 70, 10, 117, 10, 110, 10, 
	100, 10, 111, 10, 110, 10, 116, 10, 
	101, 10, 120, 10, 116, 10, 101, 10, 
	108, 10, 105, 10, 110, 10, 101, 10, 
	97, -61, 10, 99, -89, 10, -61, 10, 
	-93, 10, 10, 111, 10, 32, 10, 100, 
	10, 111, 10, 32, 10, 67, 10, 101, 
	10, 110, -61, 10, -95, 10, 10, 114, 
	10, 105, 10, 97, 10, 111, 10, 32, 
	10, 100, 10, 111, 10, 32, 10, 67, 
	10, 101, 10, 110, 10, 97, 10, 115, 
	120, 10, 113, 10, 117, 10, 101, 10, 
	109, 10, 97, 10, 32, 10, 100, 10, 
	111, 10, 32, 10, 67, 10, 101, 10, 
	110, -61, 10, 97, 10, 101, 10, 109, 
	10, 112, 10, 108, 10, 111, 10, 115, 
	10, 117, 10, 110, 10, 99, 100, 10, 
	105, 10, 111, 10, 110, 10, 97, 10, 
	108, 10, 105, 10, 100, 10, 97, 10, 
	100, 10, 101, 110, -61, 97, -95, 114, 
	105, 111, 32, 58, 115, 100, 101, 32, 
	70, 117, 110, 100, 10, 10, 10, 32, 
	35, 37, 42, 64, 67, 68, 69, 70, 
	77, 81, 9, 13, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 32, 10, 97, 101, 111, 10, 114, 
	10, 97, 10, 99, 10, 116, 10, 101, 
	10, 114, -61, 10, 105, -83, 10, 10, 
	115, 10, 116, 10, 105, 10, 99, 10, 
	97, 10, 58, 10, 110, -61, 10, 97, 
	-95, 10, 10, 114, 10, 105, 10, 111, 
	10, 32, 58, 10, 100, 10, 101, 10, 
	32, 10, 70, 10, 117, 10, 110, 10, 
	100, 10, 111, 10, 110, 10, 116, 10, 
	101, 10, 120, 10, 116, 10, 97, 101, 
	10, 100, 10, 97, 111, 10, 32, 115, 
	10, 108, 10, 105, 10, 110, 10, 101, 
	10, 97, -61, 10, 99, -89, 10, -61, 
	10, -93, 10, 10, 111, 10, 32, 10, 
	100, 10, 111, 10, 32, 10, 67, 10, 
	101, 10, 110, -61, 10, -95, 10, 10, 
	114, 10, 105, 10, 97, 10, 111, 10, 
	32, 10, 100, 10, 111, 10, 32, 10, 
	67, 10, 101, 10, 110, 10, 97, 10, 
	32, 110, 115, 10, 116, -61, 10, 97, 
	-93, 10, 10, 111, 10, 113, 10, 117, 
	10, 101, 10, 109, 10, 97, 10, 32, 
	10, 100, 10, 111, 10, 32, 10, 67, 
	10, 101, 10, 110, -61, 10, 97, 10, 
	117, 10, 110, 10, 99, 100, 10, 105, 
	10, 111, 10, 110, 10, 97, 10, 108, 
	10, 105, 10, 100, 10, 97, 10, 100, 
	10, 101, 10, 97, 10, 115, 10, 117, 
	10, 97, 10, 110, 10, 100, 110, 116, 
	101, 120, 116, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 15, 14, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 3, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 9, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 4, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 14, 2, 1, 2, 2, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	12, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 3, 
	3, 3, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 4, 1, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 6, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 12, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 3, 2, 3, 3, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 4, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 1, 1, 
	1, 1, 2, 4, 3, 2, 4, 14, 
	2, 3, 2, 2, 2, 2, 4, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 2, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 12, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 4, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 3, 3, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 4, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 17, 33, 35, 37, 40, 43, 
	48, 53, 58, 63, 67, 71, 74, 76, 
	78, 80, 82, 84, 86, 88, 90, 92, 
	94, 96, 98, 100, 102, 104, 106, 109, 
	112, 117, 124, 129, 133, 135, 137, 139, 
	141, 143, 145, 148, 150, 152, 154, 156, 
	158, 160, 162, 164, 166, 177, 180, 183, 
	186, 189, 192, 195, 198, 201, 204, 207, 
	210, 213, 216, 219, 224, 227, 230, 233, 
	236, 239, 242, 246, 249, 252, 255, 258, 
	261, 264, 267, 283, 286, 288, 291, 294, 
	296, 298, 300, 302, 304, 307, 309, 311, 
	313, 315, 317, 319, 321, 323, 325, 327, 
	329, 331, 333, 335, 337, 339, 341, 343, 
	345, 359, 362, 365, 368, 371, 374, 377, 
	380, 383, 386, 389, 392, 395, 398, 401, 
	404, 408, 411, 414, 417, 420, 423, 426, 
	430, 433, 436, 439, 442, 445, 448, 451, 
	454, 458, 461, 464, 467, 470, 473, 476, 
	480, 484, 488, 491, 495, 498, 501, 504, 
	507, 510, 513, 516, 519, 522, 525, 528, 
	531, 534, 537, 540, 543, 546, 549, 552, 
	555, 558, 560, 562, 564, 566, 568, 570, 
	572, 574, 576, 578, 583, 585, 588, 590, 
	592, 594, 596, 598, 600, 602, 604, 606, 
	608, 610, 612, 614, 616, 619, 621, 623, 
	625, 627, 629, 631, 633, 635, 637, 645, 
	648, 651, 654, 657, 660, 663, 666, 670, 
	673, 676, 679, 682, 685, 688, 691, 694, 
	697, 700, 703, 706, 709, 712, 715, 718, 
	721, 724, 727, 730, 732, 734, 737, 739, 
	741, 743, 745, 747, 749, 751, 753, 755, 
	757, 759, 761, 763, 765, 779, 782, 785, 
	788, 791, 794, 797, 800, 803, 806, 809, 
	812, 815, 818, 821, 824, 828, 831, 834, 
	837, 840, 843, 846, 850, 853, 856, 859, 
	862, 865, 868, 871, 874, 878, 881, 884, 
	887, 890, 894, 897, 901, 905, 908, 911, 
	914, 917, 920, 924, 927, 930, 933, 936, 
	939, 942, 945, 948, 951, 954, 957, 960, 
	963, 966, 969, 972, 975, 978, 981, 984, 
	987, 990, 995, 998, 1002, 1005, 1008, 1011, 
	1014, 1017, 1020, 1023, 1026, 1029, 1032, 1035, 
	1038, 1041, 1044, 1047, 1050, 1053, 1056, 1059, 
	1062, 1065, 1068, 1071, 1074, 1077, 1080, 1083, 
	1086, 1089, 1092, 1095, 1098, 1100, 1102, 1104, 
	1106, 1108, 1110, 1114, 1120, 1124, 1127, 1133, 
	1149, 1152, 1156, 1159, 1162, 1165, 1168, 1173, 
	1176, 1179, 1182, 1185, 1188, 1191, 1194, 1197, 
	1200, 1203, 1206, 1209, 1212, 1215, 1218, 1221, 
	1224, 1227, 1230, 1234, 1237, 1240, 1243, 1246, 
	1249, 1252, 1255, 1258, 1261, 1264, 1267, 1270, 
	1273, 1276, 1279, 1282, 1285, 1288, 1291, 1294, 
	1297, 1300, 1303, 1306, 1309, 1313, 1316, 1319, 
	1322, 1325, 1328, 1331, 1334, 1337, 1340, 1343, 
	1346, 1349, 1353, 1356, 1359, 1362, 1365, 1368, 
	1371, 1374, 1377, 1381, 1384, 1387, 1390, 1393, 
	1396, 1399, 1402, 1405, 1408, 1411, 1413, 1416, 
	1418, 1420, 1422, 1424, 1428, 1430, 1432, 1434, 
	1436, 1438, 1440, 1442, 1444, 1446, 1460, 1463, 
	1466, 1469, 1472, 1475, 1478, 1481, 1484, 1487, 
	1490, 1493, 1496, 1499, 1502, 1505, 1510, 1513, 
	1516, 1519, 1522, 1525, 1528, 1532, 1535, 1538, 
	1541, 1544, 1547, 1550, 1553, 1556, 1560, 1563, 
	1566, 1569, 1572, 1576, 1579, 1582, 1585, 1588, 
	1591, 1594, 1597, 1600, 1603, 1606, 1609, 1612, 
	1615, 1619, 1622, 1626, 1630, 1633, 1636, 1639, 
	1642, 1645, 1649, 1652, 1655, 1658, 1661, 1664, 
	1667, 1670, 1673, 1676, 1679, 1682, 1685, 1688, 
	1691, 1694, 1697, 1700, 1703, 1706, 1709, 1712, 
	1715, 1718, 1721, 1724, 1729, 1732, 1736, 1739, 
	1742, 1745, 1748, 1751, 1754, 1757, 1760, 1763, 
	1766, 1769, 1772, 1775, 1778, 1782, 1785, 1788, 
	1792, 1795, 1798, 1801, 1804, 1807, 1810, 1813, 
	1816, 1819, 1822, 1825, 1828, 1831, 1834, 1837, 
	1840, 1842, 1844, 1846, 1848, 1850, 1852, 1854
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 1, 
	0, 2, 1, 3, 4, 5, 6, 7, 
	8, 9, 10, 11, 12, 13, 14, 1, 
	0, 16, 0, 17, 0, 19, 20, 18, 
	22, 23, 21, 26, 25, 27, 25, 24, 
	30, 29, 31, 29, 28, 30, 29, 32, 
	29, 28, 30, 29, 33, 29, 28, 35, 
	34, 34, 0, 2, 36, 36, 0, 38, 
	39, 37, 2, 0, 40, 0, 41, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 56, 57, 55, 59, 60, 58, 
	0, 0, 0, 0, 61, 62, 63, 62, 
	62, 65, 64, 61, 2, 66, 7, 66, 
	0, 67, 68, 69, 0, 70, 0, 71, 
	0, 72, 0, 73, 0, 74, 0, 75, 
	0, 76, 77, 0, 77, 0, 78, 0, 
	79, 0, 80, 0, 81, 0, 82, 0, 
	83, 0, 85, 84, 87, 86, 87, 88, 
	89, 90, 89, 91, 92, 93, 94, 88, 
	86, 87, 95, 86, 87, 96, 86, 87, 
	97, 86, 87, 98, 86, 87, 99, 86, 
	87, 100, 86, 87, 101, 86, 87, 102, 
	86, 87, 103, 86, 87, 104, 86, 87, 
	105, 86, 87, 106, 86, 87, 107, 86, 
	87, 108, 86, 87, 109, 110, 111, 86, 
	87, 112, 86, 87, 113, 86, 87, 114, 
	86, 87, 115, 86, 87, 116, 86, 87, 
	117, 86, 118, 87, 119, 86, 119, 87, 
	86, 87, 120, 86, 87, 121, 86, 87, 
	122, 86, 87, 123, 86, 87, 124, 86, 
	87, 125, 86, 127, 126, 128, 129, 130, 
	131, 132, 133, 134, 135, 136, 137, 138, 
	139, 126, 0, 140, 141, 0, 142, 0, 
	143, 143, 0, 54, 144, 0, 145, 0, 
	146, 0, 147, 0, 148, 0, 149, 0, 
	150, 151, 0, 152, 0, 153, 0, 154, 
	0, 155, 0, 156, 0, 157, 0, 158, 
	0, 159, 0, 160, 0, 161, 0, 162, 
	0, 163, 0, 164, 0, 165, 0, 166, 
	0, 167, 0, 168, 0, 170, 169, 172, 
	171, 172, 173, 174, 175, 176, 174, 177, 
	178, 179, 180, 181, 182, 173, 171, 172, 
	183, 171, 172, 184, 171, 172, 185, 171, 
	172, 186, 171, 172, 187, 171, 172, 188, 
	171, 172, 189, 171, 172, 190, 171, 172, 
	191, 171, 172, 192, 171, 172, 193, 171, 
	172, 194, 171, 172, 195, 171, 172, 196, 
	171, 172, 197, 171, 172, 198, 199, 171, 
	172, 200, 171, 172, 201, 171, 172, 202, 
	171, 172, 203, 171, 172, 204, 171, 172, 
	205, 171, 206, 172, 207, 171, 207, 172, 
	171, 172, 208, 171, 172, 209, 171, 172, 
	210, 171, 172, 211, 171, 172, 212, 171, 
	172, 197, 171, 172, 213, 171, 214, 172, 
	215, 171, 215, 172, 171, 172, 216, 171, 
	172, 217, 171, 172, 212, 171, 172, 218, 
	171, 172, 219, 171, 172, 220, 220, 171, 
	172, 197, 221, 171, 172, 197, 222, 171, 
	172, 223, 171, 224, 172, 225, 171, 225, 
	172, 171, 172, 221, 171, 172, 226, 171, 
	172, 227, 171, 172, 228, 171, 172, 229, 
	171, 172, 230, 171, 172, 231, 171, 172, 
	232, 171, 172, 233, 171, 172, 234, 171, 
	172, 235, 171, 172, 236, 171, 172, 237, 
	171, 172, 212, 171, 172, 238, 171, 172, 
	221, 171, 172, 239, 171, 172, 240, 171, 
	172, 241, 171, 172, 225, 171, 242, 0, 
	243, 0, 244, 0, 245, 0, 246, 0, 
	247, 0, 248, 0, 249, 0, 250, 0, 
	164, 0, 54, 251, 252, 253, 0, 254, 
	0, 255, 256, 0, 256, 0, 144, 0, 
	257, 0, 258, 0, 259, 0, 260, 0, 
	261, 0, 262, 0, 263, 0, 264, 0, 
	265, 0, 266, 0, 267, 0, 268, 0, 
	163, 164, 0, 269, 0, 270, 0, 271, 
	0, 272, 0, 273, 0, 274, 0, 275, 
	0, 277, 276, 279, 278, 279, 280, 281, 
	282, 283, 281, 280, 278, 279, 284, 278, 
	279, 285, 278, 279, 286, 278, 279, 287, 
	278, 279, 288, 278, 279, 289, 278, 279, 
	290, 278, 291, 279, 292, 278, 292, 279, 
	278, 279, 293, 278, 279, 294, 278, 279, 
	295, 278, 279, 296, 278, 279, 297, 278, 
	279, 298, 278, 279, 299, 278, 279, 300, 
	278, 279, 301, 278, 279, 302, 278, 279, 
	303, 278, 279, 304, 278, 279, 305, 278, 
	279, 306, 278, 279, 307, 278, 279, 308, 
	278, 279, 309, 278, 279, 310, 278, 279, 
	297, 278, 311, 0, 312, 0, 313, 314, 
	0, 315, 0, 316, 0, 317, 0, 318, 
	0, 319, 0, 320, 0, 321, 0, 322, 
	0, 323, 0, 82, 0, 324, 0, 325, 
	0, 327, 326, 329, 328, 329, 330, 331, 
	332, 333, 331, 334, 335, 336, 337, 338, 
	339, 330, 328, 329, 340, 328, 329, 341, 
	328, 329, 342, 328, 329, 343, 328, 329, 
	344, 328, 329, 345, 328, 329, 346, 328, 
	329, 347, 328, 329, 348, 328, 329, 349, 
	328, 329, 350, 328, 329, 351, 328, 329, 
	352, 328, 329, 353, 328, 329, 354, 328, 
	329, 355, 356, 328, 329, 357, 328, 329, 
	358, 328, 329, 359, 328, 329, 360, 328, 
	329, 361, 328, 329, 362, 328, 363, 329, 
	364, 328, 364, 329, 328, 329, 365, 328, 
	329, 366, 328, 329, 367, 328, 329, 368, 
	328, 329, 369, 328, 329, 354, 328, 329, 
	370, 328, 371, 329, 372, 328, 372, 329, 
	328, 329, 373, 328, 329, 374, 328, 329, 
	369, 328, 329, 375, 376, 328, 329, 377, 
	328, 329, 378, 378, 328, 329, 354, 379, 
	328, 329, 380, 328, 329, 381, 328, 329, 
	382, 328, 329, 383, 328, 329, 384, 328, 
	385, 329, 386, 328, 387, 329, 328, 388, 
	329, 328, 389, 329, 328, 329, 390, 328, 
	329, 391, 328, 329, 392, 328, 329, 393, 
	328, 329, 394, 328, 329, 395, 328, 329, 
	396, 328, 329, 397, 328, 371, 329, 328, 
	329, 398, 328, 329, 399, 328, 329, 400, 
	328, 329, 401, 328, 329, 402, 328, 329, 
	403, 328, 329, 404, 328, 329, 405, 328, 
	329, 406, 328, 329, 372, 328, 329, 354, 
	407, 408, 328, 329, 409, 328, 410, 329, 
	411, 328, 411, 329, 328, 329, 379, 328, 
	329, 412, 328, 329, 413, 328, 329, 414, 
	328, 329, 415, 328, 329, 416, 328, 329, 
	417, 328, 329, 418, 328, 329, 419, 328, 
	329, 420, 328, 329, 421, 328, 329, 356, 
	328, 329, 422, 328, 329, 423, 328, 329, 
	424, 328, 329, 425, 328, 329, 426, 328, 
	329, 427, 328, 329, 428, 328, 329, 429, 
	328, 329, 430, 328, 329, 431, 328, 329, 
	432, 328, 329, 433, 328, 329, 369, 328, 
	329, 434, 328, 329, 379, 328, 329, 435, 
	328, 329, 436, 328, 329, 437, 328, 329, 
	411, 328, 438, 0, 144, 0, 439, 0, 
	440, 0, 441, 0, 256, 0, 442, 443, 
	442, 0, 446, 445, 447, 448, 445, 444, 
	0, 450, 451, 449, 0, 450, 449, 446, 
	452, 450, 451, 452, 449, 446, 453, 454, 
	455, 456, 457, 458, 459, 460, 461, 462, 
	463, 464, 465, 453, 0, 87, 466, 86, 
	467, 87, 468, 86, 468, 87, 86, 87, 
	469, 86, 87, 470, 86, 87, 471, 86, 
	87, 472, 125, 124, 86, 87, 473, 86, 
	87, 474, 86, 87, 475, 86, 87, 476, 
	86, 87, 477, 86, 87, 478, 86, 87, 
	479, 86, 87, 124, 86, 87, 480, 86, 
	87, 481, 86, 87, 482, 86, 87, 483, 
	86, 87, 479, 86, 87, 484, 86, 87, 
	485, 86, 87, 486, 86, 87, 487, 86, 
	87, 488, 86, 87, 489, 86, 490, 87, 
	491, 86, 492, 87, 86, 493, 87, 86, 
	494, 87, 86, 87, 495, 86, 87, 496, 
	86, 87, 497, 86, 87, 498, 86, 87, 
	499, 86, 87, 500, 86, 87, 501, 86, 
	87, 502, 86, 503, 87, 86, 504, 87, 
	86, 87, 505, 86, 87, 479, 86, 87, 
	506, 86, 87, 507, 86, 87, 508, 86, 
	87, 509, 86, 87, 510, 86, 87, 511, 
	86, 87, 512, 86, 87, 513, 86, 87, 
	514, 86, 87, 504, 86, 87, 515, 516, 
	86, 87, 517, 86, 87, 518, 86, 87, 
	519, 86, 87, 520, 86, 87, 521, 86, 
	87, 522, 86, 87, 523, 86, 87, 524, 
	86, 87, 525, 86, 87, 526, 86, 87, 
	527, 86, 87, 528, 86, 503, 87, 504, 
	86, 87, 529, 86, 87, 530, 86, 87, 
	531, 86, 87, 532, 86, 87, 533, 86, 
	87, 124, 86, 87, 534, 86, 87, 535, 
	86, 87, 536, 479, 86, 87, 537, 86, 
	87, 538, 86, 87, 539, 86, 87, 540, 
	86, 87, 541, 86, 87, 542, 86, 87, 
	543, 86, 87, 544, 86, 87, 545, 86, 
	87, 124, 86, 546, 0, 547, 548, 0, 
	548, 0, 549, 0, 550, 0, 551, 0, 
	552, 553, 274, 0, 554, 0, 555, 0, 
	556, 0, 557, 0, 558, 0, 559, 0, 
	314, 0, 561, 560, 563, 562, 563, 564, 
	565, 566, 567, 565, 568, 569, 570, 571, 
	572, 573, 564, 562, 563, 574, 562, 563, 
	575, 562, 563, 576, 562, 563, 577, 562, 
	563, 578, 562, 563, 579, 562, 563, 580, 
	562, 563, 581, 562, 563, 582, 562, 563, 
	583, 562, 563, 584, 562, 563, 585, 562, 
	563, 586, 562, 563, 587, 562, 563, 588, 
	562, 563, 589, 590, 591, 562, 563, 592, 
	562, 563, 593, 562, 563, 594, 562, 563, 
	595, 562, 563, 596, 562, 563, 597, 562, 
	598, 563, 599, 562, 599, 563, 562, 563, 
	600, 562, 563, 601, 562, 563, 602, 562, 
	563, 603, 562, 563, 604, 562, 563, 588, 
	562, 563, 605, 562, 606, 563, 607, 562, 
	607, 563, 562, 563, 608, 562, 563, 609, 
	562, 563, 610, 562, 563, 611, 588, 562, 
	563, 612, 562, 563, 613, 562, 563, 614, 
	562, 563, 615, 562, 563, 616, 562, 563, 
	617, 562, 563, 618, 562, 563, 604, 562, 
	563, 619, 562, 563, 620, 562, 563, 621, 
	562, 563, 622, 562, 563, 618, 562, 563, 
	623, 624, 562, 563, 625, 562, 563, 626, 
	626, 562, 563, 588, 627, 562, 563, 628, 
	562, 563, 629, 562, 563, 630, 562, 563, 
	631, 562, 563, 632, 562, 633, 563, 634, 
	562, 635, 563, 562, 636, 563, 562, 637, 
	563, 562, 563, 638, 562, 563, 639, 562, 
	563, 640, 562, 563, 641, 562, 563, 642, 
	562, 563, 643, 562, 563, 644, 562, 563, 
	645, 562, 646, 563, 562, 647, 563, 562, 
	563, 648, 562, 563, 618, 562, 563, 649, 
	562, 563, 650, 562, 563, 651, 562, 563, 
	652, 562, 563, 653, 562, 563, 654, 562, 
	563, 655, 562, 563, 656, 562, 563, 657, 
	562, 563, 647, 562, 563, 588, 658, 659, 
	562, 563, 660, 562, 661, 563, 662, 562, 
	662, 563, 562, 563, 627, 562, 563, 663, 
	562, 563, 664, 562, 563, 665, 562, 563, 
	666, 562, 563, 667, 562, 563, 668, 562, 
	563, 669, 562, 563, 670, 562, 563, 671, 
	562, 563, 672, 562, 563, 673, 562, 563, 
	674, 562, 646, 563, 647, 562, 563, 675, 
	562, 563, 676, 562, 563, 677, 618, 562, 
	563, 678, 562, 563, 679, 562, 563, 680, 
	562, 563, 681, 562, 563, 682, 562, 563, 
	683, 562, 563, 684, 562, 563, 685, 562, 
	563, 686, 562, 563, 604, 562, 563, 687, 
	562, 563, 627, 562, 563, 688, 562, 563, 
	689, 562, 563, 690, 562, 563, 662, 562, 
	691, 0, 692, 0, 693, 0, 694, 0, 
	314, 0, 695, 0, 1, 0, 696, 0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 83, 187, 243, 364, 366, 370, 605, 
	4, 5, 6, 7, 6, 6, 7, 6, 
	8, 8, 8, 9, 8, 8, 8, 9, 
	10, 11, 12, 2, 12, 13, 2, 14, 
	16, 17, 18, 19, 20, 21, 22, 23, 
	24, 25, 26, 27, 28, 607, 30, 31, 
	2, 14, 31, 2, 14, 33, 34, 2, 
	33, 32, 34, 36, 461, 600, 37, 38, 
	39, 40, 41, 42, 43, 44, 45, 46, 
	47, 48, 49, 50, 51, 52, 51, 52, 
	52, 2, 53, 67, 396, 428, 448, 54, 
	55, 56, 57, 58, 59, 60, 61, 62, 
	63, 64, 65, 66, 2, 68, 376, 391, 
	69, 70, 71, 72, 73, 74, 75, 76, 
	77, 78, 79, 80, 81, 82, 2, 2, 
	3, 13, 15, 29, 32, 35, 83, 187, 
	243, 364, 366, 370, 84, 87, 85, 86, 
	29, 88, 89, 90, 91, 92, 93, 177, 
	94, 95, 96, 97, 98, 99, 100, 101, 
	102, 103, 104, 105, 106, 107, 108, 109, 
	110, 111, 112, 111, 112, 112, 2, 113, 
	127, 128, 149, 153, 158, 171, 173, 114, 
	115, 116, 117, 118, 119, 120, 121, 122, 
	123, 124, 125, 126, 2, 82, 129, 143, 
	130, 131, 132, 133, 134, 135, 136, 137, 
	138, 139, 140, 141, 142, 144, 145, 146, 
	147, 148, 150, 151, 152, 127, 154, 155, 
	156, 157, 159, 160, 161, 162, 163, 164, 
	165, 166, 167, 168, 169, 170, 172, 174, 
	175, 176, 178, 179, 180, 181, 182, 183, 
	184, 185, 186, 188, 192, 205, 189, 190, 
	191, 193, 194, 195, 196, 197, 198, 199, 
	200, 201, 202, 203, 204, 206, 207, 208, 
	209, 210, 211, 212, 213, 214, 213, 214, 
	214, 2, 215, 230, 216, 217, 218, 219, 
	220, 221, 222, 223, 224, 225, 226, 227, 
	228, 229, 82, 231, 232, 233, 234, 235, 
	236, 237, 238, 239, 240, 241, 242, 244, 
	245, 246, 256, 247, 248, 249, 250, 251, 
	252, 253, 254, 255, 257, 258, 259, 260, 
	259, 260, 260, 2, 261, 275, 276, 297, 
	329, 345, 358, 360, 262, 263, 264, 265, 
	266, 267, 268, 269, 270, 271, 272, 273, 
	274, 2, 82, 277, 291, 278, 279, 280, 
	281, 282, 283, 284, 285, 286, 287, 288, 
	289, 290, 292, 293, 294, 295, 296, 298, 
	301, 299, 300, 275, 302, 303, 304, 305, 
	306, 307, 319, 308, 309, 310, 311, 312, 
	313, 314, 315, 316, 317, 318, 320, 321, 
	322, 323, 324, 325, 326, 327, 328, 330, 
	334, 331, 332, 333, 335, 336, 337, 338, 
	339, 340, 341, 342, 343, 344, 346, 347, 
	348, 349, 350, 351, 352, 353, 354, 355, 
	356, 357, 359, 361, 362, 363, 365, 367, 
	368, 369, 370, 371, 372, 374, 375, 373, 
	371, 372, 373, 371, 374, 375, 3, 13, 
	15, 29, 32, 35, 83, 187, 243, 364, 
	366, 370, 377, 378, 379, 380, 381, 382, 
	383, 384, 385, 386, 387, 388, 389, 390, 
	392, 393, 394, 395, 397, 398, 399, 400, 
	401, 402, 403, 418, 404, 405, 406, 407, 
	408, 409, 410, 411, 412, 413, 414, 415, 
	416, 417, 419, 420, 421, 422, 423, 424, 
	425, 426, 427, 429, 442, 430, 431, 432, 
	433, 434, 435, 436, 437, 438, 439, 440, 
	441, 443, 444, 445, 446, 447, 449, 450, 
	451, 452, 453, 454, 455, 456, 457, 458, 
	459, 460, 462, 463, 464, 465, 466, 467, 
	468, 475, 469, 470, 471, 472, 473, 474, 
	476, 477, 476, 477, 477, 2, 478, 492, 
	493, 528, 563, 581, 594, 596, 479, 480, 
	481, 482, 483, 484, 485, 486, 487, 488, 
	489, 490, 491, 2, 82, 494, 508, 523, 
	495, 496, 497, 498, 499, 500, 501, 502, 
	503, 504, 505, 506, 507, 509, 510, 511, 
	512, 513, 514, 515, 516, 517, 518, 519, 
	520, 521, 522, 524, 525, 526, 527, 529, 
	532, 530, 531, 492, 533, 534, 535, 536, 
	537, 538, 553, 539, 540, 541, 542, 543, 
	544, 545, 546, 547, 548, 549, 550, 551, 
	552, 554, 555, 556, 557, 558, 559, 560, 
	561, 562, 564, 568, 565, 566, 567, 569, 
	570, 571, 572, 573, 574, 575, 576, 577, 
	578, 579, 580, 582, 583, 584, 585, 586, 
	587, 588, 589, 590, 591, 592, 593, 595, 
	597, 598, 599, 601, 602, 603, 604, 606, 
	0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 35, 0, 
	0, 0, 7, 139, 48, 0, 102, 9, 
	5, 45, 134, 45, 0, 33, 122, 33, 
	33, 0, 11, 106, 0, 0, 114, 25, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	149, 126, 0, 110, 23, 0, 27, 118, 
	27, 51, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	0, 69, 33, 84, 84, 84, 84, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 13, 31, 130, 
	60, 57, 31, 63, 57, 63, 63, 63, 
	63, 63, 63, 66, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 144, 0, 54, 0, 78, 33, 
	84, 84, 84, 84, 84, 84, 84, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 19, 19, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	0, 81, 84, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 21, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 0, 72, 33, 84, 84, 84, 
	84, 84, 84, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 15, 15, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 37, 37, 54, 37, 
	87, 0, 0, 39, 0, 0, 93, 90, 
	41, 96, 90, 96, 96, 96, 96, 96, 
	96, 99, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 144, 0, 54, 0, 75, 33, 84, 
	84, 84, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 17, 17, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 607;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/pt.js.rl" */

/* line 130 "ragel/i18n/pt.js.rl" */

/* line 131 "ragel/i18n/pt.js.rl" */

/* line 132 "ragel/i18n/pt.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 1055 "js/lib/gherkin/lexer/pt.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/pt.js.rl" */
  
/* line 1062 "js/lib/gherkin/lexer/pt.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/pt.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/pt.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/pt.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/pt.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/pt.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/pt.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/pt.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/pt.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/pt.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/pt.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/pt.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/pt.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/pt.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/pt.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/pt.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/pt.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/pt.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/pt.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/pt.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/pt.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/pt.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/pt.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/pt.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/pt.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1289 "js/lib/gherkin/lexer/pt.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/pt.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1328 "js/lib/gherkin/lexer/pt.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/pt.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/pt', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/pt', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();
